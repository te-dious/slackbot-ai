This file contains different sql queries in the system.
Credit billing payment
SELECT
  inv.id as invoice_id,
  inv.amount_payable as amount_payable,
  inv.invoice_date,
  inv.due_date,
  af.agent_code,
  pay.amount_paid,
  pay.paid_at,
  pay.is_reconciled,
  pay.created_at as uploaded_on,
  pay.vendor_name
FROM
  profiles_affiliateinvoice AS afi
  JOIN profiles_affiliate AS af ON af.id = afi.affiliate_id
  JOIN billing_invoice AS inv ON inv.id = afi.invoice_id
  JOIN billing_invoicedetail AS invd ON invd.invoice_id = inv.id
  right JOIN billing_payment_invoices AS bpi ON bpi.invoice_id = inv.id
  right JOIN (
    SELECT
      *
    FROM
      billing_payment AS p
    WHERE
      is_reconciled = TRUE
      AND p.vendor_name != 'billing.Payment'
      AND p.vendor_name != 'netting.Payment'
  ) AS pay ON pay.id = bpi.payment_id
WHERE
  1 = 1
  AND   
  (CASE
    WHEN "Select All" not in ({{ agent_codes }}) THEN af.agent_code in ({{ agent_codes }})
    ELSE TRUE
  END)
  AND invd.detail_type = 'combined_credit_payout'
  AND pay.paid_at >= '{{ paid_at.start }}'
  AND pay.paid_at <= '{{ paid_at.end }}'
order BY
  -inv.id;
  
Credit billing
SELECT
  inv.id as invoice_id,
  inv.invoice_date,
  inv.due_date,
  af.agent_code,
  CASE
    WHEN invd.product is null THEN 'All Products'
    WHEN invd.product = "compulsory_insurance" THEN 'CMI Product'
    WHEN invd.product = "voluntary_insurance" THEN 'VMI Product'
  END AS product,
  inv.amount_payable,
  COALESCE(SUM(pay.amount_paid), 0) AS total_amount_paid,
  inv.amount_payable - COALESCE(SUM(pay.amount_paid), 0) AS due,
  CASE
    WHEN SUM(pay.amount_paid) = inv.amount_payable THEN 'fully-paid'
    WHEN SUM(pay.amount_paid) > inv.amount_payable THEN 'over-paid'
    ELSE 'under-paid'
  END AS payment_status
FROM
  profiles_affiliateinvoice AS afi
  JOIN profiles_affiliate AS af ON af.id = afi.affiliate_id
  JOIN billing_invoice AS inv ON inv.id = afi.invoice_id
  JOIN billing_invoicedetail AS invd ON invd.invoice_id = inv.id
  LEFT JOIN billing_payment_invoices AS bpi ON bpi.invoice_id = inv.id
  LEFT JOIN (
    SELECT
      *
    FROM
      billing_payment AS p
    WHERE
      (is_reconciled = TRUE
      AND p.vendor_name != 'billing.Payment'
      AND p.vendor_name != 'netting.Payment'
      AND p.paid_at > "2022-08-04")
      or (
      is_reconciled = TRUE
      AND DATE(p.paid_at) <= "2022-08-04")
  ) AS pay ON pay.id = bpi.payment_id
WHERE
  1 = 1
  AND   
  (CASE
    WHEN "Select All" not in ({{ agent_codes }}) THEN af.agent_code in ({{ agent_codes }})
    ELSE TRUE
  END)
  AND invd.detail_type = 'combined_credit_payout'
  AND inv.invoice_date >= '{{ invoice_date.start }}'
  AND inv.invoice_date <= '{{ invoice_date.end }}'
GROUP BY
  inv.id
ORDER BY
  - inv.due_date;

Coupon Usage
select
distinct
    transaction_id,
    qcl.quotation_id,
  voucher_code,
  couponinv.amount,
  agent_code,
  date(fq.created_at) quotation_created_at,
  date(qcl.created_at) coupon_added_on,
  if(
    af.account_type is null,
    'direct_agent',
    af.account_type
  ) account_type,
  min(inv.payment_status) as payment_status,
  max(inv.created_at) as payment_date,
  concat(
    'https://www.fairdee.co.th/wizard?id=',
    quotation_id
  ) as sale_link
from
  utils_quotationcouponlink as qcl
  join billing_invoice as couponinv on couponinv.id = qcl.invoice_id
  join utils_fairdeequotation as fq on fq.id = qcl.quotation_id
  join utils_fairdeequotation_invoices as fqi on fqi.fairdeequotation_id = fq.id
  join billing_invoice as inv on inv.id = fqi.invoice_id
  join utils_fairdeequotationquery as fqq on fqq.id = fq.quotation_query_id
  join profiles_affiliate as af on af.id = fqq.affiliate_id
  where inv.payer = "customer"
  and inv.payee = "fairdee"
  and qcl.created_at >= "{{ Month.start }}" 
  and qcl.created_at <= "{{ Month.end }}"
 group by quotation_id;

Successfull payment proof ocr by ai

select uploader as "Uploaded by", count(uploader) as successful from (select
  pay.id, min(r.name) as uploader
from
  billing_payment as pay
  join billing_paymentfile as pf on pf.payment_id = pay.id
  join utils_file as file on file.id = pf.file_id
  join profiles_user as user on user.id = file.created_by_id
  join profiles_userrole as role on role.user_id = user.id
  join profiles_role as r on r.id = role.role_id
where
  pay.created_by_id = 128884
group by pay.id) as t 
group by uploader;

Who created the payment?
WITH payment_summary AS (
  SELECT
    t.detail_type,
    user_type,
    COUNT(*) AS user_count
  FROM
    (
      SELECT distinct 
        pay.id AS payment_id,
        pay.created_by_id,
        invd.detail_type,
        CASE
          WHEN pay.created_by_id = 128884 THEN 'ai'
          ELSE 'manual'
        END AS user_type,
        rank() over(PARTITION by invd.invoice_id order by invd.detail_type asc) as rnk
      FROM
        billing_payment AS pay
        JOIN billing_payment_invoices AS bpi ON bpi.payment_id = pay.id
        JOIN billing_invoicedetail AS invd ON invd.invoice_id = bpi.invoice_id
        JOIN billing_paymentfile AS pf ON pf.payment_id = pay.id
        JOIN utils_file AS file ON file.id = pf.file_id
      WHERE
        DATE(CONVERT_TZ(pay.created_at, '+00:00', '+07:00')) > '2023-04-21'
        and DATE(CONVERT_TZ(file.created_at, '+00:00', '+07:00')) > '2023-04-21'
            and detail_type not in ('compulsory_insurance', "qoala_promotion")
    ) AS t where rnk = 1
  GROUP BY
    t.detail_type, user_type
)

SELECT
  detail_type,
  user_type,
  user_count,
  CONCAT(ROUND(
    (user_count * 100.0) / SUM(user_count) OVER (PARTITION BY detail_type),
    2
  ), '%') AS percentage_of_total,
  SUM(user_count) OVER (PARTITION BY detail_type) AS total_count
FROM
  payment_summary
ORDER BY
  detail_type, user_type;


VMI Sale with Make model
with top_cars as(
with sales as(
SELECT 
        count(distinct sale.id) "sale_id_count",
       make.name AS "Make",
       mm.name AS "Make Model",
       concat(make.name," ",mm.name," ",cc.value," ",fqq.year) as name,
       fqq.model_description_id,
    
    fqq.year
FROM policy_fairdeesale sale
JOIN utils_fairdeequotation quotation ON sale.quotation_id = quotation.id
JOIN utils_fairdeequotationquery fqq ON fqq.id = quotation.quotation_query_id
JOIN profiles_affiliate affiliate ON affiliate.id = fqq.affiliate_id
JOIN profiles_user user ON user.id = affiliate.user_id
JOIN masterdata_pricelist pl ON pl.id = quotation.price_list_id
JOIN masterdata_modeldescription md ON md.id = fqq.model_description_id
JOIN masterdata_cc cc ON cc.id = md.cc_id
JOIN masterdata_makemodel mm ON mm.id = cc.make_model_id
JOIN masterdata_make make ON make.id = mm.make_id

WHERE sale.sold_on >= '{{ dt.start }}'
  AND sale.sold_on <= '{{ dt.end }}'
  AND sale.is_cancelled = FALSE
  and user.is_test=False
      AND pl.for_renewal= FALSE
    and fqq.change_of_agent=FALSE
    And pl.insurance_class="1"
  And sale.policy_status not like "%rejected%"
  and (sale.payment_status in ("payment_verified", "commission_transferred") 
  or sale.policy_status in ("policy_sent_to_user", "policy_delivered_to_user"))
group by  make.name,mm.name, cc.value,fqq.year
order by make.name,mm.name
),
quotation as(
select 
    count(distinct fqq.id) AS "quotation_count",
    make.name AS "make",
    mm.name as make_model,
    concat(make.name," ",mm.name," ",cc.value," ",fqq.year) as name,
    fqq.model_description_id,
  
    fqq.year
from utils_fairdeequotationquery fqq
left JOIN utils_fairdeequotation fq ON fqq.id = fq.quotation_query_id
left JOIN policy_fairdeesale sale ON sale.quotation_id = fq.id
JOIN profiles_affiliate affiliate ON affiliate.id = fqq.affiliate_id
JOIN profiles_user user ON user.id = affiliate.user_id
JOIN masterdata_pricelist pl ON pl.id = fq.price_list_id
JOIN masterdata_modeldescription md ON md.id = fqq.model_description_id
JOIN masterdata_cc cc ON cc.id = md.cc_id
JOIN masterdata_makemodel mm ON mm.id = cc.make_model_id
JOIN masterdata_make make ON make.id = mm.make_id
where user.is_test=FALSE
    and fq.created_at>= '{{ dt.start }}'  
    and fq.created_at<= '{{ dt.end }}'

    AND pl.for_renewal= FALSE
    and fqq.change_of_agent=FALSE
    And pl.insurance_class="1"
   group by  make.name,mm.name, cc.value,fqq.year
order by make.name, mm.name
),
main as(select 
    q.name,
    q.quotation_count,
    sales.sale_id_count,
    q.quotation_count-sales.sale_id_count as diff,
    sales.sale_id_count*100/q.quotation_count as conversion_percentage,
    q.model_description_id, q.year
from quotation q
left join sales on sales.name=q.name
order by quotation_count desc
limit 30)

select model_description_id, year 
from main 
where conversion_percentage <= 100
order by conversion_percentage
)

select 
    concat(make.name," ",mm.name," ",cc.value," ",tc.year) as car_name,
    fqq.sum_insured,
    fqq.insurance_class,
    fqq.id,
    user.fullname,
    user.is_test,
    user.is_admin,
    role.name
FROM utils_fairdeequotationquery fqq
join top_cars tc on tc.model_description_id = fqq.model_description_id and tc.year = fqq.year
JOIN masterdata_modeldescription md ON md.id = fqq.model_description_id
JOIN masterdata_cc cc ON cc.id = md.cc_id
JOIN masterdata_makemodel mm ON mm.id = cc.make_model_id
JOIN masterdata_make make ON make.id = mm.make_id

JOIN profiles_affiliate affiliate ON affiliate.user_id = fqq.created_by_id
JOIN profiles_user user ON user.id = affiliate.user_id
join profiles_userrole urole on urole.user_id=user.id
join profiles_role role on role.id = urole.role_id

where (user.is_admin!="1" and user.email not like "%fairdee%" and role.name != 'admin' )
and user.is_test=FALSE
and fqq.created_at>= '{{ dt.start }}'  
and fqq.created_at<= '{{ dt.end }}'
and fqq.change_of_agent=FALSE
-- AND affiliate.user_id = fqq.created_by_id

Top 30 quoted cars
with top_cars as(
with sales as(
SELECT 
        count(distinct sale.id) "sale_id_count",
       make.name AS "Make",
       mm.name AS "Make Model",
       concat(make.name," ",mm.name," ",cc.value," ",fqq.year) as name,
       fqq.model_description_id,
    
    fqq.year
FROM policy_fairdeesale sale
JOIN utils_fairdeequotation quotation ON sale.quotation_id = quotation.id
JOIN utils_fairdeequotationquery fqq ON fqq.id = quotation.quotation_query_id
JOIN profiles_affiliate affiliate ON affiliate.id = fqq.affiliate_id
JOIN profiles_user user ON user.id = affiliate.user_id
JOIN masterdata_pricelist pl ON pl.id = quotation.price_list_id
JOIN masterdata_modeldescription md ON md.id = fqq.model_description_id
JOIN masterdata_cc cc ON cc.id = md.cc_id
JOIN masterdata_makemodel mm ON mm.id = cc.make_model_id
JOIN masterdata_make make ON make.id = mm.make_id

WHERE sale.sold_on >= '{{ dt.start }}'
  AND sale.sold_on <= '{{ dt.end }}'
  AND sale.is_cancelled = FALSE
  and user.is_test=False
      AND pl.for_renewal= FALSE
    and fqq.change_of_agent=FALSE
    And pl.insurance_class="1"
  And sale.policy_status not like "%rejected%"
  and (sale.payment_status in ("payment_verified", "commission_transferred") 
  or sale.policy_status in ("policy_sent_to_user", "policy_delivered_to_user"))
group by  make.name,mm.name, cc.value,fqq.year
order by make.name,mm.name
),
quotation as(
select 
    count(distinct fqq.id) AS "quotation_count",
    make.name AS "make",
    mm.name as make_model,
    concat(make.name," ",mm.name," ",cc.value," ",fqq.year) as name,
    fqq.model_description_id,
  
    fqq.year
from utils_fairdeequotationquery fqq
left JOIN utils_fairdeequotation fq ON fqq.id = fq.quotation_query_id
left JOIN policy_fairdeesale sale ON sale.quotation_id = fq.id
JOIN profiles_affiliate affiliate ON affiliate.id = fqq.affiliate_id
JOIN profiles_user user ON user.id = affiliate.user_id
JOIN masterdata_pricelist pl ON pl.id = fq.price_list_id
JOIN masterdata_modeldescription md ON md.id = fqq.model_description_id
JOIN masterdata_cc cc ON cc.id = md.cc_id
JOIN masterdata_makemodel mm ON mm.id = cc.make_model_id
JOIN masterdata_make make ON make.id = mm.make_id
where user.is_test=FALSE
    and fq.created_at>= '{{ dt.start }}'  
    and fq.created_at<= '{{ dt.end }}'

    AND pl.for_renewal= FALSE
    and fqq.change_of_agent=FALSE
    And pl.insurance_class="1"
   group by  make.name,mm.name, cc.value,fqq.year
order by make.name, mm.name
),
main as(select 
    q.name,
    q.quotation_count,
    sales.sale_id_count,
    q.quotation_count-sales.sale_id_count as diff,
    sales.sale_id_count*100/q.quotation_count as conversion_percentage,
    q.model_description_id, q.year
from quotation q
left join sales on sales.name=q.name
order by quotation_count desc
limit 30)

select model_description_id, year 
from main 
where conversion_percentage <= 50 
order by conversion_percentage
)

select 
    concat(make.name," ",mm.name," ",cc.value," ",tc.year) as car_name,
    fqq.sum_insured,
    fqq.insurance_class,
    fqq.id,
    user.fullname,
    user.is_test,
    user.is_admin,
    role.name
FROM utils_fairdeequotationquery fqq
join top_cars tc on tc.model_description_id = fqq.model_description_id and tc.year = fqq.year
JOIN masterdata_modeldescription md ON md.id = fqq.model_description_id
JOIN masterdata_cc cc ON cc.id = md.cc_id
JOIN masterdata_makemodel mm ON mm.id = cc.make_model_id
JOIN masterdata_make make ON make.id = mm.make_id

JOIN profiles_affiliate affiliate ON affiliate.user_id = fqq.created_by_id
JOIN profiles_user user ON user.id = affiliate.user_id
join profiles_userrole urole on urole.user_id=user.id
join profiles_role role on role.id = urole.role_id

where (user.is_admin!="1" and user.email not like "%fairdee%" and role.name != 'admin' )
and user.is_test=FALSE
and fqq.created_at>= '{{ dt.start }}'  
and fqq.created_at<= '{{ dt.end }}'
and fqq.change_of_agent=FALSE
-- AND affiliate.user_id = fqq.created_by_id


Sum Insured analysis
with main as(
  SELECT
    
    make.name as make_name, 
    mm.name makemodel_name, 
    cc.name cc_name, 
    fqq.year ,
    md.name sub_model,
    fqq.sum_insured,
    fqq.affiliate_id,
    si.min_suminsured,
    si.max_suminsured,
    affiliate.agent_code,
    --   hfqq.extra_filters,
    
    created.fullname quotation_created_by,
    
    case when affiliate.user_id != fqq.created_by_id then "Ops" else "Agent" end user_type,
    fq.id quotation_id,
    sale_id ,
    fqq.id query_id
  FROM
    utils_fairdeequotationquery fqq
    JOIN masterdata_modeldescription md ON md.id = fqq.model_description_id
    join masterdata_suminsured si on md.id = si.model_description_id and fqq.year = si.model_year
    JOIN masterdata_cc cc ON cc.id = md.cc_id
    JOIN masterdata_makemodel mm ON mm.id = cc.make_model_id
    JOIN masterdata_make make ON make.id = mm.make_id
    JOIN profiles_affiliate affiliate ON affiliate.id = fqq.affiliate_id
    JOIN profiles_user user ON affiliate.user_id = user.id -- made for
    JOIN profiles_user created ON created.id = fqq.created_by_id -- made by
    Left Join utils_fairdeequotation fq on fq.quotation_query_id=fqq.id
        Left Join vmi_policy_sold_successfully sale on sale.quotation_id=fq.id

  WHERE
     date(fqq.created_at) between '{{Date.start}}' and  '{{Date.end}}'
    -- and date(fq.created_at) between '{{Date.start}}' and  '{{Date.end}}'
       --   and date(sale.sold_on) between '{{Date.start}}' and  '{{Date.end}}'

    AND fqq.insurance_class LIKE ('%{{type}}%')
    AND (
      user.email NOT LIKE '%fairdee.co.th'
      OR user.email NOT LIKE '%vouch%'
    )
)

select 
distinct     concat(main.agent_code," ",main.make_name, " ", main.makemodel_name, " ", main.cc_name," ",main.sub_model ," ", main.year) AS carname,
   main.min_suminsured,
    main.max_suminsured, ops.sum_insured ops_sum_insured,Agent.sum_insured agent_sum_insured,
    case when Agent.sum_insured is null and main.max_suminsured<ops.sum_insured then 'Ops Higher'
     when Agent.sum_insured is null and main.min_suminsured>ops.sum_insured then 'Ops Lower'
     when ops.sum_insured between main.min_suminsured and main.max_suminsured and Agent.sum_insured>ops.sum_insured then 'In Range Rejection Ops Lower'
     when ops.sum_insured between main.min_suminsured and main.max_suminsured and Agent.sum_insured<ops.sum_insured then 'In Range Rejection Ops Higher'
when ops.sum_insured not between main.min_suminsured and main.max_suminsured and Agent.sum_insured not between main.min_suminsured and main.max_suminsured and Agent.sum_insured<ops.sum_insured then 'Both Not In Range  Ops Higher'
when ops.sum_insured not between main.min_suminsured and main.max_suminsured and Agent.sum_insured not between main.min_suminsured and main.max_suminsured and Agent.sum_insured>ops.sum_insured then 'Both Not In Range  Ops Lower'
when ops.sum_insured< main.min_suminsured and main.max_suminsured and Agent.sum_insured=ops.sum_insured then 'Both Match but Lower than range'
when ops.sum_insured> main.max_suminsured and Agent.sum_insured=ops.sum_insured then 'Both Match but Higher than range'
when ops.sum_insured is null and main.max_suminsured<Agent.sum_insured then 'Agent Higher'
     when ops.sum_insured is null and main.min_suminsured>Agent.sum_insured then 'Agent Lower'
      when ops.sum_insured between main.min_suminsured and main.max_suminsured or Agent.sum_insured between main.min_suminsured and main.max_suminsured then 'In Range'
      when ops.sum_insured is null and Agent.sum_insured is null then 'No Value Inserted'
      
      else 1
     
end rejection_type,
ops_quotaion,ops_sale,
Agent_quotaion, Agent_sale,
case when ops_quotaion is not null and Agent_quotaion is not null and ops_sale is not null and Agent_sale is not null 
then "Quotation and sale on both"
 when ops_quotaion is not null and Agent_quotaion is not null and ops_sale is not null and Agent_sale is  null 
then "Quotation on both and sale by Ops "
 when ops_quotaion is not null and Agent_quotaion is not null and ops_sale is  null and Agent_sale is not  null 
then "Quotation on both and sale by Agent "
 when ops_quotaion is not null and Agent_quotaion is not null and ops_sale is   null and Agent_sale is   null 
then "Quotation on both and No sale "
 when ops_quotaion is not null and Agent_quotaion is  null and ops_sale is   null and Agent_sale is   null 
then "Quotation By OPs "
 when ops_quotaion is  null and Agent_quotaion is not null and ops_sale is   null and Agent_sale is   null 
then "Quotation By Agent "
 when ops_quotaion is not  null and Agent_quotaion is  null and ops_sale is  not null and Agent_sale is   null 
then "Quotation By Ops and sale by Ops "
 when ops_quotaion is   null and Agent_quotaion is not  null and ops_sale is   null and Agent_sale is  not null 
then "Quotation By Agent and sale by Agent "
 when ops_quotaion is   null and Agent_quotaion is not  null and ops_sale is   null and Agent_sale is  not null 
then "Quotation By Agent and sale by Agent "
 when ops_quotaion is  null and Agent_quotaion is  null and ops_sale is   null and Agent_sale is   null and query_agents is not null and query_ops is not null
then "Just Query By both "
 when ops_quotaion is  null and Agent_quotaion is  null and ops_sale is   null and Agent_sale is   null and query_agents is not null and query_ops is  null
then "Just Query By Agent "
when ops_quotaion is  null and Agent_quotaion is  null and ops_sale is   null and Agent_sale is   null and query_agents is  null and query_ops is not  null
then "Just Query By Ops "
else 1
end Conversion
from 
main
left join
(select distinct agent_code,make_name ,makemodel_name,cc_name,year, sum_insured,sub_model,

case when quotation_id is not null then 1 end  ops_quotaion,
case when sale_id is not null then 1 end  ops_sale
,case when query_id is not null then 1 end query_ops  from main where user_type="Ops" ) ops 
on ops.agent_code=main.agent_code
and ops.make_name=main.make_name
and ops.sub_model=main.sub_model
and ops.makemodel_name=main.makemodel_name

and ops.cc_name=main.cc_name

and ops.year=main.year

left join 
(select distinct agent_code,make_name ,makemodel_name,cc_name,year, sum_insured,sub_model,
case when quotation_id is not null then 1 end  Agent_quotaion,
case when sale_id is not null then 1 end  Agent_sale,case when query_id is not null then 1 end query_agents 
from main where user_type="Agent" ) Agent 
on Agent.agent_code=main.agent_code
and Agent.make_name=main.make_name
and Agent.makemodel_name=main.makemodel_name
and Agent.sub_model=main.sub_model

and Agent.cc_name=main.cc_name

and Agent.year=main.year
-- where main.agent_code="FD-14484"

Quotation to sale (per insurer analysis)

WITH quote AS (
SELECT make.name AS "Make",
          mm.name AS "Make_Model",
          mm.id,
          count(DISTINCT fqq.id) AS "Quotations",
          month(fqq.created_at) as 'months',
          SUM(if(fqq.download_count > 0, 1, 0)) AS "PDFs",
          SUM(if(fqq.download_count > 0, 1, 0))*100/count(DISTINCT fqq.id) AS 'quotation_to_PDFs'
  FROM utils_fairdeequotationquery fqq
  JOIN masterdata_modeldescription md ON md.id = fqq.model_description_id
  JOIN masterdata_cc cc ON cc.id = md.cc_id
  JOIN masterdata_makemodel mm ON mm.id = cc.make_model_id
  JOIN masterdata_make make ON make.id = mm.make_id
  JOIN profiles_affiliate affiliate ON affiliate.id = fqq.affiliate_id
  JOIN profiles_user user ON affiliate.user_id = user.id

  WHERE fqq.created_at >= '{{ dt.start }}'
     AND fqq.created_at <= '{{ dt.end }}'
     AND user.is_test = FALSE
  GROUP BY mm.name,
            make.name, month(fqq.created_at)
  ORDER BY make.name, mm.name,month(fqq.created_at)  DESC
  ),
   
     sale AS (
SELECT make.name AS "Make",
          mm.name AS "Make Model",
          mm.id,
          insurer.code,
          month(sale.sold_on) AS 'month',
          count(sale.id) AS "Sales"
   FROM policy_fairdeesale sale
   JOIN utils_fairdeequotation quotation ON sale.quotation_id = quotation.id
   JOIN utils_fairdeequotationquery qq ON qq.id = quotation.quotation_query_id
   JOIN masterdata_pricelist pl ON pl.id = quotation.price_list_id
   JOIN masterdata_modeldescription md ON md.id = qq.model_description_id
   JOIN masterdata_cc cc ON cc.id = md.cc_id
   JOIN masterdata_makemodel mm ON mm.id = cc.make_model_id
   JOIN masterdata_make make ON make.id = mm.make_id
    JOIN profiles_affiliate affiliate ON affiliate.id = qq.affiliate_id
   JOIN profiles_user user ON affiliate.user_id = user.id
   LEFT JOIN policy_fairdeepolicy vmi ON sale.voluntary_policy_id = vmi.id
   LEFT JOIN masterdata_insurer insurer ON insurer.id = coalesce(pl.insurer_id, vmi.insurer_id)

   WHERE sale.sold_on >= '{{ dt.start }}'
     AND sale.sold_on <= '{{ dt.end }}'
     AND sale.is_cancelled = FALSE
     AND user.is_test = FALSE
          AND (CASE 
    WHEN '{{ type_of_quote }}' = 'All' THEN true
    WHEN '{{ type_of_quote }}' = 'Manual' THEN pl.is_manual = true
    ELSE pl.is_manual = false END)
     AND sale.policy_status NOT LIKE '%rejected'
     AND ( sale.payment_status IN ("payment_verified",
                                  "commission_transferred")
          OR sale.policy_status IN ("policy_sent_to_user",
                                    "policy_delivered_to_user"))
  AND    insurer.code= '{{ insurer code }}'
   GROUP BY make.name,
            mm.name, insurer.code, month(sale.created_at)
   ORDER BY count(sale.id) DESC)
   
   
SELECT quote.make,
      quote.make_model,
    --   sale.month,
      quote.months,
      quote.quotations,
      quote.pdfs,
      sale.sales,
      quote.quotation_to_pdfs,
      (sale.sales*100/quote.pdfs) AS 'pdf_to_sale',
      (sale.sales*100/quote.quotations) AS 'quotation_to_sale'
FROM quote
 JOIN sale ON sale.id=quote.id and sale.month=quote.months

Quotation requested vs sales where price is not there in system

with sales as(
SELECT 
        count(distinct sale.id) "sale_id_count",
       make.name AS "Make",
       mm.name AS "Make Model",
       concat(make.name," ",mm.name) as name
FROM policy_fairdeesale sale
JOIN utils_fairdeequotation quotation ON sale.quotation_id = quotation.id
JOIN utils_fairdeequotationquery fqq ON fqq.id = quotation.quotation_query_id
JOIN profiles_affiliate affiliate ON affiliate.id = fqq.affiliate_id
JOIN profiles_user user ON user.id = affiliate.user_id
JOIN masterdata_modeldescription md ON md.id = fqq.model_description_id
JOIN masterdata_cc cc ON cc.id = md.cc_id
JOIN masterdata_makemodel mm ON mm.id = cc.make_model_id
JOIN masterdata_make make ON make.id = mm.make_id

WHERE sale.sold_on >= '{{ dt.start }}'
  AND sale.sold_on <= '{{ dt.end }}'
  AND sale.is_cancelled = FALSE
  and user.is_test=False
  And sale.policy_status not like "%rejected%"
  and (sale.payment_status in ("payment_verified", "commission_transferred") 
  or sale.policy_status in ("policy_sent_to_user", "policy_delivered_to_user"))
group by  make.name,mm.name
order by make.name,mm.name
),
quotation as(
select 
    count(distinct fqq.id) AS "quotation_count_with_no_pricing",
    make.name AS "make",
    mm.name as make_model,
    concat(make.name," ",mm.name) as name
from utils_fairdeequotationquery fqq
left JOIN utils_fairdeequotation fq ON fqq.id = fq.quotation_query_id
left JOIN policy_fairdeesale sale ON sale.quotation_id = fq.id
JOIN profiles_affiliate affiliate ON affiliate.id = fqq.affiliate_id
JOIN profiles_user user ON user.id = affiliate.user_id
JOIN masterdata_modeldescription md ON md.id = fqq.model_description_id
JOIN masterdata_cc cc ON cc.id = md.cc_id
JOIN masterdata_makemodel mm ON mm.id = cc.make_model_id
JOIN masterdata_make make ON make.id = mm.make_id
where
     (fqq.price_list_ids like "%{}%" 
     or fqq.price_list_ids like "%[]%" )
    and user.is_test=FALSE
    and fqq.created_at>= '{{ dt.start }}'  
    and fqq.created_at<= '{{ dt.end }}'
    group by make.name,mm.name
order by make.name, mm.name
)

select 
    q.name,
    q.quotation_count_with_no_pricing,
    sales.sale_id_count,
    q.quotation_count_with_no_pricing-sales.sale_id_count as diff
from quotation q
left join sales on sales.name=q.name
    
Make model data
SELECT
  masterdata_make.name AS make,
  masterdata_makemodel.name AS model,
  masterdata_cc.name AS cc,
  masterdata_modeldescription.name AS submodel,
  masterdata_makemodel.vehicle_category as vehicle_category,
  masterdata_modeldescription.min_year as 'min_year',
  masterdata_modeldescription.max_year as 'max_year'
--   concat(masterdata_make.name, " ", masterdata_makemodel.name, " ", masterdata_cc.name) car_name,
--   masterdata_make.id AS make_id,
--   masterdata_makemodel.id AS makemodel_id,
--   masterdata_cc.id AS cc_id,
--   masterdata_modeldescription.id AS modeldescription_id
FROM
  masterdata_modeldescription
  JOIN masterdata_cc ON masterdata_cc.id = masterdata_modeldescription.cc_id
  JOIN masterdata_makemodel ON masterdata_makemodel.id = masterdata_cc.make_model_id
  JOIN masterdata_make ON masterdata_make.id = masterdata_makemodel.make_id
  JOIN masterdata_country ON masterdata_country.id = masterdata_make.country_id
WHERE
  masterdata_makemodel.is_deleted = false
  AND masterdata_makemodel.is_motorcycle = false
  AND masterdata_country.code = 'th'
ORDER BY
  masterdata_make.name,
  masterdata_makemodel.name,
  masterdata_cc.name

Financing query
set @agent_code := "FM-19143";

with xyz as ((select sale.id as sale_id, fq.vehicle_number, fsi.reason as reason, inv.id as invoice_id, inv.amount_payable, inv.due_date, sum(pay.amount_paid) as amount_paid, max(pay.paid_at) as max_paid_at, inv.payment_status
from policy_fairdeesaleincentive as fsi
join policy_fairdeesale as sale on sale.id = fsi.fairdee_sale_id
join utils_fairdeequotation as fq on fq.id = sale.quotation_id
join profiles_affiliate as af on fsi.affiliate_id = af.id
join billing_invoicedetail as invd on invd.id = fsi.invoice_detail_id
join billing_invoice as inv on inv.id = invd.invoice_id
left join billing_payment_invoices as bpi on bpi.invoice_id = inv.id
left join billing_payment as pay on pay.id = bpi.payment_id
where agent_code = @agent_code 
group by fsi.id)

union

(select sale.id as sale_id, fq.vehicle_number, "Commission" as reason, inv.id as invoice_id, inv.amount_payable, inv.due_date, sum(pay.amount_paid) as amount_paid, max(pay.paid_at) as max_paid_at, inv.payment_status
from policy_fairdeesale as sale
join profiles_affiliate aff on aff.id = sale.affiliate_id
join policy_fairdeesaleinvoice fsi on fsi.fairdee_sale_id = sale.id
join utils_fairdeequotation as fq on fq.id = sale.quotation_id
join billing_invoice as inv on fsi.invoice_id = inv.id
left join billing_payment_invoices as bpi on bpi.invoice_id = inv.id
left join billing_payment as pay on pay.id = bpi.payment_id
join billing_invoicedetail invd on invd.invoice_id = inv.id
where invd.detail_type = 'affiliate_commission'
and inv.is_deleted = 0
and aff.agent_code = @agent_code 
and sale.policy_status not in ("docs_rejected", "ci_rejected")
group by inv.id)

union

(select cif.id as sale_id, cif.vehicle_number,ai.reason as reason, inv.id as invoice_id, inv.amount_payable, inv.due_date, sum(pay.amount_paid) as amount_paid, max(pay.paid_at) as max_paid_at, inv.payment_status
from utils_agentincentive as ai
join profiles_affiliate as af on ai.affiliate_id = af.id
join utils_compulsoryinsuranceform as cif on cif.id = ai.object_id
join billing_invoicedetail as invd on invd.id = ai.invoice_detail_id
join billing_invoice as inv on inv.id = invd.invoice_id
left join billing_payment_invoices as bpi on bpi.invoice_id = inv.id
left join billing_payment as pay on pay.id = bpi.payment_id
where agent_code = @agent_code 
group by ai.id)

union

(

select sale.id as sale_id,  fq.vehicle_number, "Refund" as reason, inv.id as invoice_id, inv.amount_payable, inv.due_date, sum(pay.amount_paid) as amount_paid, max(pay.paid_at) as max_paid_at, inv.payment_status
from policy_fairdeesale as sale
join utils_fairdeequotation as fq on fq.id = sale.quotation_id
join policy_fairdeesaleinvoice fsi on fsi.fairdee_sale_id = sale.id
join billing_invoice as inv on fsi.invoice_id = inv.id
join billing_invoicedetail invd on invd.invoice_id = inv.id
join profiles_affiliateinvoice as afi on afi.invoice_id = inv.id
join profiles_affiliate aff on aff.id = afi.affiliate_id
left join billing_payment_invoices as bpi on bpi.invoice_id = inv.id
left join billing_payment as pay on pay.id = bpi.payment_id
where invd.detail_type like '%refund%'
and inv.is_deleted = 0
and aff.agent_code = @agent_code 
group by inv.id)
)

select distinct agent_code, t.id as invoice_id, pay.amount_paid, bt.amount, minv.amount_payable as payable, minv.payment_status as ps, minv.invoice_date as date, minv.id as ci_id, minv.created_at as a, minv.modified_at as b
from billing_invoice as inv right join
(select distinct cinv.id, cinv.payer, cinv.payee, sale.quotation_id
from profiles_affiliateinvoice as ai
join profiles_affiliate as af on af.id = ai.affiliate_id
join billing_invoice as inv on ai.invoice_id = inv.id
join billing_invoicedetail as invd on invd.invoice_id = inv.id
join billing_combinedinvoice as ci on ci.combined_invoice_id = inv.id
join billing_combinedinvoice_invoices as cii on cii.combinedinvoice_id = ci.id
join billing_invoice as cinv on cinv.id = cii.invoice_id
left join xyz on xyz.invoice_id = cinv.id
left join policy_fairdeesaleinvoice as fsi on fsi.invoice_id = cinv.id
left join policy_fairdeesale sale on sale.id = fsi.fairdee_sale_id
where invd.detail_type = "affiliate_payout"
and inv.payment_status != "unpaid"
and af.agent_code = @agent_code 
and xyz.invoice_id is null) as t on t.id = inv.id
join billing_combinedinvoice_invoices as cii on cii.invoice_id = t.id
join billing_combinedinvoice as ci on cii.combinedinvoice_id = ci.id
join billing_invoice as minv on minv.id = ci.combined_invoice_id
join profiles_affiliateinvoice as afi on afi.invoice_id = minv.id
join profiles_affiliate as af on af.id = afi.affiliate_id

join billing_payment_invoices as bpi on bpi.invoice_id = minv.id
join billing_payment as pay on pay.id = bpi.payment_id
join billing_banktransaction as bt on bt.id = pay.bank_transaction_id

Finance query

-- set @agent_code = "FM-20081";


with a as(
select afi.invoice_id from profiles_affiliateinvoice as afi
join profiles_affiliate as af on afi.affiliate_id = af.id
join billing_invoice as inv on inv.id = afi.invoice_id
join billing_invoicedetail as invd on invd.invoice_id = inv.id
where agent_code = "{{agent_code}}"
and invd.detail_type = "affiliate_payout"
order by inv.created_at DESC
limit 1)


(select minv.created_at, minv.amount_payable as ciap, minv.payment_status as cips, inv.id, inv.amount_payable, inv.payer, inv.payee, fq.vehicle_number, fq.id, inv.payment_status, "FAIRDEESALE" as typ
from billing_combinedinvoice_invoices as cii
join billing_combinedinvoice as ci on cii.combinedinvoice_id = ci.id
join billing_invoice as minv on minv.id = ci.combined_invoice_id
join billing_invoice as inv on inv.id = cii.invoice_id
join policy_fairdeesaleinvoice as fsi on fsi.invoice_id = inv.id
join policy_fairdeesale as sale on sale.id = fsi.fairdee_sale_id
join utils_fairdeequotation as fq on fq.id = sale.quotation_id
join a on a.invoice_id = ci.combined_invoice_id
where inv.payment_status != "fully_paid")

union all

(select minv.created_at, minv.amount_payable as ciap, minv.payment_status as cips, inv.id, inv.amount_payable, inv.payer, inv.payee, cif.vehicle_number, cif.id, inv.payment_status, "CIF" as typ
from billing_combinedinvoice_invoices as cii
join billing_combinedinvoice as ci on cii.combinedinvoice_id = ci.id
join billing_invoice as minv on minv.id = ci.combined_invoice_id
join billing_invoice as inv on inv.id = cii.invoice_id
join billing_invoicedetail as invd on invd.invoice_id = inv.id
join utils_compulsoryinsuranceforminvoicedetail as cifinvd on cifinvd.invoice_detail_id = invd.id
join utils_compulsoryinsuranceform as cif on cif.id = cifinvd.compulsory_insurance_form_id
join a on a.invoice_id = ci.combined_invoice_id
where inv.payment_status != "fully_paid");


BM Year analysis

-- With bm_list as(Select affiliate_id,max(case when name like 'bm_%' and name like '%int' then  substr(name,1,CHAR_LENGTH(name)-4) 
-- when name like 'bm_%' and name like '%ex' then   substr(name,1,CHAR_LENGTH(name)-3)  end) bm_name ,
-- max(case when name like 'bm_%' and name like '%int' then  'Internal'
-- when name like 'bm_%' and name like '%ex'  then  'External'  end) bm_type ,

-- max(case when name like 'at_%' then substr(name,4) end) account_type 
-- from 
-- (select affiliate_id,tag_id from profiles_affiliatetag) aff_tag
-- left join (select id,lower(name)name from profiles_tag) tag on tag.id=aff_tag.tag_id
-- -- join profiles_affiliate aff on aff.id=aff_tag.affiliate_id
-- where name like 'bm%' or name like 'at%' group by affiliate_id) 
--  ,
with current_search as(
  select
    bm_name,
    count(distinct sale_id, policy_type) policy_sold_count,
    aff.account_type,
    sum(ue.premium_without_tax) premium_without_tax
  from
    (
      
     select
 'VMI' policy_type,

sale_id,
 account_type,
 uniteconomics_id
 from
  vmi_policy_sold_successfully sale
   join policy_fairdeesale_unit_economics fue on fue.fairdeesale_id = sale.sale_id
union All
select
'CMI' policy_type,

sale_id,
  account_type,
 unit_economics_id
 from
  cmi_solo_policy_sold_successfully sale
   union All
select
'Non-Motor' policy_type,

sale_id,
  account_type,
 unit_economics_id
 from
  pa_policy_sold_successfully sale
  
   union All
select
'Non-Motor' policy_type,

sale.id sale_id,
 account_type,
 unit_economics_id
 from
  covid_policy_sold_successfully sale
   union All
select
'Non-Motor' policy_type,

sale.id,
 account_type,
 unit_economics_id
 from
  dengue_policy_sold_successfull sale
  
   union All
  select
'Non-Standard' policy_type,

sale.id,
 aff.account_type ,
 unit_economics_id
 from
  policy_nonstandardinsuranceproductsaledata sale
  join profiles_affiliate aff on aff.id=sale.affiliate_id
    ) s
    join utils_uniteconomics ue on ue.id = s.uniteconomics_id
--   /* left join (
--       select
--         affiliate_id,
--         case
--           when agent.account_type = "sub_agent" then master.agent_code
--           when agent.account_type = "mlm_agent" then leader
--           else agent.agent_code
--         end master_code
--       from
--         agent_grouping agent
--         left join profiles_affiliate master on agent.master_affiliate_id = master.id
--     ) master_mapping on ue.affiliate_id = master_mapping.affiliate_id
--     join profiles_affiliate master_code on master_code.agent_code = master_mapping.master_code*/
--     join bm_list aff on aff.affiliate_id = ue.affiliate_id
    join (select * from bm_list 
        where account_type in ('offlineagent', 'agentoffice', 'inspectiongarage', 'broker', 'dealership') 
     ) aff on aff.affiliate_id=ue.affiliate_id
  where
    ue.is_valid = true
    and date(ue.sold_on) between "{{ Date.start }}"
    and "{{ Date.end }}"
     and case when '{{ BM Type }}'="All" then 1=1 
else  bm_type='{{ BM Type }}' end
 and case when '{{ Account Type }}'="All" then aff.account_type in ('inspectiongarage', 'offlineagent', 'agentoffice')  else aff.account_type='{{ Account Type }}' end
   and case when '{{ BM Name }}'="All" then 1=1  else bm_name='{{ BM Name }}' end
and case when '{{ Policy Type }}'='All' then 1=1 else policy_type= '{{ Policy Type }}' end
  group by
    bm_name,
    aff.account_type
),
last_year as(
  select
    bm_name,
    count(distinct sale_id, policy_type) policy_sold_count,
    sum(ue.premium_without_tax) premium_without_tax,
    aff.account_type
  from
    (
     select
 'VMI' policy_type,

sale_id,
 account_type,
 uniteconomics_id
 from
  vmi_policy_sold_successfully sale
   join policy_fairdeesale_unit_economics fue on fue.fairdeesale_id = sale.sale_id
union All
select
'CMI' policy_type,

sale_id,
  account_type,
 unit_economics_id
 from
  cmi_solo_policy_sold_successfully sale
   union All
select
'Non-Motor' policy_type,

sale_id,
  account_type,
 unit_economics_id
 from
  pa_policy_sold_successfully sale
  
   union All
select
'Non-Motor' policy_type,

sale.id sale_id,
 account_type,
 unit_economics_id
 from
  covid_policy_sold_successfully sale
   union All
select
'Non-Motor' policy_type,

sale.id,
 account_type,
 unit_economics_id
 from
  dengue_policy_sold_successfull sale
  
   union All
  select
'Non-Standard' policy_type,

sale.id,
 aff.account_type ,
 unit_economics_id
 from
  policy_nonstandardinsuranceproductsaledata sale
  join profiles_affiliate aff on aff.id=sale.affiliate_id
    ) s
    join utils_uniteconomics ue on ue.id = s.uniteconomics_id
   /* left join (
      select
        affiliate_id,
        case
          when agent.account_type = "sub_agent" then master.agent_code
          when agent.account_type = "mlm_agent" then leader
          else agent.agent_code
        end master_code
      from
        agent_grouping agent
        left join profiles_affiliate master on agent.master_affiliate_id = master.id
    ) master_mapping on ue.affiliate_id = master_mapping.affiliate_id
    join profiles_affiliate master_code on master_code.agent_code = master_mapping.master_code*/
    -- join bm_list aff on aff.affiliate_id = ue.affiliate_id
    join (select * from bm_list 
        where account_type in ('offlineagent', 'agentoffice', 'inspectiongarage', 'broker', 'dealership') 
     ) aff on aff.affiliate_id=ue.affiliate_id
  where
    ue.is_valid = true
    and date(ue.sold_on) between subdate("{{ Date.start }}", interval '12' month)
    and subdate("{{ Date.end }}", interval '12' month)
     and case when '{{ BM Type }}'="All" then 1=1 
else  bm_type='{{ BM Type }}' end
 and case when '{{ Account Type }}'="All" then 1=1  else aff.account_type='{{ Account Type }}' end
   and case when '{{ BM Name }}'="All" then 1=1  else bm_name='{{ BM Name }}' end
and case when '{{ Policy Type }}'='All' then 1=1 else policy_type= '{{ Policy Type }}' end
  group by
    bm_name,
    aff.account_type
),
year_data as(
  select
    bm_name,bm_type,
    count(distinct sale_id, policy_type) policy_sold_count,
    sum(ue.premium_without_tax) premium_without_tax,
    year(ue.sold_on) year_of_sold,
    aff.account_type
  from
    (
      select
 'VMI' policy_type,

sale_id,
 account_type,
 uniteconomics_id
 from
  vmi_policy_sold_successfully sale
   join policy_fairdeesale_unit_economics fue on fue.fairdeesale_id = sale.sale_id
union All
select
'CMI' policy_type,

sale_id,
  account_type,
 unit_economics_id
 from
  cmi_solo_policy_sold_successfully sale
   union All
select
'Non-Motor' policy_type,

sale_id,
  account_type,
 unit_economics_id
 from
  pa_policy_sold_successfully sale
  
   union All
select
'Non-Motor' policy_type,

sale.id sale_id,
 account_type,
 unit_economics_id
 from
  covid_policy_sold_successfully sale
   union All
select
'Non-Motor' policy_type,

sale.id,
 account_type,
 unit_economics_id
 from
  dengue_policy_sold_successfull sale
  
   union All
  select
'Non-Standard' policy_type,

sale.id,
 aff.account_type ,
 unit_economics_id
 from
  policy_nonstandardinsuranceproductsaledata sale
  join profiles_affiliate aff on aff.id=sale.affiliate_id
    ) s
    join utils_uniteconomics ue on ue.id = s.uniteconomics_id
  /*  left join (
      select
        affiliate_id,
        case
          when agent.account_type = "sub_agent" then master.agent_code
          when agent.account_type = "mlm_agent" then leader
          else agent.agent_code
        end master_code
      from
        agent_grouping agent
        left join profiles_affiliate master on agent.master_affiliate_id = master.id
    ) master_mapping on ue.affiliate_id = master_mapping.affiliate_id
    join profiles_affiliate master_code on master_code.agent_code = master_mapping.master_code*/
    -- join bm_list aff on aff.affiliate_id = ue.affiliate_id
    join (select * from bm_list 
        where account_type in ('offlineagent', 'agentoffice', 'inspectiongarage', 'broker', 'dealership') 
     ) aff on aff.affiliate_id=ue.affiliate_id
    
  where
    ue.is_valid = true
    and year(ue.sold_on) >= year("{{ Date.start }}") -1 -- and subdate("{{ Date.end }}" ,interval'12' months)
 and case when '{{ Account Type }}'="All" then 1=1  else aff.account_type='{{ Account Type }}' end
   and case when '{{ BM Name }}'="All" then 1=1  else bm_name='{{ BM Name }}' end
and case when '{{ Policy Type }}'='All' then 1=1 else policy_type= '{{ Policy Type }}' end
    
  group by
    bm_name,
    year(ue.sold_on),
    aff.account_type
),
new_recruits as (
  Select
    count(distinct aff_tag.affiliate_id) new_recruits,
    bm_name,
    aff_tag.account_type
  from
    agent_grouping
    join (select * from bm_list 
        where account_type in ('offlineagent', 'agentoffice', 'inspectiongarage', 'broker', 'dealership') 
     ) aff_tag on agent_grouping.affiliate_id = aff_tag.affiliate_id
  where
    created_at between '{{ Date.start }}'
    and '{{ Date.end }}'
  group by
    bm_name,
    aff_tag.account_type
),
last_year_recruits as (
  Select
    count(distinct aff_tag.affiliate_id) new_recruits,
    bm_name,
    aff_tag.account_type
  from
    agent_grouping
    join (select * from bm_list 
        where account_type in ('offlineagent', 'agentoffice', 'inspectiongarage', 'broker', 'dealership') 
     ) aff_tag on agent_grouping.affiliate_id = aff_tag.affiliate_id
  where
    created_at between subdate("{{ Date.start }}", interval '12' month)
    and subdate("{{ Date.end }}", interval '12' month)
  group by
    bm_name,
    aff_tag.account_type
),
year_recruits as (
  Select
    count(distinct aff_tag.affiliate_id) new_recruits,
    bm_name,
    aff_tag.account_type,
    year(created_at) year_created
  from
    agent_grouping
    join (select * from bm_list 
        where account_type in ('offlineagent', 'agentoffice', 'inspectiongarage', 'broker', 'dealership') 
     ) aff_tag on agent_grouping.affiliate_id = aff_tag.affiliate_id
  where
    year(created_at) >= year("{{ Date.start }}") -1
  group by
    bm_name,
    aff_tag.account_type,
    year(created_at)
)
select
  years.bm_type,years.bm_name,
  years.account_type,
  l_r.new_recruits last_year_month_code,
  l_m.premium_without_tax last_year_month_premium,
  years_recruits.code_last_YTD
  premium_last_YTD,
  n_r.new_recruits this_month_code,
  c_s.premium_without_tax this_month_premium,
  years_recruits.code_this_YTD,
  premium_this_YTD
from
  (
    select
      bm_name,bm_type,
      account_type,
      max(
        case
          when year('{{ Date.end }}') -1 = year_of_sold then premium_without_tax
        end
      ) premium_last_YTD,
      max(
        case
          when year('{{ Date.end }}') = year_of_sold then premium_without_tax
        end
      ) premium_this_YTD
    from
      year_data
    group by
      bm_name,
      account_type
  ) years
  left join current_search c_s on years.bm_name = c_s.bm_name
  and years.account_type = c_s.account_type
  left join last_year l_m on years.bm_name = l_m.bm_name
  and years.account_type = l_m.account_type
  left join (
    select
      bm_name,
      account_type,
      max(
        case
          when year('{{ Date.end }}') -1 = year_created then new_recruits
        end
      ) code_last_YTD,
      max(
        case
          when year('{{ Date.end }}') = year_created then new_recruits
        end
      ) code_this_YTD
    from
      year_recruits
    group by
      bm_name,
      account_type
  ) years_recruits on years.bm_name = years_recruits.bm_name
  and years.account_type = years_recruits.account_type
  left join new_recruits n_r on years.bm_name = n_r.bm_name
  and years.account_type = n_r.account_type
  left join last_year_recruits l_r on years.bm_name = l_r.bm_name
  and years.account_type = l_r.account_type
  order by 1 desc


  with top_cars as(
with sales as(
SELECT 
        count(distinct sale.id) "sale_id_count",
       make.name AS "Make",
       mm.name AS "Make Model",
       concat(make.name," ",mm.name," ",cc.value," ",fqq.year) as name,
       fqq.model_description_id,
    fqq.year
FROM policy_fairdeesale sale
JOIN utils_fairdeequotation quotation ON sale.quotation_id = quotation.id
JOIN utils_fairdeequotationquery fqq ON fqq.id = quotation.quotation_query_id
JOIN profiles_affiliate affiliate ON affiliate.id = fqq.affiliate_id
JOIN profiles_user user ON user.id = affiliate.user_id
JOIN masterdata_pricelist pl ON pl.id = quotation.price_list_id
JOIN masterdata_modeldescription md ON md.id = fqq.model_description_id
JOIN masterdata_cc cc ON cc.id = md.cc_id
JOIN masterdata_makemodel mm ON mm.id = cc.make_model_id
JOIN masterdata_make make ON make.id = mm.make_id

WHERE sale.sold_on >= '{{ dt.start }}'
  AND sale.sold_on <= '{{ dt.end }}'
  AND sale.is_cancelled = FALSE
  and user.is_test=False
      AND pl.for_renewal= FALSE
    and fqq.change_of_agent=FALSE
    And pl.insurance_class="1"
  And sale.policy_status not like "%rejected%"
  and (sale.payment_status in ("payment_verified", "commission_transferred") 
  or sale.policy_status in ("policy_sent_to_user", "policy_delivered_to_user"))
group by  make.name,mm.name, cc.value,fqq.year
order by make.name,mm.name
),
quotation as(
select 
    count(distinct fq.id) AS "quotation_count",
    make.name AS "make",
    mm.name as make_model,
    concat(make.name," ",mm.name," ",cc.value," ",fqq.year) as name,
    fqq.model_description_id,
    fqq.year
from utils_fairdeequotationquery fqq
left JOIN utils_fairdeequotation fq ON fqq.id = fq.quotation_query_id 
left JOIN policy_fairdeesale sale ON sale.quotation_id = fq.id
JOIN profiles_affiliate affiliate ON affiliate.id = fqq.affiliate_id
JOIN profiles_user user ON user.id = affiliate.user_id
left JOIN masterdata_pricelist pl ON pl.id = fq.price_list_id 
JOIN masterdata_modeldescription md ON md.id = fqq.model_description_id
JOIN masterdata_cc cc ON cc.id = md.cc_id
JOIN masterdata_makemodel mm ON mm.id = cc.make_model_id
JOIN masterdata_make make ON make.id = mm.make_id
where user.is_test=FALSE
    and fq.created_at>= '{{ dt.start }}'  
    and fq.created_at<= '{{ dt.end }}'
    AND pl.for_renewal= FALSE
    and fqq.change_of_agent=FALSE
    And pl.insurance_class="1"
   group by  make.name,mm.name, cc.value,fqq.year
order by make.name, mm.name
)

select 
    q.name,
    q.quotation_count,
    q.model_description_id, q.year
from quotation q
left join sales on sales.name=q.name
order by quotation_count desc
limit 30

)

select 
    pl.id as price_list_id,
    concat(make.name," ",mm.name," ",cc.value," ",tc.year) as car_name,
    insurer.code as "insurer",
    pl.plan_name,
    pl.min_suminsured,
    pl.max_suminsured, pl.insurer_id,
    pl.premium_after_tax
FROM masterdata_pricelist pl
JOIN masterdata_pricelist_model_descriptions plmd ON plmd.pricelist_id = pl.id
JOIN masterdata_modeldescription md ON md.id = plmd.modeldescription_id
join top_cars tc on tc.model_description_id = md.id
JOIN masterdata_cc cc ON cc.id = md.cc_id
JOIN masterdata_makemodel mm ON mm.id = cc.make_model_id
JOIN masterdata_make make ON make.id = mm.make_id
join masterdata_insurer insurer on insurer.id = pl.insurer_id 
where   pl.insurance_class ="1"
    and pl.is_deleted=False and pl.is_manual=False 
    and tc.year>=pl.min_year
    and tc.year<=pl.max_year
    and min_suminsured !=max_suminsured
order by tc.quotation_count desc




Instalment Invoices Bug
SELECT
  `policy_fairdeesale`.`quotation_id`,
  `policy_fairdeesale`.`created_at`,
  `policy_fairdeesale`.`created_by_id`,
  `utils_fairdeequotationquery`.`is_lead_generated`,
  (
    SELECT
      COUNT(U0.`id`) AS `c`
    FROM
      `billing_invoice` U0
      INNER JOIN `policy_fairdeesaleinvoice` U1 ON (U0.`id` = U1.`invoice_id`)
      INNER JOIN `billing_invoicedetail` U3 ON (U0.`id` = U3.`invoice_id`)
    WHERE
      (
        NOT U0.`is_deleted`
        AND U1.`fairdee_sale_id` = (`policy_fairdeesale`.`id`)
        AND U3.`detail_type` = "voluntary_insurance"
        AND U0.`payee` = "fairdee"
        AND U0.`payer` = "customer"
      )
    GROUP BY
      U1.`fairdee_sale_id`
    ORDER BY
      NULL
  ) AS `instalment_invoice_formed`,
  COUNT(`billing_instalmentbreakup`.`id`) AS `instalment_invoices`
FROM
  `policy_fairdeesale`
  INNER JOIN `utils_fairdeequotation` ON (
    `policy_fairdeesale`.`quotation_id` = `utils_fairdeequotation`.`id`
  )
  INNER JOIN `utils_fairdeequotationquery` ON (
    `utils_fairdeequotation`.`quotation_query_id` = `utils_fairdeequotationquery`.`id`
  )
  INNER JOIN `billing_instalmenttype` ON (
    `utils_fairdeequotationquery`.`instalment_type_id` = `billing_instalmenttype`.`id`
  )
  LEFT OUTER JOIN `billing_instalmentbreakup` ON (
    `billing_instalmenttype`.`id` = `billing_instalmentbreakup`.`instalment_type_id`
  )
WHERE
  (
    `utils_fairdeequotationquery`.`instalment_type_id` IS NOT NULL
    AND `policy_fairdeesale`.`sale_type` = "instalment"
    
  )
GROUP BY
  `policy_fairdeesale`.`id`
HAVING
  (
    SELECT
      COUNT(U0.`id`) AS `c`
    FROM
      `billing_invoice` U0
      INNER JOIN `policy_fairdeesaleinvoice` U1 ON (U0.`id` = U1.`invoice_id`)
      INNER JOIN `billing_invoicedetail` U3 ON (U0.`id` = U3.`invoice_id`)
    WHERE
      (
        NOT U0.`is_deleted`
        AND U1.`fairdee_sale_id` = (`policy_fairdeesale`.`id`)
        AND U3.`detail_type` = "voluntary_insurance"
        AND U0.`payee` = "fairdee"
        AND U0.`payer` = "customer"
      )
    GROUP BY
      U1.`fairdee_sale_id`
    ORDER BY
      NULL
  ) != (COUNT(`billing_instalmentbreakup`.`id`))
ORDER BY
  NULL


  Instalment Invoices

SET @posn:=0;
SET @pid:=0;
with customer_invoices AS
  (SELECT invoice.*
   FROM billing_invoice invoice
   WHERE invoice.payee = "fairdee"
     AND invoice.payer = "customer"
     AND invoice.is_deleted = FALSE ),
     customer_payments AS
  (SELECT p.id,
          p.paid_at,
          i.id AS invoice_id,
          fsi.fairdee_sale_id AS sale_id,
          p.amount_paid,
          bt.reference_id,
          i.payment_status,
          i.amount_payable, i.due_date
   FROM billing_payment p
   JOIN billing_payment_invoices pi ON pi.payment_id = p.id
   JOIN customer_invoices i ON i.id = pi.invoice_id
   JOIN policy_fairdeesaleinvoice fsi ON fsi.invoice_id = i.id
   left join billing_banktransaction bt ON bt.id = p.bank_transaction_id
   WHERE p.is_deleted = FALSE
     AND p.is_reconciled = TRUE 
     ),
        first_customer_payment AS -- down_payment
  (SELECT p.id,
          p.invoice_id,
          p.paid_at,
          p.sale_id,
          p.amount_paid
  FROM customer_payments p
  JOIN
     (SELECT sale_id,
             MIN(paid_at) AS paid_at
      FROM customer_payments
      GROUP BY sale_id) p2 ON p2.paid_at = p.paid_at
  GROUP BY sale_id),
    paid_inst as
     (SELECT 
          max(p.paid_at) paid_at,
          i.id AS invoice_id,
          fsi.fairdee_sale_id AS sale_id,
          sum(p.amount_paid) amount_paid,
        --   i.payment_status,
          i.amount_payable,
        i.due_date
   FROM billing_payment p
   JOIN billing_payment_invoices pi ON pi.payment_id = p.id
   JOIN customer_invoices i ON i.id = pi.invoice_id
   JOIN policy_fairdeesaleinvoice fsi ON fsi.invoice_id = i.id
   WHERE p.is_deleted = FALSE
     AND p.is_reconciled = TRUE 
     group by (i.id)
     ),

    grouped_instalment_invoices AS
  (SELECT fsi.fairdee_sale_id AS sale_id,
          SUM(payments.amount_paid) AS amount_paid,
          count(distinct case when i.payment_status IN ("fully_paid", "overpaid") then i.id end) - 1 AS full_paid_instalments,
     (SELECT count(DISTINCT ibr.id)
      FROM utils_fairdeequotation quotation
      JOIN utils_fairdeequotationquery fqq ON fqq.id = quotation.quotation_query_id
      JOIN billing_instalmenttype it ON fqq.instalment_type_id = it.id
      JOIN billing_instalmentbreakup ibr ON it.id = ibr.instalment_type_id
      WHERE quotation.id = sale.quotation_id) AS instalment_count
   FROM customer_invoices i
   JOIN policy_fairdeesaleinvoice fsi ON fsi.invoice_id = i.id
   JOIN policy_fairdeesale sale ON fsi.fairdee_sale_id = sale.id
   LEFT JOIN customer_payments payments ON payments.invoice_id = i.id
   AND payments.paid_at <= '{{ dt.end }}'
   WHERE sale.sale_type = 'instalment'
   GROUP BY fsi.fairdee_sale_id),
   
    ues AS
  (SELECT sum(ue.premium_after_tax) AS premium_after_tax,
          sum(ue.affiliate_to_customer_discount) AS affiliate_to_customer_discount,
          sum(ue.affiliate_commission_given_out) AS affiliate_commission_given_out,
          sum(ue.affiliate_commission_wht) AS affiliate_commission_wht,
          SUM(ue.subsidy) AS subsidy,
          sue.fairdeesale_id AS sale_id
   FROM utils_uniteconomics ue
   JOIN policy_fairdeesale_unit_economics sue ON sue.uniteconomics_id = ue.id
   GROUP BY sue.fairdeesale_id),
     cancelled_sale as(
    select  hsale.id as 'sale_id',
            min(date(hsale.modified_at)) as cancellation_date
    from policy_fairdeesale_historical hsale
    where hsale.policy_status like '%rejected%'
    group by hsale.id
  ),
 sale_transfer as(
    select distinct st.id
    from utils_fairdeequotation fq 
    join utils_fairdeequotation st on st.id = fq.transferred_quote_for_id
    join policy_fairdeesale sale on sale.quotation_id = st.id
    where sale.sale_type = 'instalment'
 ),
   
main as (
    select
        sale.id as 'sale_id',
        affiliate.agent_code as "Agent Code",
        quotation.vehicle_number as "Vehicle Number",
        ins.code as insurer, 
        CONVERT_TZ(sale.created_at, 'UTC', '+07:00') as "Sale Created At",
        sale.sold_on as "Sold On",
        CONVERT_TZ(inv.created_at, 'UTC', '+07:00') as "Invoice Created At",
        inv.amount_payable as "Amount Payable",
        inv.payment_status as "Invoice Status",
        sale.policy_status as 'sale_status',
        inv.due_date as "Due Date",
        pins.amount_paid as "Amount of Transfer",
        CONVERT_TZ(pins.paid_at, 'UTC', '+07:00') as "Date of Transfer",
        case 
            when tqr.id is not null then 'qr'
            else 'bank_transfer'
        end payment_method,
        tqr.reference_one, 
        quotation.commission_payment_schedule,
        --  (instalment.full_paid_instalments + 1 ) as "Fully Paid Payments",
        instalment.instalment_count as "Total Number of Expected Payments",
        csale.cancellation_date,
        vendor.name as "Vendor",
        json_extract(endors.rejection_reason, '$.additional_rejection_reason') rejection_reason,
       concat("https://www.fairdee.co.th/wizard?id=",quotation.id) as "Link",
       quotation.policy_start_date as policy_start_date,
       DATE_ADD(quotation.policy_start_date, INTERVAL 1 YEAR) as policy_end_date
FROM policy_fairdeesale sale
JOIN ues AS ue ON ue.sale_id = sale.id
JOIN utils_fairdeequotation quotation ON quotation.id = sale.quotation_id
JOIN utils_fairdeequotationquery fqq ON fqq.id = quotation.quotation_query_id
JOIN masterdata_vendor vendor ON vendor.id = fqq.vendor_id
JOIN profiles_affiliate affiliate ON affiliate.id = sale.affiliate_id
JOIN policy_fairdeesaleinvoice fsi ON fsi.fairdee_sale_id = sale.id
JOIN customer_invoices inv ON inv.id = fsi.invoice_id
left join policy_fairdeepolicyendorsement endors on endors.fairdeesale_id = sale.id
left join paid_inst pins on inv.id = pins.invoice_id
LEFT JOIN customer_payments payment ON payment.sale_id = sale.id
LEFT JOIN grouped_instalment_invoices instalment ON instalment.sale_id = sale.id
LEFT JOIN first_customer_payment first_payment ON first_payment.sale_id = sale.id
left join cancelled_sale csale on csale.sale_id = sale.id
left join sale_transfer on sale_transfer.id = quotation.id
left join (select * 
            from billing_thaiqrrequest
            where is_paid = 1) tqr on tqr.id = quotation.thai_qr_request_id
join masterdata_pricelist pl on pl.id = quotation.price_list_id
join masterdata_insurer ins on ins.id = pl.insurer_id
WHERE (fqq.will_pay_in_instalments 
AND date(CONVERT_TZ(inv.due_date, 'UTC', '+07:00')) BETWEEN '{{ dt.start }}' AND '{{ dt.end }}')
        and case when '{{Vendor}}' != 'All' then vendor.name = '{{ Vendor }}'
        else 1=1 end
and inv.payment_status in ({{payment_status}})
and sale.policy_status in ({{sale_status}})
and sale_transfer.id is null
and case when sale.policy_status = 'docs_rejected' then inv.payment_status in ('fully_paid', 'overpaid')
         else 1=1
    end
group by inv.id
order by sale.id , inv.due_date )

select  main.*, 
        IF(@pid=sale_id,@posn:=@posn+1,@posn:=1) "Invoice_number",
        @pid:=sale_id sale_id
        from main
