Title: All agents info [Chana]
SQL: Select
  usr.fullname,
  json_extract_path_text( aff.oic_data, 'fullname') oic_fullname, 
  aff.agent_code,
  aff.broker_license_number,
  aff.account_type, 
  aff.oic_data
from
  vouch_db.profiles_affiliate AS aff
  join vouch_db.profiles_user usr on aff.user_id = usr.id
  join vouch_db.profiles_affiliate pf on aff.user_id = pf.id
where
  aff.is_oic_data_verified = 1
  and aff.has_broker_license = 1
  and usr.email not like '%fairdee.co.th%'
--  and aff.is_blocked = 0
  and usr.is_banned = 0

Title: Self Serve Raw Data [VMI][INT]
SQL: with
eligible_users as(
select distinct users.id
from vouch_db.profiles_user users
join vouch_db.profiles_userrole urole on urole.user_id = users.id
where users.is_test = false
and users.email not like '%fairdee.co.th%'
),
tqr as(
select tqr.id, tqr.amount_paid, tqr.created_at, tqr.created_by_id
from vouch_db.billing_thaiqrrequest tqr
where is_paid = 1
),
verified_hist as(
select id sale_id, min(history_id) history_id
from vouch_db.policy_fairdeesale_historical
where payment_status = 'payment_verified'
and sold_on between '{{dt.start}}' and '{{dt.end}}'
group by 1
), 
verified_user as(
select users.fullname, history_user_id, sale_id
from verified_hist vh 
join vouch_db.policy_fairdeesale_historical sale on sale.id = vh.sale_id
                                                 and sale.history_id = vh.history_id
join vouch_db.profiles_user users on users.id = sale.history_user_id
), 
pdf as(
select pdf.quotation_query_id,
pdf.created_at,
pdf.created_by_id,
rank() over(partition by pdf.quotation_query_id order by pdf.created_at) rnk
from vouch_db.utils_quotationdownload pdf
),
payment_proof as (
select doc.fairdee_quotation_id,
doc.created_by_id,
doc.created_at,
rank() over(partition by doc.fairdee_quotation_id order by doc.created_at) rnk
from vouch_db.utils_fairdeedocument doc
where doc.document_type = 'payment_proof'
),
-- national_id as(
-- select doc.fairdee_quotation_query_id,
-- doc.created_by_id,
-- doc.created_at,
-- rank() over(partition by doc.fairdee_quotation_query_id order by doc.created_at) rnk
-- from vouch_db.utils_fairdeecoadocument doc
-- where doc.document_type = 'national_id'
-- ),
-- car_registration as (
-- select doc.fairdee_quotation_query_id,
-- doc.created_by_id,
-- doc.created_at,
-- rank() over(partition by doc.fairdee_quotation_query_id order by doc.created_at) rnk
-- from vouch_db.utils_fairdeecoadocument doc
-- where doc.document_type = 'car_registration'
-- ),
-- old_policy as(
-- select doc.fairdee_quotation_query_id,
-- doc.created_by_id,
-- doc.created_at,
-- rank() over(partition by doc.fairdee_quotation_query_id order by doc.created_at) rnk
-- from vouch_db.utils_fairdeecoadocument doc
-- where doc.document_type = 'old_policy'
-- ),
quotation as(
select fq.id,
fq.quotation_query_id,
fq.vehicle_number,
CONCAT('https://fairdee.co.th/fairdee-wizard?id=',fq.id) as sale_link,
fq.created_at,
fq.created_by_id,
fq.change_of_agent,
pl.plan_name,
pl.restriction_text,
pl.is_manual,
pl.for_renewal,
pl.can_issue_policy_online possible_API_sale,
pl.insurance_class,
ins.code insurer_code,
fq.thai_qr_request_id, 
fq.transferred_quote_for_id
from vouch_db.utils_fairdeequotation fq
join vouch_db.masterdata_pricelist pl on pl.id = fq.price_list_id
join vouch_db.masterdata_insurer ins on ins.id = pl.insurer_id
),
sale as(
select sale.id,
sale.quotation_id,
sale.sold_on,
sale.created_at,
sale.created_by_id,
case
when json_extract_path_text(policy.insurer_response, 'is_success') = 'true' then 1
else 0
end sold_via_API,
sale.sale_type,
sale.policy_status,
sale.payment_status
from vouch_db.policy_fairdeesale sale
left join vouch_db.policy_fairdeepolicy policy on policy.id = sale.voluntary_policy_id
), 
ao as(
select distinct atag.affiliate_id affiliate_id
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
where tags.name = 'at_agentoffice'
)
 select fqq.id quotation_query_id,
quotation.id quotation_id,
sale.id sale_id,
-- case when sale.id is not null then 1 else 0 end sale_count,
 -- concat(make.name, mm.name, cc.value, fqq.year) as MakeModelData,
affiliate.agent_code,
case when tags.affiliate_id is not null then 'AgentOffice' 
     else coalesce(affiliate.account_type, 'Direct_Agent')
end account_type, 
affiliate.id affiliate_id,
affiliate.user_id affiliate_user_id,
case
when coalesce(doc.fairdee_quotation_id, tqr.id) is not null or
(sale.sale_type = 'credit' or sale.sale_type = 'cbc_to_insurer') then 'payment_done'::varchar
when sale.id is not null then 'sale_reported'::varchar
when quotation.id is not null then 'quotation_created'::varchar
when pdf.quotation_query_id is not null then 'pdf_generated'::varchar
else 'quotation_query_created'::varchar
end current_state,
fqq.created_at quote_created_at,
to_char(fqq.created_at::date, 'YYYY-mm') quote_created_month, 
to_char(fqq.created_at::date, 'YYYY') quote_created_year,
pdf.created_at pdf_created_at,
case
when tqr.id is null then doc.created_at
else tqr.created_at
end payment_proof_uploaded_at,
-- nid.created_at nation_id_uploaded_at,
-- cr.created_at car_registration_uploaded_at,
-- op.created_at old_policy_uploaded_at,
quotation.created_at report_sale_button_clicked_at,
to_char(quotation.created_at::date, 'YYYY-mm') report_sale_button_clicked_at_month, 
to_char(quotation.created_at::date, 'YYYY') report_sale_button_clicked_at_year,
sale.created_at data_submited_at,
sale.sold_on,
to_char(sale.sold_on::date, 'YYYY-mm') sold_on_month, 
to_char(sale.sold_on::date, 'YYYY') sold_on_year,
s.sale_status, 
case
when fqq.created_by_id = affiliate.user_id then 'affiliate'::varchar
when fqq.created_by_id != affiliate.user_id then 'Admin'::varchar
end quote_created_by,
case
when affiliate.user_id::int =
case
when pdf.created_by_id is null then fqq.created_by_id::int
else pdf.created_by_id::int
end
then 'affiliate'::varchar
when pdf.created_by_id is null and quotation.id is not null and quotation.is_manual = 0 then
case
when quotation.created_by_id::int = affiliate.user_id
then 'affiliate'::varchar
else 'Admin'::varchar
end
when pdf.created_at is not null then 'Admin'::varchar
end pdf_created_by,
case
when sale.sale_type = 'credit' then 'affiliate'::varchar
when sale.sale_type = 'cbc_to_insurer' then 'admin'::varchar
when affiliate.user_id::int = (
case
when tqr.id is null then doc.created_by_id::int
else tqr.created_by_id::int
end
) then 'affiliate'::varchar
when (tqr.id is not null or doc.created_by_id is not null) then 'Admin'::varchar
end payment__proof_uploaded_by,
case
when quotation.created_by_id = affiliate.user_id then 'affiliate'::varchar
when quotation.created_by_id is not null then 'Admin'::varchar
end report_sale_button_clicked_by,
case
when sale.created_by_id = affiliate.user_id then 'affiliate'::varchar
when sale.created_by_id is not null then 'Admin'::varchar
end data_submited_by,
vu.fullname payment_verified_marked_by, 
case when quotation.is_manual = 1 then 'manual_quote'::varchar
else 'system_quote'::varchar
end type_of_quote,
case when quotation.for_renewal = 1 then 'renewal'::varchar
when quotation.change_of_agent = 1 then 'change__of_agent'::varchar
when quotation.is_manual = 1 then 'manual_quote'::varchar
else 'Not_manual'::varchar
end type_of_manual_quote,
fqq.vmi_car_code,
quotation.plan_name,
quotation.restriction_text,
make.name car_make,
mm.name car_model,
quotation.insurer_code,
fqq.vehicle_number vehicle_number_before_payment,
quotation.vehicle_number vehicle_number_after_payment,
fqq.insurance_class insurance_class_while_created_quote,
quotation.insurance_class insurance_class_on_price_list,
quotation.possible_API_sale,
sale.sold_via_API,
sale.policy_status,
sale.payment_status,
coalesce(sale.sale_type, 'cbc_to_fairdee') sale_type,
case
when sale.sale_type = 'credit' and credit.is_prepaid = 1 then 'pre_paid_credit'::varchar
when sale.sale_type = 'credit' and credit.is_prepaid = 0 then 'post_paid_credit'::varchar
when tqr.id is not null then 'qr'::varchar
else 'bank_transfer'::varchar
end payment_method_for_downpayment,
coalesce(sale.sale_type, 'cbc_to_fairdee') || '_' || 
case
when sale.sale_type = 'credit' and credit.is_prepaid = 1 then 'pre_paid_credit'::varchar
when sale.sale_type = 'credit' and credit.is_prepaid = 0 then 'post_paid_credit'::varchar
when tqr.id is not null then 'qr'::varchar
else 'bank_transfer'::varchar
end payment_method,
quotation.transferred_quote_for_id, 
CONCAT('https://www.fairdee.co.th/get-quotes?quotation_query_id=',quotation.transferred_quote_for_id) as Sale_transfer_Quotation_link,
CONCAT('https://www.fairdee.co.th/get-quotes?quotation_query_id=',fqq.id) as Quotation_link,
quotation.sale_link
from vouch_db.utils_fairdeequotationquery fqq
join vouch_db.profiles_affiliate affiliate on affiliate.id = fqq.affiliate_id
left join vouch_db.profiles_credit credit on credit.affiliate_id = affiliate.id
join eligible_users users on users.id = affiliate.user_id
left join vouch_db.masterdata_modeldescription md on md.id = fqq.model_description_id
left JOIN vouch_db.masterdata_cc cc ON cc.id = md.cc_id
left JOIN vouch_db.masterdata_makemodel mm ON mm.id = cc.make_model_id
left JOIN vouch_db.masterdata_make make ON make.id = mm.make_id
left join pdf on pdf.quotation_query_id = fqq.id and pdf.rnk = 1
-- left join national_id nid on nid.fairdee_quotation_query_id = fqq.id and nid.rnk = 1
-- left join car_registration cr on cr.fairdee_quotation_query_id = fqq.id and cr.rnk = 1
-- left join old_policy op on op.fairdee_quotation_query_id = fqq.id = op.rnk = 1
left join quotation on quotation.quotation_query_id = fqq.id
left join payment_proof doc on doc.fairdee_quotation_id = quotation.id and doc.rnk = 1
left join sale on sale.quotation_id = quotation.id
left join th_datawarehouse.fd_sale_all_product_unified_view s on s.id = sale.id and s.product_type_name = 'vmi'
left join tqr on tqr.id = quotation.thai_qr_request_id
left join ao tags on tags.affiliate_id = affiliate.id
left join verified_user vu on vu.sale_id = sale.id
where case 
        when '{{date_type}}' = 'quote_created' 
            then fqq.created_at between '{{dt.start}}' and '{{dt.end}}'
        when '{{date_type}}' = 'sold_on' 
            then sale.sold_on between '{{dt.start}}' and '{{dt.end}}'
      end
and      case 
        when '{{quote_type}}' = 'system_package' then quotation.is_manual = 0 
        when '{{quote_type}}' = 'manual_quote' then quotation.is_manual = 1
        when '{{quote_type}}' = 'renewal_quote' then quotation.for_renewal = 1
        when '{{quote_type}}' = 'change_of_agent' then quotation.change_of_agent = 1
        when '{{quote_type}}' = 'All' then 1 = 1
      end
and      case 
       when '{{account_type}}' = 'AgentOffice' then tags.affiliate_id is not null
       when '{{account_type}}' = 'Direct_Agent' then affiliate.account_type is null
                                                        and tags.affiliate_id is null
       when '{{account_type}}' = 'MLM_Agent' then affiliate.account_type = 'mlm_agent'
       when '{{account_type}}' = 'Inspection_Garage_Including_Sub_Agents' then affiliate.account_type in ('subagent', 'inspection_garage')
                                                                                and tags.affiliate_id is null
                                                            
       when '{{account_type}}' = 'Telesales' then affiliate.account_type = 'telesales'
                                                    and tags.affiliate_id is null
       when '{{account_type}}' = 'Dealership' then affiliate.account_type = 'dealership'
                                                    and tags.affiliate_id is null
       when '{{account_type}}' = 'All' then 1 = 1
     end
        
      


Title: MLM margin CMI [unified_view]
SQL: select  aff.agent_code, 
        sale.vehicle_number, 
        sale.id sale_id, 
        sale.sale_type,
        sale.insurer_code, 
        cif.premium premium_without_tax,
        sale.fairdee_commission_amt, 
        cif.commission expected_commission 
        -- sale.managment_fee_amt, 
        -- sale.referral_bonus_amt, 
        -- concat('https://www.fairdee.co.th/fairdee-wizard?id=', ss.quotation_id) sale_link
from th_datawarehouse.fd_sale_all_product_unified_view sale
join vouch_db.profiles_affiliate aff on sale.affiliate_id = aff.id
join vouch_db.utils_compulsoryinsuranceform cif on cif.id = sale.id
where aff.account_type = 'mlm_agent'
and sale.product_type_name = 'cmi_solo'
and sale.sale_status = 'is_sold'
and sale.policy_sold_on_at::date <= '{{dt.end}}'
and sale.policy_sold_on_at::date >= '{{dt.start}}'

Title: MLM margin VMI [unified_view]
SQL: select  aff.agent_code, 
        sale.vehicle_number, 
        sale.id sale_id, 
        sale.sale_type,
        sale.insurer_code, 
        sale.commission_rate, 
        sale.instalment_deduction, 
        sale.ops_assisted_deduction,
        sale.premium_without_tax_amt,
        sale.fairdee_commission_amt, 
        sale.expected_affiliate_commission_amt, 
        -- sale.managment_fee_amt, 
        -- sale.referral_bonus_amt, 
        concat('https://www.fairdee.co.th/fairdee-wizard?id=', ss.quotation_id) sale_link
from th_datawarehouse.fd_sale_all_product_unified_view sale
join vouch_db.profiles_affiliate aff on sale.affiliate_id = aff.id
left join th_datawarehouse.fd_self_serve ss on ss.sale_id = sale.id
where aff.account_type = 'mlm_agent'
and sale.product_type_name = 'vmi'
and sale.sale_status = 'is_sold'
and sale.policy_sold_on_at::date <= '{{dt.end}}'
and sale.policy_sold_on_at::date >= '{{dt.start}}'

Title: VMI IG Sales
SQL: with prayot as(
select distinct atag.affiliate_id 
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
where tags.name like '%prayot%' 
),
ao as(
select distinct atag.affiliate_id
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
where tags.name in ('at_agentoffice', 'at_broker', 'at_agentoffline')
),
vmi as 
(
select  sale.id, 
		sale.vehicle_number, 
		sale.policy_sold_on_at::date sold_on, 
		sale.sale_type, 
		sale.policy_status, 
		sale.payment_status, 
		sale.premium_without_tax_amt, 
		sale.fairdee_commission_amt, 
		case 
			when prayot.affiliate_id is not null then sale.expected_affiliate_commission_amt + 0.01*sale.premium_without_tax_amt 
			else sale.expected_affiliate_commission_amt
		end affiliate_commission_amt, 
		((case 
			when prayot.affiliate_id is not null then sale.expected_affiliate_commission_amt + 0.01*sale.premium_without_tax_amt 
			else sale.expected_affiliate_commission_amt
		end - sale.premium_without_tax_amt*0.18 )/1.03)*0.03 wht_cost, 
		((((case 
			when prayot.affiliate_id is not null then sale.expected_affiliate_commission_amt + 0.01*sale.premium_without_tax_amt 
			else sale.expected_affiliate_commission_amt
		end - sale.premium_without_tax_amt*0.18))/1.03)/520000)*3000 nominee_cost
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_affiliate aff on aff.id = sale.affiliate_id 
left join prayot on prayot.affiliate_id = aff.id
left join ao on ao.affiliate_id = aff.id
where aff.account_type = 'inspection_garage'
and sale.product_type_name = 'vmi'
and sale.sale_status = 'is_sold'
and to_date(policy_sold_on_at::date, 'YYYY-01-01') = '2023-01-01' 
and ao.affiliate_id is null
)
select to_char(sold_on, 'YYYY-MM') sale_month, 
		count(id) total_sale, 
		sum(premium_without_tax_amt) total_premium, 
		sum(fairdee_commission_amt) commission_earned, 
		sum(affiliate_commission_amt) commission_given, 
		sum(wht_cost) + sum(nominee_cost) tax_absorption,
		sum(fairdee_commission_amt) - 
		(sum(affiliate_commission_amt) + sum(wht_cost) + sum(nominee_cost)) net_revenue, 
		(sum(fairdee_commission_amt) - 
		(sum(affiliate_commission_amt) + sum(wht_cost) + sum(nominee_cost)))*100/sum(premium_without_tax_amt) margin
from vmi
group by 1
order by 1


Title: VMI IG aggregate Margin
SQL: with prayot as(
select distinct atag.affiliate_id 
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
where tags.name like '%prayot%' 
),
ao as(
select distinct atag.affiliate_id
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
where tags.name in ('at_agentoffice', 'at_broker', 'at_agentoffline')
),
vmi as 
(
select  sale.id, 
		sale.vehicle_number, 
		sale.policy_sold_on_at::date sold_on, 
		sale.sale_type, 
		sale.policy_status, 
		sale.payment_status, 
		sale.premium_without_tax_amt, 
		sale.fairdee_commission_amt, 
		case 
			when prayot.affiliate_id is not null then sale.expected_affiliate_commission_amt + 0.01*sale.premium_without_tax_amt 
			else sale.expected_affiliate_commission_amt
		end affiliate_commission_amt, 
		((case 
			when prayot.affiliate_id is not null then sale.expected_affiliate_commission_amt + 0.01*sale.premium_without_tax_amt 
			else sale.expected_affiliate_commission_amt
		end - sale.premium_without_tax_amt*0.18 )/1.03)*0.03 wht_cost, 
		((((case 
			when prayot.affiliate_id is not null then sale.expected_affiliate_commission_amt + 0.01*sale.premium_without_tax_amt 
			else sale.expected_affiliate_commission_amt
		end - sale.premium_without_tax_amt*0.18))/1.03)/520000)*3000 nominee_cost
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_affiliate aff on aff.id = sale.affiliate_id 
left join prayot on prayot.affiliate_id = aff.id
left join ao on ao.affiliate_id = aff.id
where aff.account_type = 'inspection_garage'
and sale.product_type_name = 'vmi'
and sale.sale_status = 'is_sold'
and to_date(policy_sold_on_at::date, 'YYYY-01-01') = '2023-01-01' 
and ao.affiliate_id is null
)
select to_char(sold_on, 'YYYY-MM') sale_month, 
		count(id) total_sale, 
		sum(premium_without_tax_amt) total_premium, 
		sum(fairdee_commission_amt) commission_earned, 
		sum(affiliate_commission_amt) commission_given, 
		sum(wht_cost) + sum(nominee_cost) tax_absorption,
		sum(fairdee_commission_amt) - 
		(sum(affiliate_commission_amt) + sum(wht_cost) + sum(nominee_cost)) net_revenue, 
		(sum(fairdee_commission_amt) - 
		(sum(affiliate_commission_amt) + sum(wht_cost) + sum(nominee_cost)))*100/sum(premium_without_tax_amt) margin
from vmi
group by 1
order by 1


Title: MLM referral and management fee CMI
SQL: with payment as(
select  bpi.invoice_id, 
		sum(p.amount_paid) total_paid, 
		min(p.paid_at) first_paid, 
		max(p.paid_at) last_paid
from vouch_db.billing_payment_invoices bpi 
join vouch_db.billing_payment p on p.id = bpi.payment_id 
where p.is_deleted = 0 
group by 1 
), 
sale_setting as(
select	aff.agent_code selling_affiliate, 
		iaff.agent_code incentive_affiliate, 
		iaff.id incentive_affiliate_id, 
		sale.id sale_id, 
		sale.vehicle_number, 
		ss.incentive_rate,
		ss.incentive_rate*sale.premium_without_tax_amt incentive_amount, 
		ss.reason 
from th_datawarehouse.fd_sale_all_product_unified_view sale
join vouch_db.utils_compulsoryinsuranceform s on s.id = sale.id
join vouch_db.utils_ciflevelsettings ss on ss.cif_id = sale.id
join vouch_db.profiles_affiliate aff on aff.id = sale.affiliate_id 
join vouch_db.profiles_affiliate iaff on iaff.id = ss.affiliate_id 
where sale.product_type_name = 'cmi_solo'
and sale.sale_status = 'is_sold'
and sale.policy_sold_on_at::date <= '{{dt.end}}'
and sale.policy_sold_on_at::date >= '{{dt.start}}'
and ss.incentive_rate >=0 
), 
invoice as(
select 	aff.agent_code, 
		iaff.agent_code incentive_affiliate, 
		iaff.id incentive_affiliate_id, 
		sale.id sale_id, 
		case 
			when invd.detail_type = 'referral_bonus' then 'referred_sale'
			else invd.detail_type
		end reason, 
		inv.amount, 
		inv.withholding_tax, 
		inv.tax, 
		inv.amount_payable,
		inv.payment_status, 
		p.total_paid, 
		p.first_paid, 
		p.last_paid
from vouch_db.utils_compulsoryinsuranceforminvoicedetail cinvd
join th_datawarehouse.fd_sale_all_product_unified_view sale on sale.id = cinvd.compulsory_insurance_form_id 
join vouch_db.billing_invoicedetail invd on invd.id = cinvd.invoice_detail_id 
join vouch_db.profiles_affiliate aff on aff.id = sale.affiliate_id 
join vouch_db.billing_invoice inv on inv.id = invd.invoice_id 
join vouch_db.profiles_affiliateinvoice ainv on ainv.invoice_id = inv.id 
join vouch_db.profiles_affiliate iaff on iaff.id = ainv.affiliate_id 
left join payment p on p.invoice_id = inv.id 
where invd.detail_type in ('management_fee', 'referral_bonus')
and sale.sale_status = 'is_sold'
and sale.product_type_name = 'cmi_solo'
and sale.policy_sold_on_at::date <= '{{dt.end}}'
and sale.policy_sold_on_at::date >= '{{dt.start}}'
and inv.is_deleted = 0
)
select  ss.sale_id, 
		ss.vehicle_number, 
		ss.selling_affiliate, 
		ss.incentive_affiliate, 
		ss.incentive_rate, 
		ss.incentive_amount, 
		ss.reason, 
		inv.amount invoice_amount, 
        inv.withholding_tax invoice_wth, 
        inv.tax invoice_tax, 
        inv.amount_payable invoice_amount_payable, 
        inv.payment_status invoice_payment_status, 
        inv.total_paid, 
        inv.first_paid, 
        inv.last_paid
from sale_setting ss 
left join invoice inv on inv.sale_id = ss.sale_id
				 and inv.incentive_affiliate_id = ss.incentive_affiliate_id 
				 and inv.reason = ss.reason 


Title: Diff Salelevel Settings and Sale Incentive
SQL: with payment as(
select  bpi.invoice_id, 
		sum(p.amount_paid) total_paid, 
		min(p.paid_at) first_paid, 
		max(p.paid_at) last_paid
from vouch_db.billing_payment_invoices bpi 
join vouch_db.billing_payment p on p.id = bpi.payment_id 
where p.is_deleted = 0 
group by 1
), 
sale_setting as(
select  aff.agent_code selling_affiliate,
		aff.id selling_affiliate_id, 
		iaff.agent_code incentive_affiliate,
		iaff.id incentive_affiliate_id, 
		sale.id sale_id, 
		sale.vehicle_number, 
		ss.incentive_rate, 
		ss.reason 
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_salelevelsettings ss on ss.sale_id = sale.id 
join vouch_db.profiles_affiliate aff on aff.id = sale.affiliate_id 
join vouch_db.profiles_affiliate iaff on iaff.id = ss.affiliate_id 
where sale.product_type_name = 'vmi'
and sale.sale_status = 'is_sold'
and ss.is_eligible_for_gwp = 1
and ss.incentive_rate >= 0
--and sale.policy_sold_on_at::date <= '2023/02/28'
--and sale.policy_sold_on_at::date >= '2023/02/01'
), 
invoice as(
select  aff.agent_code, 
		iaff.agent_code incentive_agent,
		iaff.id incentive_affiliate_id, 
		sale.id sale_id, 
		invd.detail_type, 
		inv.amount, 
		inv.withholding_tax, 
		inv.tax, 
		inv.amount_payable, 
		p.total_paid, 
		p.first_paid, 
		p.last_paid
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.policy_fairdeesaleincentive inc on inc.fairdee_sale_id = sale.id 
join vouch_db.billing_invoicedetail invd on invd.id = inc.invoice_detail_id 
join vouch_db.billing_invoice inv on inv.id = invd.invoice_id
join vouch_db.profiles_affiliate aff on aff.id = sale.affiliate_id
join vouch_db.profiles_affiliate iaff on iaff.id = inc.affiliate_id 
left join payment p on p.invoice_id = inv.id 
where sale.product_type_name = 'vmi'
and sale.sale_status = 'is_sold'
and inv.is_deleted = 0
and inc.reason in ('referred_sale', 'management_fee')
--and sale.policy_sold_on_at::date <= '2023/02/28'
--and sale.policy_sold_on_at::date >= '2023/02/01'
)
select  a.sale_id setting_id, a.a setting_count, 
		b.sale_id inc_id, b.b invoice_count, 
		sale.policy_status, 
		concat('https://www.fairdee.co.th/fairdee-wizard?id=', sale.quotation_id) sale_link
from ( 
		select sale_id, 
				count(*) a
		from sale_setting
		group by 1
) a
join (
			select sale_id, 
					count(*) b
			from invoice 
			group by 1
) b on b.sale_id = a.sale_id and a.a!=b.b
join vouch_db.policy_fairdeesale sale on sale.id = a.sale_id
join vouch_db.utils_fairdeequotation fq on fq.id = sale.quotation_id






Title: MLM referral and management fee VMI
SQL: with payment as(
select  bpi.invoice_id, 
		sum(p.amount_paid) total_paid, 
		min(p.paid_at) first_paid, 
		max(p.paid_at) last_paid
from vouch_db.billing_payment_invoices bpi 
join vouch_db.billing_payment p on p.id = bpi.payment_id 
where p.is_deleted = 0 
group by 1
), 
sale_setting as(
select  aff.agent_code selling_affiliate,
		aff.id selling_affiliate_id, 
		iaff.agent_code incentive_agent,
		iaff.id incentive_affiliate_id, 
		sale.id sale_id, 
		sale.vehicle_number, 
		sale.sale_type,
		sale.payment_status, 
		ss.incentive_rate,
		ss.incentive_rate*sale.premium_without_tax_amt incentive_amount, 
		ss.reason 
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_salelevelsettings ss on ss.sale_id = sale.id 
join vouch_db.profiles_affiliate aff on aff.id = sale.affiliate_id 
join vouch_db.profiles_affiliate iaff on iaff.id = ss.affiliate_id 
where sale.product_type_name = 'vmi'
and sale.sale_status = 'is_sold'
and ss.is_eligible_for_gwp = 1
and ss.incentive_rate >= 0
and sale.policy_sold_on_at::date <= '2023/02/28'
and sale.policy_sold_on_at::date >= '2023/02/01'
), 
invoice as(
select  aff.agent_code, 
		iaff.agent_code incentive_agent,
		iaff.id incentive_affiliate_id, 
		sale.id sale_id, 
		invd.detail_type, 
		inv.amount, 
		inv.withholding_tax, 
		inv.tax, 
		inv.amount_payable, 
		inv.payment_status, 
		inc.reason,
		p.total_paid, 
		p.first_paid, 
		p.last_paid
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.policy_fairdeesaleincentive inc on inc.fairdee_sale_id = sale.id 
join vouch_db.billing_invoicedetail invd on invd.id = inc.invoice_detail_id 
join vouch_db.billing_invoice inv on inv.id = invd.invoice_id
join vouch_db.profiles_affiliate aff on aff.id = sale.affiliate_id
join vouch_db.profiles_affiliate iaff on iaff.id = inc.affiliate_id 
left join payment p on p.invoice_id = inv.id 
where sale.product_type_name = 'vmi'
and sale.sale_status = 'is_sold'
and inv.is_deleted = 0
and inc.reason in ('referred_sale', 'management_fee')
and sale.policy_sold_on_at::date <= '2023/02/28'
and sale.policy_sold_on_at::date >= '2023/02/01'
)
select  ss.sale_id,
        ss.vehicle_number,
        ss.sale_type, 
        ss.selling_affiliate, 
        ss.incentive_agent, 
        ss.incentive_rate, 
        ss.incentive_amount expected_incentive_amount, 
        ss.reason, 
        inv.amount invoice_amount, 
        inv.withholding_tax invoice_wth, 
        inv.tax invoice_tax, 
        inv.amount_payable invoice_amount_payable, 
        inv.payment_status invoice_payment_status, 
        inv.total_paid, 
        inv.first_paid, 
        inv.last_paid
from sale_setting ss 
left join invoice inv on inv.sale_id = ss.sale_id 
                      and inv.incentive_affiliate_id = ss.incentive_affiliate_id 
                      and inv.reason = ss.reason






Title: Managment Fee Sale incentive table and sale_level_settings
SQL: with mf as(
select sale.id, sum(ss.incentive_rate*sale.premium_without_tax_amt) fee
from vouch_db.profiles_salelevelsettings ss 
join th_datawarehouse.fd_sale_all_product_unified_view sale on sale.id = ss.sale_id 
where sale.product_type_name = 'vmi'
and sale.sale_status = 'is_sold'
and reason = 'management_fee'
and ss.is_eligible_for_gwp = true
group by 1
)
select to_char(sale.policy_sold_on_at::date, 'YYYY/MM') sold_on_month,
        sum(managment_fee_amt) managment_fee_amt_saleincentive, 
        sum(mf.fee) managment_fee_sale_level_setting
from th_datawarehouse.fd_sale_all_product_unified_view sale
left join mf on mf.id = sale.id
where sale.product_type_name = 'vmi'
and sale.sale_status = 'is_sold'
and sale.policy_sold_on_at::date >= '2023-01-01'
group by 1
order by 1



Title: New Query
SQL: select  count(sale.id) number_of_policies, 
        sum(sale.premium_without_tax_amt) total_premium, 
        sum(sale.fairdee_commission_amt) fairdee_commission, 
        sum(cif.commission) agent_commission 
        -- sum(sale.referral_bonus_amt), 
        -- sum(sale.managment_fee_amt), 
        -- sum(sale.fairdee_commission_amt) - 
        -- sum((cif.commission 
        -- -- sale.referral_bonus_amt + 
        -- -- sale.managment_fee_amt
        -- )) margin
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.utils_compulsoryinsuranceform cif on sale.product_type_name = 'cmi_solo'
                                                and cif.id = sale.id
join vouch_db.profiles_affiliate aff on aff.id = sale.affiliate_id 
where sale.sale_status = 'is_sold'
and aff.account_type = 'mlm_agent'
and sale.policy_sold_on_at::date <= '{{dt.end}}'
and sale.policy_sold_on_at::date >= '{{dt.start}}'

Title: CMI Revenue Verification Febb
SQL: select  count(sale.id) number_of_policies, 
        sum(sale.premium_without_tax_amt) total_premium, 
        sum(sale.fairdee_commission_amt) fairdee_commission, 
        sum(cif.commission) agent_commission 
        -- sum(sale.referral_bonus_amt), 
        -- sum(sale.managment_fee_amt), 
        -- sum(sale.fairdee_commission_amt) - 
        -- sum((cif.commission 
        -- -- sale.referral_bonus_amt + 
        -- -- sale.managment_fee_amt
        -- )) margin
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.utils_compulsoryinsuranceform cif on sale.product_type_name = 'cmi_solo'
                                                and cif.id = sale.id
join vouch_db.profiles_affiliate aff on aff.id = sale.affiliate_id 
where sale.sale_status = 'is_sold'
and aff.account_type = 'mlm_agent'
and sale.policy_sold_on_at::date <= '{{dt.end}}'
and sale.policy_sold_on_at::date >= '{{dt.start}}'

Title: MLM Team Sales
SQL: with recursive agents(agent_code, id,  upline_parent, team_anchor) as
(
select aff.agent_code agent_code,
		aff.id id, 
		paff.agent_code upline_code, 
		aff.agent_code team_anchor
from vouch_db.profiles_affiliate aff 
join vouch_db.profiles_mlmnode mlm on mlm.affiliate_id = aff.id
left join vouch_db.profiles_mlmnode pmlm on pmlm.id = mlm.parent_id 
left join vouch_db.profiles_affiliate paff on paff.id = pmlm.affiliate_id 
join (select distinct aff.id 
				from vouch_db.profiles_affiliate aff
				join vouch_db.profiles_mlmnode mlm on mlm.affiliate_id = aff.id 
				join vouch_db.profiles_affiliate leader on leader.id = mlm.leader_id
				where leader.agent_code = '{{agent_code}}') anchor on anchor.id = aff.id
			

union all 
select  aff.agent_code agent_code,
		aff.id, 
		paff.agent_code upline_code, 
		a.team_anchor
from vouch_db.profiles_affiliate aff 
join vouch_db.profiles_mlmnode mlm on mlm.affiliate_id  = aff.id 
join vouch_db.profiles_mlmnode pmlm on pmlm.id = mlm.parent_id 
join vouch_db.profiles_affiliate paff on paff.id = pmlm.affiliate_id
join agents a on a.agent_code = paff.agent_code 
), 
teams as
(select  distinct agents.*, 
		count(agents.id) over(partition by team_anchor) agent_count
from agents
order by 4)
select  teams.team_anchor, 
		to_date(sale.policy_sold_on_at::date, 'YYYY-MM-01') sold_on_month, 
		sale.product_type_name, 
		count(sale.id) total_sales, 
		sum(sale.premium_without_tax_amt) premium_without_tax
from teams 
left join th_datawarehouse.fd_sale_all_product_unified_view sale on sale.affiliate_id = teams.id 
																 and sale.sale_status = 'is_sold'
																 and sale.product_type_name in ('cmi_solo', 'vmi')
																 
group by 1, 2, 3






Title: All Teams In a MLM Tree
SQL: with recursive agents(agent_code, id,  upline_parent, team_anchor) as
(
select aff.agent_code agent_code,
		aff.id id, 
		paff.agent_code upline_code, 
		aff.agent_code team_anchor
from vouch_db.profiles_affiliate aff 
join vouch_db.profiles_mlmnode mlm on mlm.affiliate_id = aff.id
left join vouch_db.profiles_mlmnode pmlm on pmlm.id = mlm.parent_id 
left join vouch_db.profiles_affiliate paff on paff.id = pmlm.affiliate_id 
join (select distinct aff.id 
				from vouch_db.profiles_affiliate aff
				join vouch_db.profiles_mlmnode mlm on mlm.affiliate_id = aff.id 
				join vouch_db.profiles_affiliate leader on leader.id = mlm.leader_id
				where leader.agent_code = '{{agent_code}}') anchor on anchor.id = aff.id
			

union all 
select  aff.agent_code agent_code,
		aff.id, 
		paff.agent_code upline_code, 
		a.team_anchor
from vouch_db.profiles_affiliate aff 
join vouch_db.profiles_mlmnode mlm on mlm.affiliate_id  = aff.id 
join vouch_db.profiles_mlmnode pmlm on pmlm.id = mlm.parent_id 
join vouch_db.profiles_affiliate paff on paff.id = pmlm.affiliate_id
join agents a on a.agent_code = paff.agent_code 
), 
teams as
(select  distinct agents.*, 
		count(agents.id) over(partition by team_anchor) agent_count
from agents
order by 4)
select * 
from teams 

Title: OCR Comparison Metrics [Raw Data]
SQL: select ocr.id, 
fqq.created_at quote_created_at,
lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'vehicle_brand')) make_ocr, make.name make_quotation, 
CASE 
        WHEN make_ocr = make_quotation
            THEN 'Yes'
        ELSE 'No'
    END AS match_make,
lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'vehicle_model')) model_ocr, mm.name model_name, 
CASE 
        WHEN model_ocr = model_name
            THEN 'Yes'
        ELSE 'No'
    END AS match_model,
lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'vehicle_displacement')) cc_ocr, cc.name cc_quotation, 
CASE 
        WHEN cc_ocr = cc_quotation
            THEN 'Yes'
        ELSE 'No'
    END AS match_cc,
lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'vehicle_model_year')) year_ocr, fqq.year year_quotation, 
CASE 
        WHEN year_ocr = year_quotation
            THEN 'Yes'
        ELSE 'No'
    END AS match_year,
lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'vehicle_license_province')) registration_province_ocr, car.registration_province,
CASE 
        WHEN registration_province_ocr = registration_province
            THEN 'Yes'
        ELSE 'No'
    END AS match_province,
lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'owner_1_title_th')) salutation_ocr, fqq.client_title salutation_quotation, 
CASE 
        WHEN salutation_ocr = salutation_quotation
            THEN 'Yes'
        ELSE 'No'
    END AS match_salution,
lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'owner_1_first_name_th')) first_name_ocr, fqq.client_first_name first_name_quotation, 
CASE 
        WHEN first_name_ocr = first_name_quotation
            THEN 'Yes'
        ELSE 'No'
    END AS match_first_name,
lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'owner_1_last_name_th')) last_name_ocr, fqq.client_last_name last_name_quotation, 
CASE 
        WHEN last_name_ocr = last_name_quotation
            THEN 'Yes'
        ELSE 'No'
    END AS match_last_name,
lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'vehicle_type')) vehicle_code_ocr, fqq.vmi_car_code vehicle_code_quotation, 
upper(lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'vehicle_engine_number'))) engine_number_ocr, car.engine_number engine_number_quotation, 
CASE 
        WHEN engine_number_ocr = engine_number_quotation
            THEN 'Yes'
        ELSE 'No'
    END AS match_engine_number,
upper(lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'vehicle_car_weight'))) vehicle_weight_ocr, car.vehicle_weight vehicle_weight_quotation, 
CASE 
        WHEN vehicle_weight_ocr = vehicle_weight_quotation
            THEN 'Yes'
        ELSE 'No'
    END AS match_vehicle_weight,
upper(lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'vehicle_color'))) vehicle_color_ocr, car.color vehicle_color_quotation, 
CASE 
        WHEN vehicle_color_ocr = vehicle_color_quotation
            THEN 'Yes'
        ELSE 'No'
    END AS match_vehicle_color,
lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'vehicle_license_number')) vehicle_number_ocr, fq.vehicle_number vehicle_number_quotation, 
CASE 
    WHEN REPLACE(vehicle_number_ocr, ' ', '') = REPLACE(vehicle_number_quotation, ' ', '')
        THEN 'Yes'
    ELSE 'No'
END AS match_vehicle_num,
upper(lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'vehicle_chassis_number'))) chassis_number_ocr, fq.chassis_number chassis_number_quotation, 
CASE 
        WHEN chassis_number_ocr = chassis_number_quotation
            THEN 'Yes'
        ELSE 'No'
    END AS match_chassis_num,
upper(lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'vehicle_register_date'))) registration_date_ocr, car.registration_date registration_date_quotation
from vouch_db.utils_ocrdata ocr
join vouch_db.utils_ocrdatalinkage link on link.ocr_data_id = ocr.id 
join vouch_db.utils_fairdeequotationquery fqq on fqq.id = link.object_id
join vouch_db.masterdata_cc cc on cc.id = fqq.cc_id 
join vouch_db.masterdata_makemodel mm on mm.id = cc.make_model_id
join vouch_db.masterdata_make make on make.id = mm.make_id
left join vouch_db.utils_fairdeequotation fq on fq.quotation_query_id = fqq.id
left join vouch_db.profiles_car car on car.id = fq.car_id
where ocr.file_type = 'car_registration'
and fqq.created_at::date between '{{dt.start}}' and '{{dt.end}}'


Title: All conversations with Tag self_serve
SQL:       select con.name, tags.name tags, 
      concat('https://chat.fairdee.co.th/app/accounts/1/conversations/', conv.id) conversation_link
  from
    chatwoot.conversations conv 
    join chatwoot.taggings t on t.taggable_id = conv.id
    join chatwoot.tags on tags.id = t.tag_id
    join chatwoot.contacts con on con.id = conv.contact_id
    where t.taggable_type = 'Conversation'
    and t.context = 'labels'
    and tags.name = 'selfserve'

Title: Cohorts Analysis [monthly][unified_view]
SQL: with ov as (
select  start_date::date start_date, 
		end_date::date end_date, 
		lower(insurance_partner_name) insurer_code, 
		case when ov_product_name = 'cmi' then 'cmi_solo'::varchar
		else ov_product_name
		end product_name, 
		ov.forcecast_ov_perc, 
		actual_ov_perc
from th_externals.fd_ov_estimation_collected  ov ),
affiliate as(
select affiliate.affiliate_id, 
	   min(to_date(sale.policy_sold_on_at::date, 'YYYY-MM-01')) cohort_month
from th_datawarehouse.dd_affiliate affiliate
join th_datawarehouse.fd_sale_all_product_unified_view sale on sale.affiliate_id = affiliate.affiliate_id 
where sale.policy_sold_on_at::date >= '2019-01-01'
group by 1
),
sale as
(
select  
		affiliate.affiliate_id,
		datediff(mon, '2019-01-01', to_date(sale.policy_sold_on_at::date, 'YYYY-MM-01') ) month_number,
		count(sale.id||'-'||sale.product_type_name) total_sales,
		sum(sale.premium_without_tax_amt) gwp, 
		((sum(sale.fairdee_commission_amt) + coalesce(sum(sale.premium_without_tax_amt*coalesce(ov.actual_ov_perc, ov.forcecast_ov_perc)), 0))
		- sum(sale.expected_affiliate_commission_amt)) revenue,
		sum(sale.fairdee_commission_amt) + coalesce(sum(sale.premium_without_tax_amt*coalesce(ov.actual_ov_perc, ov.forcecast_ov_perc)), 0)- (
		sum(sale.expected_affiliate_commission_amt) + 
		sum(sale.incentives_amt) + 
		sum(sale.referral_bonus_amt) + 
		sum(sale.managment_fee_amt)
		) revenue_with_marketing
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join affiliate on affiliate.affiliate_id = sale.affiliate_id
left join ov on (ov.insurer_code = sale.insurer_code) and 
		        (ov.product_name = sale.product_type_name) and 
		        (sale.policy_sold_on_at::date<= ov.end_date and sale.policy_sold_on_at::date >= ov.start_date)
where sale.sale_status = 'is_sold'
group by 1, 2
order by 1, 2
)
select  affiliate.cohort_month, 
        month_number,
        count(distinct sale.affiliate_id) selling_agents, 
        sum(total_sales) total_sales, 
        sum(gwp) gwp, 
        sum(revenue) revenue, 
        sum(revenue_with_marketing) revenue_with_marketing
from affiliate 
join sale on sale.affiliate_id = affiliate.affiliate_id
group by 1, 2
order by 1, 2 



Title: All agents in branch Sale Breakdown
SQL: with recursive agents(agent_code, affiliate_id, upline_parent) as
(
select  aff.agent_code agent_code,
        aff.id affiliate_id, 
		paff.agent_code upline_code
from vouch_db.profiles_affiliate aff 
join vouch_db.profiles_mlmnode mlm on mlm.affiliate_id = aff.id
left join vouch_db.profiles_mlmnode pmlm on pmlm.id = mlm.parent_id 
left join vouch_db.profiles_affiliate paff on paff.id = pmlm.affiliate_id 
where aff.agent_code = '{{agent_code}}'	

union all 
select  aff.agent_code agent_code,
        aff.id affiliate_id, 
		paff.agent_code upline_parent
from vouch_db.profiles_affiliate aff 
join vouch_db.profiles_mlmnode mlm on mlm.affiliate_id  = aff.id 
join vouch_db.profiles_mlmnode pmlm on pmlm.id = mlm.parent_id 
join vouch_db.profiles_affiliate paff on paff.id = pmlm.affiliate_id
join agents a on a.agent_code = paff.agent_code 
)
select agents.agent_code, 
       sale.id,
       sale.policy_sold_on_at, 
       sale.vehicle_number, 
       sale.premium_without_tax_amt,
       sale.fairdee_commission_amt, 
       sale.expected_affiliate_commission_amt, 
       sale.managment_fee_amt, 
       sale.referral_bonus_amt
from agents
join th_datawarehouse.fd_sale_all_product_unified_view sale on sale.affiliate_id = agents.affiliate_id
where product_type_name = 'vmi'
and sale.policy_sold_on_at::date between '{{dt.start}}' and '{{dt.end}}'
and sale_status = 'is_sold'


Title: All agents in branch Total GWP
SQL: with recursive agents(agent_code, affiliate_id, upline_parent) as
(
select  aff.agent_code agent_code,
        aff.id affiliate_id, 
		paff.agent_code upline_code
from vouch_db.profiles_affiliate aff 
join vouch_db.profiles_mlmnode mlm on mlm.affiliate_id = aff.id
left join vouch_db.profiles_mlmnode pmlm on pmlm.id = mlm.parent_id 
left join vouch_db.profiles_affiliate paff on paff.id = pmlm.affiliate_id 
where aff.agent_code = '{{agent_code}}'	

union all 
select  aff.agent_code agent_code,
        aff.id affiliate_id, 
		paff.agent_code upline_parent
from vouch_db.profiles_affiliate aff 
join vouch_db.profiles_mlmnode mlm on mlm.affiliate_id  = aff.id 
join vouch_db.profiles_mlmnode pmlm on pmlm.id = mlm.parent_id 
join vouch_db.profiles_affiliate paff on paff.id = pmlm.affiliate_id
join agents a on a.agent_code = paff.agent_code 
)
select '{{agent_code}}' first_parent_node, 
       sum(premium_without_tax_amt)
from agents
join th_datawarehouse.fd_sale_all_product_unified_view sale on sale.affiliate_id = agents.affiliate_id
where product_type_name = 'vmi'
and sale_status = 'is_sold'
group by 1


Title: All agents in branch Total GWP
SQL: with recursive agents(agent_code, affiliate_id, upline_parent) as
(
select  aff.agent_code agent_code,
        aff.id affiliate_id, 
		paff.agent_code upline_code
from vouch_db.profiles_affiliate aff 
join vouch_db.profiles_mlmnode mlm on mlm.affiliate_id = aff.id
left join vouch_db.profiles_mlmnode pmlm on pmlm.id = mlm.parent_id 
left join vouch_db.profiles_affiliate paff on paff.id = pmlm.affiliate_id 
where aff.agent_code = '{{agent_code}}'	

union all 
select  aff.agent_code agent_code,
        aff.id affiliate_id, 
		paff.agent_code upline_parent
from vouch_db.profiles_affiliate aff 
join vouch_db.profiles_mlmnode mlm on mlm.affiliate_id  = aff.id 
join vouch_db.profiles_mlmnode pmlm on pmlm.id = mlm.parent_id 
join vouch_db.profiles_affiliate paff on paff.id = pmlm.affiliate_id
join agents a on a.agent_code = paff.agent_code 
)
select '{{agent_code}}' first_parent_node, 
       sum(premium_without_tax_amt)
from agents
join th_datawarehouse.fd_sale_all_product_unified_view sale on sale.affiliate_id = agents.affiliate_id
where product_type_name = 'vmi'
and sale_status = 'is_sold'
group by 1


Title: All agents in branch
SQL: with recursive agents(agent_code, upline_parent) as
(
select aff.agent_code agent_code, 
		paff.agent_code upline_code
from vouch_db.profiles_affiliate aff 
join vouch_db.profiles_mlmnode mlm on mlm.affiliate_id = aff.id
left join vouch_db.profiles_mlmnode pmlm on pmlm.id = mlm.parent_id 
left join vouch_db.profiles_affiliate paff on paff.id = pmlm.affiliate_id 
where aff.id = 16732	

union all 
select  aff.agent_code agent_code,
		paff.agent_code upline_parent
from vouch_db.profiles_affiliate aff 
join vouch_db.profiles_mlmnode mlm on mlm.affiliate_id  = aff.id 
join vouch_db.profiles_mlmnode pmlm on pmlm.id = mlm.parent_id 
join vouch_db.profiles_affiliate paff on paff.id = pmlm.affiliate_id
join agents a on a.agent_code = paff.agent_code 
)
select * from agents 

Title: Installment Policies with
SQL: select distinct insurance_class
from th_datawarehouse.fd_sale_all_product_unified_view
bail_bondnumber_of_branchesศษ



Title: Sales Backlog
SQL: SELECT
  sale.id AS Sale_ID,
  sale.policy_purchased_at AS created_at,
  sale.sale_type,
  sale.policy_status,
  aff.agent_code,
  sale.payment_status,
  kyc.status AS KYC_status,
  fq.vehicle_number AS license_plate,
  CONCAT('https://fairdee.co.th/fairdee-wizard?id=', fq.id) AS sale_link
FROM
  th_datawarehouse.fd_sale_all_product_unified_view sale
  JOIN th_datawarehouse.dd_affiliate aff ON sale.affiliate_id = aff.affiliate_id
  lEFT JOIN vouch_db.policy_vendorkyc kyc ON sale.id = kyc.sale_id
  JOIN vouch_db.policy_fairdeesale pf ON pf.id = sale.id
  JOIN vouch_db.utils_fairdeequotation fq ON fq.id = pf.quotation_id
WHERE
  sale.policy_purchased_at between '{{Date_range.start}}'
  AND '{{Date_range.end}}'
  AND CASE
    WHEN '{{Sale_Type}}' = 'All' THEN 1 = 1
    WHEN '{{Sale_Type}}' = 'instalment' THEN sale.sale_type = 'instalment'
    WHEN '{{Sale_Type}}' = 'credit' THEN sale.sale_type = 'credit'
    WHEN '{{Sale_Type}}' = 'cbc_to_insurer' THEN sale.sale_type = 'cbc_to_insurer'
    WHEN '{{Sale_Type}}' = 'cbc_to_fairdee' THEN sale.sale_type = 'cbc_to_fairdee'
    WHEN '{{Sale_Type}}' = 'credit_exceeded' THEN sale.sale_type = 'credit_exceeded'
  END
  AND CASE
    WHEN '{{KYC_Status}}' = 'All' THEN 1 = 1
    WHEN '{{KYC_Status}}' = 'ekyc_pending' THEN kyc.status = 'ekyc_pending'
    WHEN '{{KYC_Status}}' = 'ekyc_verified' THEN kyc.status = 'ekyc_verified'
    WHEN '{{KYC_Status}}' = 'ekyc_rejected' THEN kyc.status = 'ekyc_rejected'
    WHEN '{{KYC_Status}}' = 'loan_contract_signed' THEN kyc.status = 'loan_contract_signed'
    WHEN '{{KYC_Status}}' = 'ekyc_pending_verification' THEN kyc.status = 'ekyc_pending_verification'
  END
  AND CASE
    WHEN '{{policy_status}}' = 'All' THEN 1 = 1
    WHEN '{{policy_status}}' = 'policy_issued' THEN sale.policy_status = 'policy_issued'
    WHEN '{{policy_status}}' = 'insurer_rejected' THEN sale.policy_status = 'insurer_rejected'
    WHEN '{{policy_status}}' = 'car_inspection_rejected' THEN sale.policy_status = 'car_inspection_rejected'
    WHEN '{{policy_status}}' = 'docs_collected' THEN sale.policy_status = 'docs_collected'
    WHEN '{{policy_status}}' = 'sent_for_consideration_occupation' THEN sale.policy_status = 'sent_for_consideration_occupation'
    WHEN '{{policy_status}}' = 'cancellation_requested_insurer' THEN sale.policy_status = 'cancellation_requested_insurer'
    WHEN '{{policy_status}}' = 'cancellation_completed' THEN sale.policy_status = 'cancellation_completed'
    WHEN '{{policy_status}}' = 'cancellation_requested' THEN sale.policy_status = 'cancellation_requested'
    WHEN '{{policy_status}}' = 'policy_sent_to_user' THEN sale.policy_status = 'policy_sent_to_user'
    WHEN '{{policy_status}}' = 'send_policy_to_user' THEN sale.policy_status = 'send_policy_to_user'
    WHEN '{{policy_status}}' = 'coa_approval_pending' THEN sale.policy_status = 'coa_approval_pending'
    WHEN '{{policy_status}}' = 'renewal_waiting_to_issue_policy' THEN sale.policy_status = 'renewal_waiting_to_issue_policy'
    WHEN '{{policy_status}}' = 'docs_pending' THEN sale.policy_status = 'docs_pending'
    WHEN '{{policy_status}}' = 'insurer_notified' THEN sale.policy_status = 'insurer_notified'
    WHEN '{{policy_status}}' = 'docs_approved' THEN sale.policy_status = 'docs_approved'
    WHEN '{{policy_status}}' = 'docs_rejected' THEN sale.policy_status = 'docs_rejected'
    WHEN '{{policy_status}}' = 'covernote_issued' THEN sale.policy_status = 'covernote_issued'
    WHEN '{{policy_status}}' = 'sent_for_consideration_declaration' THEN sale.policy_status = 'sent_for_consideration_declaration'
    WHEN '{{policy_status}}' = 'policy_delivered_to_user' THEN sale.policy_status = 'policy_delivered_to_user'
    WHEN '{{policy_status}}' = 'policy_uploaded' THEN sale.policy_status = 'policy_uploaded'
    WHEN '{{policy_status}}' = 'need_to_cancel_cmi' THEN sale.policy_status = 'need_to_cancel_cmi'
  END
  AND CASE
    WHEN '{{payment_status}}' = 'All' THEN 1 = 1
    WHEN '{{payment_status}}' = 'invoice_issued' THEN sale.payment_status = 'invoice_issued'
    WHEN '{{payment_status}}' = 'no_refunds' THEN sale.payment_status = 'no_refunds'
    WHEN '{{payment_status}}' = 'transfer_note_issued' THEN sale.payment_status = 'transfer_note_issued'
    WHEN '{{payment_status}}' = 'credit_approved' THEN sale.payment_status = 'credit_approved'
    WHEN '{{payment_status}}' = 'payment_refunded' THEN sale.payment_status = 'payment_refunded'
    WHEN '{{payment_status}}' = 'insurer_notified' THEN sale.payment_status = 'insurer_notified'
    WHEN '{{payment_status}}' = 'payment_verified' THEN sale.payment_status = 'payment_verified'
    WHEN '{{payment_status}}' = 'payment_proof_received' THEN sale.payment_status = 'payment_proof_received'
    WHEN '{{payment_status}}' = 'commission_transferred' THEN sale.payment_status = 'commission_transferred'
END
    ORDER BY
      created_at desc
    

Title: Chassis Number 2
SQL: -- SELECT 
-- sale.chassis_number, 
-- sale.policy_status,
-- serve.sale_link
-- FROM th_datawarehouse.fd_sale_unified_view sale
-- Join th_datawarehouse.fd_self_serve serve on sale.affiliate_id = serve.affiliate_id

SELECT 
    sale.chassis_number, 
    sale.policy_status,
    MAX(serve.sale_link) as sale_link
FROM 
    th_datawarehouse.fd_sale_unified_view sale
JOIN 
    th_datawarehouse.fd_self_serve serve ON sale.affiliate_id = serve.affiliate_id
GROUP BY
    sale.chassis_number,
    sale.policy_status
ORDER BY
    sale_link ;


Title: Chassis Number
SQL: -- SELECT  chassis_number 
-- FROM th_datawarehouse.fd_sale_unified_view 
-- GROUP BY 1 
-- ORDER BY chassis_number DESC

SELECT LENGTH(chassis_number) AS char_length, MIN(chassis_number) AS sample_data
FROM th_datawarehouse.fd_sale_unified_view
GROUP BY LENGTH(chassis_number)
ORDER BY char_length DESC;


-- SELECT MIN(LENGTH(chassis_number)) AS min_chars, MAX(LENGTH(chassis_number)) AS max_chars
-- FROM th_datawarehouse.fd_sale_unified_view



Title: Premium Increase Sale Transfer Cases
SQL: with ue as(
select fue.fairdeesale_id, sum(ue.premium_without_tax) premium_without_tax
from vouch_db.policy_fairdeesale sale 
join vouch_db.policy_fairdeesale_unit_economics fue on fue.fairdeesale_id = sale.id 
join vouch_db.utils_uniteconomics ue on ue.id = fue.uniteconomics_id 
group by 1
), 
quotation as(
select id, fq.transferred_quote_for_id 
from vouch_db.utils_fairdeequotation fq 
)
select sale.id new_sale_id, 
	   sale.sold_on::date new_sale_sold_on_date, 
	   to_char(sale.sold_on::date, 'YYYY-MM') new_sale_sold_on_month, 
	   ue.premium_without_tax new_sale_premium, 
	   concat('https://www.fairdee.co.th/fairdee-wizard?id=', fq.id) new_sale_link,
	   ssale.id old_sale_id, 
	   ssale.sold_on::date old_sale_sold_on_date, 
	   to_char(ssale.sold_on::date, 'YYYY-MM') old_sale_sold_on_month, 
	   sue.premium_without_tax old_sale_premium, 
	   concat('https://www.fairdee.co.th/fairdee-wizard?id=', sfq.id) old_sale_link
from vouch_db.policy_fairdeesale sale 
join quotation fq on fq.id = sale.quotation_id 
join ue on ue.fairdeesale_id = sale.id 
join quotation sfq on sfq.id = fq.transferred_quote_for_id 
join vouch_db.policy_fairdeesale ssale on ssale.quotation_id = sfq.id
join ue sue on sue.fairdeesale_id = ssale.id
where ssale.sold_on::date <= '{{dt.end}}'
and ssale.sold_on::date >= '{{dt.start}}'
--and ue.premium_without_tax - sue.premium_without_tax > 0

Title: Endorsement Transaction
SQL: select  sale.policy_sold_on_at::date sold_on_date, 
		to_char(sale.policy_sold_on_at::date, 'YYYY-MM') sold_on_month, 
		affiliate.agent_code, 
		affiliate.account_type, 
		sale.id sale_id,
		endors.type_of_endorsement, 
		concat('https://www.fairdee.co.th/fairdee-wizard?id=', ss.quotation_id) sale_link, 
		sale.premium_after_tax_amt, 
		endors.premium_after_tax premium_after_tax_after_endorsment, 
		endors.type_of_endorsement,
		sale.sale_status
from vouch_db.policy_fairdeepolicyendorsement endors
join th_datawarehouse.fd_sale_all_product_unified_view sale on sale.id = endors.fairdeesale_id
join th_datawarehouse.fd_self_serve ss on ss.sale_id  = sale.id
join th_datawarehouse.dd_affiliate affiliate on affiliate.affiliate_id = sale.affiliate_id 
where sale.product_type_name = 'vmi'
and sale.policy_sold_on_at::date <= '{{dt.end}}'
and sale.policy_sold_on_at::date >= '{{dt.start}}'
--and endors.type_of_endorsement = 'premium_addition'

Title: All Endorsement Types
SQL: Select distinct type_of_endorsement
from vouch_db.policy_fairdeepolicyendorsement endors
where type_of_endorsement is not null

Title: EKYC Verification Process
SQL: with document as(
select distinct vendor_kyc_id
from vouch_db.policy_vendorkycdocument doc 
where doc.document_type in ('liveness', 'nid_card_front')
), 
quotation_document as(
select distinct fq.id
from vouch_db.policy_fairdeesale sale 
join vouch_db.utils_fairdeequotation fq on fq.id =sale.quotation_id 
join vouch_db.utils_fairdeedocument doc on doc.fairdee_quotation_id = fq.id 
where doc.document_type in ('customer_copy_national_id', 'photo_with_national_id')
)
-- select  fqq.created_at::date as quote_created_at,
--         to_char(fqq.created_at::date, 'YYYY-MM') quote_created_month, 
--         fqq.id quotation_id, 
--         sale.policy_sold_on_at::date sold_on, 
--         to_char(sale.policy_sold_on_at::date, 'YYYY-MM') sold_on_month, 
--         sale.sale_status, 
        -- case  
        --     when doc.vendor_kyc_id is null then 'manual_kyc'
        --     else 'via_api'
        -- end ekyc_process, 
--         ekyc.status
select  sale.id sale_id, 
        ekyc.status, 
        fqq.created_at quote_create_date, 
        to_char(fqq.created_at::date, 'YYYY-MM') quote_created_month, 
        fqq.id quotation_id, 
        sale.policy_sold_on_at::date sold_on, 
        to_char(sale.policy_sold_on_at::date, 'YYYY-MM') sold_on_month, 
       CASE 
        WHEN doc.vendor_kyc_id IS NOT NULL THEN 'Yes' 
        ELSE 'No' 
    END AS photo_attached_ekyc_status, 
    CASE 
        WHEN doc.vendor_kyc_id IS NULL AND qd.id IS NOT NULL THEN 'Yes' 
        ELSE 'No' 
    END AS photo_attached_ong_status,
        case  
            when doc.vendor_kyc_id is not null then 'via_api'
            when qd.id is not null then 'manual_kyc'
        end ekyc_process,
        ekyc.status, 
        concat('https://www.fairdee.co.th/fairdee-wizard?id=', fq.id) sale_link
from vouch_db.policy_vendorkyc ekyc
join th_datawarehouse.fd_sale_all_product_unified_view sale on sale.id = ekyc.sale_id
join vouch_db.policy_fairdeesale s on s.id = sale.id 
join vouch_db.utils_fairdeequotation fq on fq.id = s.quotation_id
join vouch_db.utils_fairdeequotationquery fqq on fqq.id = fq.quotation_query_id
left join document doc on ekyc.id = doc.vendor_kyc_id
left join quotation_document qd on qd.id = fq.id 
-- where ekyc.status = 'ekyc_verified'
where sale.product_type_name = 'vmi'
and sale.policy_sold_on_at::date >= '{{dt.start}}'
and sale.policy_sold_on_at::date <= '{{dt.end}}'
and ekyc.is_deleted = 0




Title: OTP SMS Status
SQL: SELECT
  date(CONVERT_TIMEZONE('Asia/Bangkok', created_at)) AS sent_time_th,
  COUNT(id) AS total,
  status,
  vendor
FROM
  vouch_db.communicator_usersms
WHERE
  sms_type = 'login_otp'
  AND CONVERT_TIMEZONE('Asia/Bangkok', created_at) > dateadd(day, -30, CONVERT_TIMEZONE('Asia/Bangkok', GETDATE()))
GROUP BY
  1,
  3,
  4
ORDER BY
  sent_time_th DESC;


Title: Agents Using Combined Payment
SQL: select  distinct to_char(sale.sold_on::date, 'YYYY-MM') sold_on_month,
        sale.sold_on,
        sale.id,
        aff.agent_code,
        affiliate.account_type,
        users.fullname, 
        concat('https://www.fairdee.co.th/fairdee-wizard?id=', fq.id) sale_link, 
        min(p.paid_at) first_payment, 
        max(p.paid_at) last_payment
from vouch_db.policy_fairdeesale sale
join vouch_db.utils_fairdeequotation fq on fq.id = sale.quotation_id
join vouch_db.policy_fairdeesaleinvoice fsi on fsi.fairdee_sale_id = sale.id
join vouch_db.billing_invoice inv on inv.id = fsi.invoice_id
join vouch_db.billing_payment_invoices bpi on bpi.invoice_id = inv.id
join vouch_db.billing_payment p on p.id = bpi.payment_id
join vouch_db.profiles_affiliate aff on aff.id = sale.affiliate_id
join th_datawarehouse.dd_affiliate affiliate on affiliate.affiliate_id = aff.id
join vouch_db.profiles_user users on users.id = aff.user_id
where p.vendor_name = 'billing.Payment'
and sale.sale_type = 'cbc_to_fairdee'
and inv.payee = 'fairdee'
and inv.payer = 'customer'
group by 1, 2, 3, 4, 5, 6, 7

Title: PDF Download Agents/Quoting Agents
SQL: SELECT 
  DATE(fqq.created_at) AS date,
  COUNT(DISTINCT affiliate.affiliate_id) AS quoting_agents,
  COUNT(DISTINCT CASE WHEN download_count > 0 THEN fqq.affiliate_id END) AS PDF_download_agents,
  COUNT(DISTINCT CASE WHEN download_count > 0 THEN fqq.affiliate_id END) * 100 / COUNT(DISTINCT affiliate.affiliate_id) AS ratio
FROM th_datawarehouse.dd_affiliate affiliate
JOIN vouch_db.profiles_user "user" ON "user".id = affiliate.user_id
JOIN vouch_db.profiles_userrole urole ON urole.user_id = "user".id
JOIN vouch_db.profiles_role role ON role.id = urole.role_id
JOIN vouch_db.utils_fairdeequotationquery fqq ON affiliate.affiliate_id = fqq.affiliate_id
WHERE
  "user".is_test = FALSE
  AND role.name != 'admin'
  AND "user".email NOT LIKE '%fairdee.co.th%'
  AND "user".email NOT LIKE '%vouch%'
  AND affiliate.has_broker_license = 1
  AND (
    '{{account_type}}' = 'inspection_garage'
    OR affiliate.is_oic_data_verified = 1
  )
  AND  (case
        when '{{account_type}}' = 'all' then 1=1
        when '{{account_type}}' = 'direct_agent' then affiliate.account_type = 'direct_agent'
        when '{{account_type}}' = 'inspection_garage' then affiliate.account_type = 'inspection_garage'
        when '{{account_type}}' = 'mlm_agent' then affiliate.account_type = 'mlm_agent'
        -- else affiliates.account_type_transformed = 'mlm_agent' 
    end)
  AND fqq.created_at BETWEEN '{{ dt.start }}' AND '{{ dt.end }}'
GROUP BY DATE(fqq.created_at);




Title: Total Agents Selling Daily - by sold_on
SQL: select to_date(sale.policy_sold_on_at::date, 'YYYY/MM/DD') sale_date,
count(distinct sale.affiliate_id) as "Total Affiliates",
account_type
from th_datawarehouse.fd_sale_all_product_unified_view sale
join th_datawarehouse.dd_affiliate affiliate on sale.affiliate_id =affiliate.affiliate_id
where 
sale_status = 'is_sold'
and product_type_name = 'vmi'
and has_broker_license=1
and is_oic_data_verified=1
  and (case
        when '{{account_type}}' = 'all' then 1=1
        when '{{account_type}}' = 'direct_agent' then affiliate.account_type = 'direct_agent'
        when '{{account_type}}' = 'inspection_garage' then affiliate.account_type = 'inspection_garage'
        when '{{account_type}}' = 'mlm_agent' then affiliate.account_type = 'mlm_agent'
        -- else affiliates.account_type_transformed = 'mlm_agent' 
    end)
    AND sale.policy_sold_on_at between '{{ dt.start }}' AND '{{ dt.end }}'
      group by 1,account_Type
      order by 1 

Title: Self served & Total sales policies per month
SQL:     WITH self_serves AS (
    SELECT to_date(sold_on::date, 'YYYY-MM-01') AS sale_month,
        COUNT(DISTINCT sale_id) AS self_serve
    FROM th_datawarehouse.fd_self_serve self
        JOIN th_datawarehouse.fd_sale_all_product_unified_view sale ON sale.id = self.sale_id
        JOIN th_datawarehouse.dd_affiliate affiliate ON affiliate.affiliate_id = sale.affiliate_id
    WHERE quote_created_by = report_sale_button_clicked_by
        AND report_sale_button_clicked_by != 'Admin'
        AND affiliate_user_id = affiliate.user_id 
        AND quote_created_by = payment__proof_uploaded_by
        AND quote_created_by = data_submited_by
        AND quote_created_by != 'Admin'
        AND product_type_name = 'vmi' 
        AND sale_status = 'is_sold'
        AND (CASE
            WHEN '{{account_type}}' = 'all' THEN 1=1
            WHEN '{{account_type}}' = 'direct_agent' THEN affiliate.account_type = 'direct_agent'
            WHEN '{{account_type}}' = 'inspection_garage' THEN affiliate.account_type = 'inspection_garage'
            WHEN '{{account_type}}' = 'mlm_agent' THEN affiliate.account_type = 'mlm_agent'
            -- ELSE affiliates.account_type_transformed = 'mlm_agent' 
        END)
        AND affiliate.has_broker_license = 1
        AND affiliate.is_oic_data_verified = 1
        and (CASE
            WHEN '{{type_of_quote}}' = 'all' THEN 1=1
            WHEN '{{type_of_quote}}' = 'manual_quote' THEN type_of_quote = 'manual_quote'
            WHEN '{{type_of_quote}}' = 'system_quote' THEN type_of_quote = 'system_quote'
        END)
        -- AND type_of_manual_quote != 'change__of_agent' 
    GROUP BY to_date(sold_on::date, 'YYYY-MM-01')
),
total_sales AS (
    SELECT 
        to_date(policy_sold_on_at::date, 'YYYY-MM-01') AS sale_month,
        COUNT(DISTINCT id) AS total_sales_count
    FROM 
        th_datawarehouse.fd_sale_all_product_unified_view sale
        JOIN th_datawarehouse.dd_affiliate affiliate ON affiliate.affiliate_id = sale.affiliate_id
    WHERE 
        sale_status = 'is_sold'
        AND product_type_name = 'vmi'
        AND (CASE
            WHEN '{{account_type}}' = 'all' THEN 1=1
            WHEN '{{account_type}}' = 'direct_agent' THEN affiliate.account_type = 'direct_agent'
            WHEN '{{account_type}}' = 'inspection_garage' THEN affiliate.account_type = 'inspection_garage'
            WHEN '{{account_type}}' = 'mlm_agent' THEN affiliate.account_type = 'mlm_agent'
            -- ELSE affiliates.account_type_transformed = 'mlm_agent' 
        END)
    GROUP BY to_date(policy_sold_on_at::date, 'YYYY-MM-01')
)

SELECT 
    self_serves.sale_month,
    self_serves.self_serve,
    total_sales.total_sales_count AS total_sales,
    (self_serves.self_serve::float / NULLIF(total_sales.total_sales_count, 0)::float) * 100 AS percentage
FROM self_serves
    INNER JOIN total_sales ON self_serves.sale_month = total_sales.sale_month
ORDER BY 
    self_serves.sale_month DESC;  

Title: Agent with tags (account type Direct agents)
SQL: select affiliate.agent_code, 
        affiliate.account_type, affiliate.currently_assigned_to_bm, users.fullname
from th_datawarehouse.dd_affiliate affiliate
join vouch_db.profiles_user users on users.id = affiliate.user_id
join vouch_db.profiles_affiliate aff on aff.id = affiliate.affiliate_id
where affiliate.account_type in ('at_broker', 'at_agentoffice', 'at_offlineagent')
and aff.account_type is null 

Title: Agent with tags (account type IG)
SQL: select affiliate.agent_code, 
        affiliate.account_type, affiliate.currently_assigned_to_bm, users.fullname
from th_datawarehouse.dd_affiliate affiliate
join vouch_db.profiles_user users on users.id = affiliate.user_id
join vouch_db.profiles_affiliate aff on aff.id = affiliate.affiliate_id
where affiliate.account_type in ('at_broker', 'at_agentoffice', 'at_offlineagent')
and aff.account_type = 'inspection_garage'

Title: Only Direct Agents
SQL: select affiliate.agent_code, users.fullname
from th_datawarehouse.dd_affiliate affiliate
join vouch_db.profiles_user users on users.id = affiliate.user_id
where affiliate.account_type = 'direct_agent'

Title: Quotes Per Type of Manual Quote
SQL: with affiliate as(
select  affiliate_id, 
        case 
            when account_type = ' Work Shop 2 Ubonratchathani' then 'mlm_agent'
            else account_type 
        end account_type 
from th_datawarehouse.dd_affiliate affiliate
)
select  distinct to_char(metric.quote_created_at::date, 'YYYY-MM') quote_month,
        affiliate.account_type,
        metric.quote_created_by,
        -- metric.type_of_quote,
        metric.type_of_manual_quote, 
        count(metric.quotation_id) over(partition by to_char(metric.quote_created_at::date, 'YYYY-MM'), 
                                                     affiliate.account_type,
                                                     metric.quote_created_by, 
                                                     metric.type_of_manual_quote) total_quotes, 
        count(case 
                    when sale.sale_status = 'is_sold' then sale.id
              end) over(partition by to_char(metric.quote_created_at::date, 'YYYY-MM'),
                                     affiliate.account_type,
                                     metric.quote_created_by, 
                                     metric.type_of_manual_quote) sold_quotes
from th_datawarehouse.fd_self_serve metric 
join affiliate on affiliate.affiliate_id = metric.affiliate_id
join th_datawarehouse.fd_sale_all_product_unified_view sale on sale.id = metric.sale_id and sale.product_type_name = 'vmi'
where metric.quote_created_at::date >= '{{dt.start}}'
and metric.quote_created_at::date <= '{{dt.end}}'
and metric.type_of_quote = 'manual_quote'
order by 1, 2, 3



Title: Quotes Per Quote type
SQL: with affiliate as(
select  affiliate_id, 
        case 
            when account_type = ' Work Shop 2 Ubonratchathani' then 'mlm_agent'
            else account_type 
        end account_type 
from th_datawarehouse.dd_affiliate affiliate
)
select  distinct to_char(metric.quote_created_at::date, 'YYYY-MM') quote_month,
        affiliate.account_type,
        metric.quote_created_by,
        metric.type_of_quote,
        count(metric.quotation_id) over(partition by to_char(metric.quote_created_at::date, 'YYYY-MM'), 
                                                     affiliate.account_type,
                                                     metric.quote_created_by, 
                                                     metric.type_of_quote) total_quotes, 
        count(case 
                    when sale.sale_status = 'is_sold' then sale.id
              end) over(partition by to_char(metric.quote_created_at::date, 'YYYY-MM'),
                                     affiliate.account_type,
                                     metric.quote_created_by, 
                                     metric.type_of_quote) sold_quotes
from th_datawarehouse.fd_self_serve metric 
join affiliate on affiliate.affiliate_id = metric.affiliate_id
join th_datawarehouse.fd_sale_all_product_unified_view sale on sale.id = metric.sale_id and sale.product_type_name = 'vmi'
where metric.quote_created_at::date >= '{{dt.start}}'
and metric.quote_created_at::date <= '{{dt.end}}'
order by 1, 2, 3



Title: Quotes Per Admin/affiliate
SQL: with affiliate as(
select  affiliate_id, 
        case 
            when account_type = ' Work Shop 2 Ubonratchathani' then 'mlm_agent'
            else account_type 
        end account_type 
from th_datawarehouse.dd_affiliate affiliate
)
select  distinct to_char(metric.quote_created_at::date, 'YYYY-MM') quote_month,
        affiliate.account_type,
        metric.quote_created_by, 
        count(metric.quotation_id) over(partition by to_char(metric.quote_created_at::date, 'YYYY-MM'), 
                                                     affiliate.account_type,
                                                     metric.quote_created_by) total_quotes, 
        count(case 
                    when sale.sale_status = 'is_sold' then sale.id
              end) over(partition by to_char(metric.quote_created_at::date, 'YYYY-MM'),
                                     affiliate.account_type,
                                     metric.quote_created_by) sold_quotes
from th_datawarehouse.fd_self_serve metric 
join affiliate on affiliate.affiliate_id = metric.affiliate_id
join th_datawarehouse.fd_sale_all_product_unified_view sale on sale.id = metric.sale_id and sale.product_type_name = 'vmi'
where metric.quote_created_at::date >= '{{dt.start}}'
and metric.quote_created_at::date <= '{{dt.end}}'
order by 1, 2, 3



Title: Quotes Per Account Type [created_by]
SQL: with affiliate as(
select  affiliate_id, 
        case 
            when account_type = ' Work Shop 2 Ubonratchathani' then 'mlm_agent'
            else account_type 
        end account_type 
from th_datawarehouse.dd_affiliate affiliate
)
select  distinct to_char(metric.quote_created_at::date, 'YYYY-MM') quote_month,
        affiliate.account_type,
        metric.quote_created_by, 
        count(metric.quotation_id) over(partition by to_char(metric.quote_created_at::date, 'YYYY-MM'), 
                                                     affiliate.account_type,
                                                     metric.quote_created_by) total_quotes, 
        count(case 
                    when sale.sale_status = 'is_sold' then sale.id
              end) over(partition by to_char(metric.quote_created_at::date, 'YYYY-MM'),
                                     affiliate.account_type,
                                     metric.quote_created_by) sold_quotes
from th_datawarehouse.fd_self_serve metric 
join affiliate on affiliate.affiliate_id = metric.affiliate_id
join th_datawarehouse.fd_sale_all_product_unified_view sale on sale.id = metric.sale_id and sale.product_type_name = 'vmi'
where metric.quote_created_at::date >= '{{dt.start}}'
and metric.quote_created_at::date <= '{{dt.end}}'
order by 1, 2, 3



Title: Quotes Per Account Type
SQL: with affiliate as(
select  affiliate_id, 
        case 
            when account_type = ' Work Shop 2 Ubonratchathani' then 'mlm_agent'
            else account_type 
        end account_type 
from th_datawarehouse.dd_affiliate affiliate
)
select  distinct to_char(metric.quote_created_at::date, 'YYYY-MM') quote_month,
        affiliate.account_type, 
        count(metric.quotation_id) over(partition by to_char(metric.quote_created_at::date, 'YYYY-MM'), 
                                                     affiliate.account_type) total_quotes, 
        count(case 
                    when sale.sale_status = 'is_sold' then sale.id
              end) over(partition by to_char(metric.quote_created_at::date, 'YYYY-MM'),
                                     affiliate.account_type) sold_quotes
from th_datawarehouse.fd_self_serve metric 
join affiliate on affiliate.affiliate_id = metric.affiliate_id
join th_datawarehouse.fd_sale_all_product_unified_view sale on sale.id = metric.sale_id and sale.product_type_name = 'vmi'
where metric.quote_created_at::date >= '{{dt.start}}'
and metric.quote_created_at::date <= '{{dt.end}}'



Title: BM_Bel-New recruit with credit limit - RDT
SQL: With affiliates AS (
    SELECT affiliate_id, 
           agent_code,
           CASE 
               WHEN account_type IN ('at_inspectiongarage', 'inspection_garage') THEN 'inspection_garage'
               WHEN account_type IN ('Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') THEN 'mlm_agent'
               WHEN account_type IS NULL THEN 'direct_agent'
               ELSE account_type 
           END AS account_type_transformed,
           user_id 
    FROM th_datawarehouse.dd_affiliate 
)
SELECT 
    affiliates.agent_code,
    users.fullname AS agent_name,
    account_type_transformed AS account_type,
    to_char(credit.created_at, 'MM/YYYY') AS credit_date,
    credit.limit as cr_limit,
    SUM(
        CASE
            WHEN product_type_name = 'vmi'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS vmi_premium,
    SUM(
        CASE
            WHEN product_type_name = 'cmi_solo'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS cmi_premium,
    CASE 
        WHEN (SUM(
                CASE
                    WHEN product_type_name = 'vmi'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0 
            OR SUM(
                CASE
                    WHEN product_type_name = 'cmi_solo'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0) THEN 'Yes'
        ELSE 'No' 
    END AS is_active_credit
FROM th_datawarehouse.fd_sale_all_product_unified_view sale 
LEFT JOIN affiliates ON sale.affiliate_id = affiliates.affiliate_id
JOIN vouch_db.profiles_user users ON users.id = affiliates.user_id
JOIN th_datawarehouse.dd_affiliate_bm_mapping map ON affiliates.affiliate_id = map.affiliate_id
JOIN th_datawarehouse.dd_affiliate aff ON sale.affiliate_id = aff.affiliate_id
JOIN vouch_db.profiles_credit credit ON aff.affiliate_id = credit.affiliate_id
WHERE 
    credit.created_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    ) 
    AND map.assigned_bm IN ('BM_BEL_INT')
GROUP BY 1, 2, 3, 4, 5
ORDER BY account_type, agent_name;


Title: BM_Ball-New recruit with credit limit - RDT
SQL: With affiliates AS (
    SELECT affiliate_id, 
           agent_code,
           CASE 
               WHEN account_type IN ('at_inspectiongarage', 'inspection_garage') THEN 'inspection_garage'
               WHEN account_type IN ('Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') THEN 'mlm_agent'
               WHEN account_type IS NULL THEN 'direct_agent'
               ELSE account_type 
           END AS account_type_transformed,
           user_id 
    FROM th_datawarehouse.dd_affiliate 
)
SELECT 
    affiliates.agent_code,
    users.fullname AS agent_name,
    account_type_transformed AS account_type,
    to_char(credit.created_at, 'MM/YYYY') AS credit_date,
    credit.limit as cr_limit,
    SUM(
        CASE
            WHEN product_type_name = 'vmi'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS vmi_premium,
    SUM(
        CASE
            WHEN product_type_name = 'cmi_solo'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS cmi_premium,
    CASE 
        WHEN (SUM(
                CASE
                    WHEN product_type_name = 'vmi'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0 
            OR SUM(
                CASE
                    WHEN product_type_name = 'cmi_solo'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0) THEN 'Yes'
        ELSE 'No' 
    END AS is_active_credit
FROM th_datawarehouse.fd_sale_all_product_unified_view sale 
LEFT JOIN affiliates ON sale.affiliate_id = affiliates.affiliate_id
JOIN vouch_db.profiles_user users ON users.id = affiliates.user_id
JOIN th_datawarehouse.dd_affiliate_bm_mapping map ON affiliates.affiliate_id = map.affiliate_id
JOIN th_datawarehouse.dd_affiliate aff ON sale.affiliate_id = aff.affiliate_id
JOIN vouch_db.profiles_credit credit ON aff.affiliate_id = credit.affiliate_id
WHERE 
    credit.created_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    ) 
    AND map.assigned_bm IN ('bm_ball','BM_BALL_INT')
GROUP BY 1, 2, 3, 4, 5
ORDER BY account_type, agent_name;


Title: BM_Aey-New recruit with credit limit - RDT
SQL: With affiliates AS (
    SELECT affiliate_id, 
           agent_code,
           CASE 
               WHEN account_type IN ('at_inspectiongarage', 'inspection_garage') THEN 'inspection_garage'
               WHEN account_type IN ('Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') THEN 'mlm_agent'
               WHEN account_type IS NULL THEN 'direct_agent'
               ELSE account_type 
           END AS account_type_transformed,
           user_id 
    FROM th_datawarehouse.dd_affiliate 
)
SELECT 
    affiliates.agent_code,
    users.fullname AS agent_name,
    account_type_transformed AS account_type,
    to_char(credit.created_at, 'MM/YYYY') AS credit_date,
    credit.limit as cr_limit,
    SUM(
        CASE
            WHEN product_type_name = 'vmi'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS vmi_premium,
    SUM(
        CASE
            WHEN product_type_name = 'cmi_solo'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS cmi_premium,
    CASE 
        WHEN (SUM(
                CASE
                    WHEN product_type_name = 'vmi'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0 
            OR SUM(
                CASE
                    WHEN product_type_name = 'cmi_solo'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0) THEN 'Yes'
        ELSE 'No' 
    END AS is_active_credit
FROM th_datawarehouse.fd_sale_all_product_unified_view sale 
LEFT JOIN affiliates ON sale.affiliate_id = affiliates.affiliate_id
JOIN vouch_db.profiles_user users ON users.id = affiliates.user_id
JOIN th_datawarehouse.dd_affiliate_bm_mapping map ON affiliates.affiliate_id = map.affiliate_id
JOIN th_datawarehouse.dd_affiliate aff ON sale.affiliate_id = aff.affiliate_id
JOIN vouch_db.profiles_credit credit ON aff.affiliate_id = credit.affiliate_id
WHERE 
    credit.created_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    ) 
    AND map.assigned_bm IN ('BM_AEY_INT','BM_AEY_internal')
GROUP BY 1, 2, 3, 4, 5
ORDER BY account_type, agent_name;


Title: BM_Anup-New recruit with credit limit - RDT
SQL: With affiliates AS (
    SELECT affiliate_id, 
           agent_code,
           CASE 
               WHEN account_type IN ('at_inspectiongarage', 'inspection_garage') THEN 'inspection_garage'
               WHEN account_type IN ('Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') THEN 'mlm_agent'
               WHEN account_type IS NULL THEN 'direct_agent'
               ELSE account_type 
           END AS account_type_transformed,
           user_id 
    FROM th_datawarehouse.dd_affiliate 
)
SELECT 
    affiliates.agent_code,
    users.fullname AS agent_name,
    account_type_transformed AS account_type,
    to_char(credit.created_at, 'MM/YYYY') AS credit_date,
    credit.limit as cr_limit,
    SUM(
        CASE
            WHEN product_type_name = 'vmi'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS vmi_premium,
    SUM(
        CASE
            WHEN product_type_name = 'cmi_solo'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS cmi_premium,
    CASE 
        WHEN (SUM(
                CASE
                    WHEN product_type_name = 'vmi'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0 
            OR SUM(
                CASE
                    WHEN product_type_name = 'cmi_solo'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0) THEN 'Yes'
        ELSE 'No' 
    END AS is_active_credit
FROM th_datawarehouse.fd_sale_all_product_unified_view sale 
LEFT JOIN affiliates ON sale.affiliate_id = affiliates.affiliate_id
JOIN vouch_db.profiles_user users ON users.id = affiliates.user_id
JOIN th_datawarehouse.dd_affiliate_bm_mapping map ON affiliates.affiliate_id = map.affiliate_id
JOIN th_datawarehouse.dd_affiliate aff ON sale.affiliate_id = aff.affiliate_id
JOIN vouch_db.profiles_credit credit ON aff.affiliate_id = credit.affiliate_id
WHERE 
    credit.created_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    ) 
    AND map.assigned_bm IN ('BM_ANUP_INT')
GROUP BY 1, 2, 3, 4, 5
ORDER BY account_type, agent_name;


Title: BM_Pom-New recruit with credit limit - RDT
SQL: With affiliates AS (
    SELECT affiliate_id, 
           agent_code,
           CASE 
               WHEN account_type IN ('at_inspectiongarage', 'inspection_garage') THEN 'inspection_garage'
               WHEN account_type IN ('Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') THEN 'mlm_agent'
               WHEN account_type IS NULL THEN 'direct_agent'
               ELSE account_type 
           END AS account_type_transformed,
           user_id 
    FROM th_datawarehouse.dd_affiliate 
)
SELECT 
    affiliates.agent_code,
    users.fullname AS agent_name,
    account_type_transformed AS account_type,
    to_char(credit.created_at, 'MM/YYYY') AS credit_date,
    credit.limit as cr_limit,
    SUM(
        CASE
            WHEN product_type_name = 'vmi'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS vmi_premium,
    SUM(
        CASE
            WHEN product_type_name = 'cmi_solo'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS cmi_premium,
    CASE 
        WHEN (SUM(
                CASE
                    WHEN product_type_name = 'vmi'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0 
            OR SUM(
                CASE
                    WHEN product_type_name = 'cmi_solo'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0) THEN 'Yes'
        ELSE 'No' 
    END AS is_active_credit
FROM th_datawarehouse.fd_sale_all_product_unified_view sale 
LEFT JOIN affiliates ON sale.affiliate_id = affiliates.affiliate_id
JOIN vouch_db.profiles_user users ON users.id = affiliates.user_id
JOIN th_datawarehouse.dd_affiliate_bm_mapping map ON affiliates.affiliate_id = map.affiliate_id
JOIN th_datawarehouse.dd_affiliate aff ON sale.affiliate_id = aff.affiliate_id
JOIN vouch_db.profiles_credit credit ON aff.affiliate_id = credit.affiliate_id
WHERE 
    credit.created_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    ) 
    AND map.assigned_bm IN ('BM_POM_INT')
GROUP BY 1, 2, 3, 4, 5
ORDER BY account_type, agent_name;


Title: BM_Tron-New recruit with credit limit - RDT
SQL: With affiliates AS (
    SELECT affiliate_id, 
           agent_code,
           CASE 
               WHEN account_type IN ('at_inspectiongarage', 'inspection_garage') THEN 'inspection_garage'
               WHEN account_type IN ('Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') THEN 'mlm_agent'
               WHEN account_type IS NULL THEN 'direct_agent'
               ELSE account_type 
           END AS account_type_transformed,
           user_id 
    FROM th_datawarehouse.dd_affiliate 
)
SELECT 
    affiliates.agent_code,
    users.fullname AS agent_name,
    account_type_transformed AS account_type,
    to_char(credit.created_at, 'MM/YYYY') AS credit_date,
    credit.limit as cr_limit,
    SUM(
        CASE
            WHEN product_type_name = 'vmi'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS vmi_premium,
    SUM(
        CASE
            WHEN product_type_name = 'cmi_solo'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS cmi_premium,
    CASE 
        WHEN (SUM(
                CASE
                    WHEN product_type_name = 'vmi'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0 
            OR SUM(
                CASE
                    WHEN product_type_name = 'cmi_solo'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0) THEN 'Yes'
        ELSE 'No' 
    END AS is_active_credit
FROM th_datawarehouse.fd_sale_all_product_unified_view sale 
LEFT JOIN affiliates ON sale.affiliate_id = affiliates.affiliate_id
JOIN vouch_db.profiles_user users ON users.id = affiliates.user_id
JOIN th_datawarehouse.dd_affiliate_bm_mapping map ON affiliates.affiliate_id = map.affiliate_id
JOIN th_datawarehouse.dd_affiliate aff ON sale.affiliate_id = aff.affiliate_id
JOIN vouch_db.profiles_credit credit ON aff.affiliate_id = credit.affiliate_id
WHERE 
    credit.created_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    ) 
    AND map.assigned_bm IN ('BM_TRON_INT')
GROUP BY 1, 2, 3, 4, 5
ORDER BY account_type, agent_name;


Title: BM_Papar-New recruit with credit limit - RDT
SQL: With affiliates AS (
    SELECT affiliate_id, 
           agent_code,
           CASE 
               WHEN account_type IN ('at_inspectiongarage', 'inspection_garage') THEN 'inspection_garage'
               WHEN account_type IN ('Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') THEN 'mlm_agent'
               WHEN account_type IS NULL THEN 'direct_agent'
               ELSE account_type 
           END AS account_type_transformed,
           user_id 
    FROM th_datawarehouse.dd_affiliate 
)
SELECT 
    affiliates.agent_code,
    users.fullname AS agent_name,
    account_type_transformed AS account_type,
    to_char(credit.created_at, 'MM/YYYY') AS credit_date,
    credit.limit as cr_limit,
    SUM(
        CASE
            WHEN product_type_name = 'vmi'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS vmi_premium,
    SUM(
        CASE
            WHEN product_type_name = 'cmi_solo'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS cmi_premium,
    CASE 
        WHEN (SUM(
                CASE
                    WHEN product_type_name = 'vmi'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0 
            OR SUM(
                CASE
                    WHEN product_type_name = 'cmi_solo'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0) THEN 'Yes'
        ELSE 'No' 
    END AS is_active_credit
FROM th_datawarehouse.fd_sale_all_product_unified_view sale 
LEFT JOIN affiliates ON sale.affiliate_id = affiliates.affiliate_id
JOIN vouch_db.profiles_user users ON users.id = affiliates.user_id
JOIN th_datawarehouse.dd_affiliate_bm_mapping map ON affiliates.affiliate_id = map.affiliate_id
JOIN th_datawarehouse.dd_affiliate aff ON sale.affiliate_id = aff.affiliate_id
JOIN vouch_db.profiles_credit credit ON aff.affiliate_id = credit.affiliate_id
WHERE 
    credit.created_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    ) 
    AND map.assigned_bm IN ('bm_papar_int','BM_Papar')
GROUP BY 1, 2, 3, 4, 5
ORDER BY account_type, agent_name;


Title: BM_Tum-New recruit with credit limit - RDT
SQL: With affiliates AS (
    SELECT affiliate_id, 
           agent_code,
           CASE 
               WHEN account_type IN ('at_inspectiongarage', 'inspection_garage') THEN 'inspection_garage'
               WHEN account_type IN ('Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') THEN 'mlm_agent'
               WHEN account_type IS NULL THEN 'direct_agent'
               ELSE account_type 
           END AS account_type_transformed,
           user_id 
    FROM th_datawarehouse.dd_affiliate 
)
SELECT 
    affiliates.agent_code,
    users.fullname AS agent_name,
    account_type_transformed AS account_type,
    to_char(credit.created_at, 'MM/YYYY') AS credit_date,
    credit.limit as cr_limit,
    SUM(
        CASE
            WHEN product_type_name = 'vmi'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS vmi_premium,
    SUM(
        CASE
            WHEN product_type_name = 'cmi_solo'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS cmi_premium,
    CASE 
        WHEN (SUM(
                CASE
                    WHEN product_type_name = 'vmi'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0 
            OR SUM(
                CASE
                    WHEN product_type_name = 'cmi_solo'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0) THEN 'Yes'
        ELSE 'No' 
    END AS is_active_credit
FROM th_datawarehouse.fd_sale_all_product_unified_view sale 
LEFT JOIN affiliates ON sale.affiliate_id = affiliates.affiliate_id
JOIN vouch_db.profiles_user users ON users.id = affiliates.user_id
JOIN th_datawarehouse.dd_affiliate_bm_mapping map ON affiliates.affiliate_id = map.affiliate_id
JOIN th_datawarehouse.dd_affiliate aff ON sale.affiliate_id = aff.affiliate_id
JOIN vouch_db.profiles_credit credit ON aff.affiliate_id = credit.affiliate_id
WHERE 
    credit.created_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    ) 
    AND map.assigned_bm IN ('bm_tum','BM_TUM_INT')
GROUP BY 1, 2, 3, 4, 5
ORDER BY account_type, agent_name;


Title: BM_Arm-New recruit with credit limit - RDT
SQL: With affiliates AS (
    SELECT affiliate_id, 
           agent_code,
           CASE 
               WHEN account_type IN ('at_inspectiongarage', 'inspection_garage') THEN 'inspection_garage'
               WHEN account_type IN ('Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') THEN 'mlm_agent'
               WHEN account_type IS NULL THEN 'direct_agent'
               ELSE account_type 
           END AS account_type_transformed,
           user_id 
    FROM th_datawarehouse.dd_affiliate 
)
SELECT 
    affiliates.agent_code,
    users.fullname AS agent_name,
    account_type_transformed AS account_type,
    to_char(credit.created_at, 'MM/YYYY') AS credit_date,
    credit.limit as cr_limit,
    SUM(
        CASE
            WHEN product_type_name = 'vmi'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS vmi_premium,
    SUM(
        CASE
            WHEN product_type_name = 'cmi_solo'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS cmi_premium,
    CASE 
        WHEN (SUM(
                CASE
                    WHEN product_type_name = 'vmi'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0 
            OR SUM(
                CASE
                    WHEN product_type_name = 'cmi_solo'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0) THEN 'Yes'
        ELSE 'No' 
    END AS is_active_credit
FROM th_datawarehouse.fd_sale_all_product_unified_view sale 
LEFT JOIN affiliates ON sale.affiliate_id = affiliates.affiliate_id
JOIN vouch_db.profiles_user users ON users.id = affiliates.user_id
JOIN th_datawarehouse.dd_affiliate_bm_mapping map ON affiliates.affiliate_id = map.affiliate_id
JOIN th_datawarehouse.dd_affiliate aff ON sale.affiliate_id = aff.affiliate_id
JOIN vouch_db.profiles_credit credit ON aff.affiliate_id = credit.affiliate_id
WHERE 
    credit.created_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    ) 
    AND map.assigned_bm IN ('BM_ARM_INT')
GROUP BY 1, 2, 3, 4, 5
ORDER BY account_type, agent_name;


Title: BM_Tae-New recruit with credit limit - RDT
SQL: With affiliates AS (
    SELECT affiliate_id, 
           agent_code,
           CASE 
               WHEN account_type IN ('at_inspectiongarage', 'inspection_garage') THEN 'inspection_garage'
               WHEN account_type IN ('Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') THEN 'mlm_agent'
               WHEN account_type IS NULL THEN 'direct_agent'
               ELSE account_type 
           END AS account_type_transformed,
           user_id 
    FROM th_datawarehouse.dd_affiliate 
)
SELECT 
    affiliates.agent_code,
    users.fullname AS agent_name,
    account_type_transformed AS account_type,
    to_char(credit.created_at, 'MM/YYYY') AS credit_date,
    credit.limit as cr_limit,
    SUM(
        CASE
            WHEN product_type_name = 'vmi'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS vmi_premium,
    SUM(
        CASE
            WHEN product_type_name = 'cmi_solo'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS cmi_premium,
    CASE 
        WHEN (SUM(
                CASE
                    WHEN product_type_name = 'vmi'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0 
            OR SUM(
                CASE
                    WHEN product_type_name = 'cmi_solo'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0) THEN 'Yes'
        ELSE 'No' 
    END AS is_active_credit
FROM th_datawarehouse.fd_sale_all_product_unified_view sale 
LEFT JOIN affiliates ON sale.affiliate_id = affiliates.affiliate_id
JOIN vouch_db.profiles_user users ON users.id = affiliates.user_id
JOIN th_datawarehouse.dd_affiliate_bm_mapping map ON affiliates.affiliate_id = map.affiliate_id
JOIN th_datawarehouse.dd_affiliate aff ON sale.affiliate_id = aff.affiliate_id
JOIN vouch_db.profiles_credit credit ON aff.affiliate_id = credit.affiliate_id
WHERE 
    credit.created_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    ) 
    AND map.assigned_bm IN ('bm_tae','bm_tae_int')
GROUP BY 1, 2, 3, 4, 5
ORDER BY account_type, agent_name;


Title: BM_Nook-New recruit with credit limit - RDT
SQL: With affiliates AS (
    SELECT affiliate_id, 
           agent_code,
           CASE 
               WHEN account_type IN ('at_inspectiongarage', 'inspection_garage') THEN 'inspection_garage'
               WHEN account_type IN ('Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') THEN 'mlm_agent'
               WHEN account_type IS NULL THEN 'direct_agent'
               ELSE account_type 
           END AS account_type_transformed,
           user_id 
    FROM th_datawarehouse.dd_affiliate 
)
SELECT 
    affiliates.agent_code,
    users.fullname AS agent_name,
    account_type_transformed AS account_type,
    to_char(credit.created_at, 'MM/YYYY') AS credit_date,
    credit.limit as cr_limit,
    SUM(
        CASE
            WHEN product_type_name = 'vmi'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS vmi_premium,
    SUM(
        CASE
            WHEN product_type_name = 'cmi_solo'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS cmi_premium,
    CASE 
        WHEN (SUM(
                CASE
                    WHEN product_type_name = 'vmi'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0 
            OR SUM(
                CASE
                    WHEN product_type_name = 'cmi_solo'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0) THEN 'Yes'
        ELSE 'No' 
    END AS is_active_credit
FROM th_datawarehouse.fd_sale_all_product_unified_view sale 
LEFT JOIN affiliates ON sale.affiliate_id = affiliates.affiliate_id
JOIN vouch_db.profiles_user users ON users.id = affiliates.user_id
JOIN th_datawarehouse.dd_affiliate_bm_mapping map ON affiliates.affiliate_id = map.affiliate_id
JOIN th_datawarehouse.dd_affiliate aff ON sale.affiliate_id = aff.affiliate_id
JOIN vouch_db.profiles_credit credit ON aff.affiliate_id = credit.affiliate_id
WHERE 
    credit.created_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    ) 
    AND map.assigned_bm IN ('BM_NOOK_INT')
GROUP BY 1, 2, 3, 4, 5
ORDER BY account_type, agent_name;


Title: BM_Kai-New recruit with credit limit - RDT
SQL: With affiliates AS (
    SELECT affiliate_id, 
           agent_code,
           CASE 
               WHEN account_type IN ('at_inspectiongarage', 'inspection_garage') THEN 'inspection_garage'
               WHEN account_type IN ('Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') THEN 'mlm_agent'
               WHEN account_type IS NULL THEN 'direct_agent'
               ELSE account_type 
           END AS account_type_transformed,
           user_id 
    FROM th_datawarehouse.dd_affiliate 
)
SELECT 
    affiliates.agent_code,
    users.fullname AS agent_name,
    account_type_transformed AS account_type,
    to_char(credit.created_at, 'MM/YYYY') AS credit_date,
    credit.limit as cr_limit,
    SUM(
        CASE
            WHEN product_type_name = 'vmi'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS vmi_premium,
    SUM(
        CASE
            WHEN product_type_name = 'cmi_solo'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS cmi_premium,
    CASE 
        WHEN (SUM(
                CASE
                    WHEN product_type_name = 'vmi'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0 
            OR SUM(
                CASE
                    WHEN product_type_name = 'cmi_solo'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0) THEN 'Yes'
        ELSE 'No' 
    END AS is_active_credit
FROM th_datawarehouse.fd_sale_all_product_unified_view sale 
LEFT JOIN affiliates ON sale.affiliate_id = affiliates.affiliate_id
JOIN vouch_db.profiles_user users ON users.id = affiliates.user_id
JOIN th_datawarehouse.dd_affiliate_bm_mapping map ON affiliates.affiliate_id = map.affiliate_id
JOIN th_datawarehouse.dd_affiliate aff ON sale.affiliate_id = aff.affiliate_id
JOIN vouch_db.profiles_credit credit ON aff.affiliate_id = credit.affiliate_id
WHERE 
    credit.created_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    ) 
    AND map.assigned_bm IN ('BM_KAI_INT')
GROUP BY 1, 2, 3, 4, 5
ORDER BY account_type, agent_name;


Title: BM_Kanha-New recruit with credit limit - RDT
SQL: With affiliates AS (
    SELECT affiliate_id, 
           agent_code,
           CASE 
               WHEN account_type IN ('at_inspectiongarage', 'inspection_garage') THEN 'inspection_garage'
               WHEN account_type IN ('Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') THEN 'mlm_agent'
               WHEN account_type IS NULL THEN 'direct_agent'
               ELSE account_type 
           END AS account_type_transformed,
           user_id 
    FROM th_datawarehouse.dd_affiliate 
)
SELECT 
    affiliates.agent_code,
    users.fullname AS agent_name,
    account_type_transformed AS account_type,
    to_char(credit.created_at, 'MM/YYYY') AS credit_date,
    credit.limit as cr_limit,
    SUM(
        CASE
            WHEN product_type_name = 'vmi'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS vmi_premium,
    SUM(
        CASE
            WHEN product_type_name = 'cmi_solo'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS cmi_premium,
    CASE 
        WHEN (SUM(
                CASE
                    WHEN product_type_name = 'vmi'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0 
            OR SUM(
                CASE
                    WHEN product_type_name = 'cmi_solo'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0) THEN 'Yes'
        ELSE 'No' 
    END AS is_active_credit
FROM th_datawarehouse.fd_sale_all_product_unified_view sale 
LEFT JOIN affiliates ON sale.affiliate_id = affiliates.affiliate_id
JOIN vouch_db.profiles_user users ON users.id = affiliates.user_id
JOIN th_datawarehouse.dd_affiliate_bm_mapping map ON affiliates.affiliate_id = map.affiliate_id
JOIN th_datawarehouse.dd_affiliate aff ON sale.affiliate_id = aff.affiliate_id
JOIN vouch_db.profiles_credit credit ON aff.affiliate_id = credit.affiliate_id
WHERE 
    credit.created_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    ) 
    AND map.assigned_bm IN ('BM_Kanha','BM_KANHA_INT')
GROUP BY 1, 2, 3, 4, 5
ORDER BY account_type, agent_name;


Title: BM_Mai-New recruit with credit limit - RDT
SQL: With affiliates AS (
    SELECT affiliate_id, 
           agent_code,
           CASE 
               WHEN account_type IN ('at_inspectiongarage', 'inspection_garage') THEN 'inspection_garage'
               WHEN account_type IN ('Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') THEN 'mlm_agent'
               WHEN account_type IS NULL THEN 'direct_agent'
               ELSE account_type 
           END AS account_type_transformed,
           user_id 
    FROM th_datawarehouse.dd_affiliate 
)
SELECT 
    affiliates.agent_code,
    users.fullname AS agent_name,
    account_type_transformed AS account_type,
    to_char(credit.created_at, 'MM/YYYY') AS credit_date,
    credit.limit as cr_limit,
    SUM(
        CASE
            WHEN product_type_name = 'vmi'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS vmi_premium,
    SUM(
        CASE
            WHEN product_type_name = 'cmi_solo'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS cmi_premium,
    CASE 
        WHEN (SUM(
                CASE
                    WHEN product_type_name = 'vmi'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0 
            OR SUM(
                CASE
                    WHEN product_type_name = 'cmi_solo'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0) THEN 'Yes'
        ELSE 'No' 
    END AS is_active_credit
FROM th_datawarehouse.fd_sale_all_product_unified_view sale 
LEFT JOIN affiliates ON sale.affiliate_id = affiliates.affiliate_id
JOIN vouch_db.profiles_user users ON users.id = affiliates.user_id
JOIN th_datawarehouse.dd_affiliate_bm_mapping map ON affiliates.affiliate_id = map.affiliate_id
JOIN th_datawarehouse.dd_affiliate aff ON sale.affiliate_id = aff.affiliate_id
JOIN vouch_db.profiles_credit credit ON aff.affiliate_id = credit.affiliate_id
WHERE 
    credit.created_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    ) 
    AND map.assigned_bm IN ('BM_MAI','BM_MAI_INT')
GROUP BY 1, 2, 3, 4, 5
ORDER BY account_type, agent_name;


Title: BM_Kowit-New recruit with credit limit - RDT
SQL: With affiliates AS (
    SELECT affiliate_id, 
           agent_code,
           CASE 
               WHEN account_type IN ('at_inspectiongarage', 'inspection_garage') THEN 'inspection_garage'
               WHEN account_type IN ('Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') THEN 'mlm_agent'
               WHEN account_type IS NULL THEN 'direct_agent'
               ELSE account_type 
           END AS account_type_transformed,
           user_id 
    FROM th_datawarehouse.dd_affiliate 
)
SELECT 
    affiliates.agent_code,
    users.fullname AS agent_name,
    account_type_transformed AS account_type,
    to_char(credit.created_at, 'MM/YYYY') AS credit_date,
    credit.limit as cr_limit,
    SUM(
        CASE
            WHEN product_type_name = 'vmi'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS vmi_premium,
    SUM(
        CASE
            WHEN product_type_name = 'cmi_solo'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS cmi_premium,
    CASE 
        WHEN (SUM(
                CASE
                    WHEN product_type_name = 'vmi'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0 
            OR SUM(
                CASE
                    WHEN product_type_name = 'cmi_solo'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0) THEN 'Yes'
        ELSE 'No' 
    END AS is_active_credit
FROM th_datawarehouse.fd_sale_all_product_unified_view sale 
LEFT JOIN affiliates ON sale.affiliate_id = affiliates.affiliate_id
JOIN vouch_db.profiles_user users ON users.id = affiliates.user_id
JOIN th_datawarehouse.dd_affiliate_bm_mapping map ON affiliates.affiliate_id = map.affiliate_id
JOIN th_datawarehouse.dd_affiliate aff ON sale.affiliate_id = aff.affiliate_id
JOIN vouch_db.profiles_credit credit ON aff.affiliate_id = credit.affiliate_id
WHERE 
    credit.created_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    ) 
    AND map.assigned_bm IN ('BM_KOWIT_EX','bm_kowit')
GROUP BY 1, 2, 3, 4, 5
ORDER BY account_type, agent_name;


Title: BM_Phueng-New recruit with credit limit - RDT
SQL: With affiliates AS (
    SELECT affiliate_id, 
           agent_code,
           CASE 
               WHEN account_type IN ('at_inspectiongarage', 'inspection_garage') THEN 'inspection_garage'
               WHEN account_type IN ('Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') THEN 'mlm_agent'
               WHEN account_type IS NULL THEN 'direct_agent'
               ELSE account_type 
           END AS account_type_transformed,
           user_id 
    FROM th_datawarehouse.dd_affiliate 
)
SELECT 
    affiliates.agent_code,
    users.fullname AS agent_name,
    account_type_transformed AS account_type,
    to_char(credit.created_at, 'MM/YYYY') AS credit_date,
    credit.limit as cr_limit,
    SUM(
        CASE
            WHEN product_type_name = 'vmi'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS vmi_premium,
    SUM(
        CASE
            WHEN product_type_name = 'cmi_solo'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS cmi_premium,
    CASE 
        WHEN (SUM(
                CASE
                    WHEN product_type_name = 'vmi'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0 
            OR SUM(
                CASE
                    WHEN product_type_name = 'cmi_solo'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0) THEN 'Yes'
        ELSE 'No' 
    END AS is_active_credit
FROM th_datawarehouse.fd_sale_all_product_unified_view sale 
LEFT JOIN affiliates ON sale.affiliate_id = affiliates.affiliate_id
JOIN vouch_db.profiles_user users ON users.id = affiliates.user_id
JOIN th_datawarehouse.dd_affiliate_bm_mapping map ON affiliates.affiliate_id = map.affiliate_id
JOIN th_datawarehouse.dd_affiliate aff ON sale.affiliate_id = aff.affiliate_id
JOIN vouch_db.profiles_credit credit ON aff.affiliate_id = credit.affiliate_id
WHERE 
    credit.created_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    ) 
    AND map.assigned_bm IN ('bm_phueng','BM_PHUENG_INT')
GROUP BY 1, 2, 3, 4, 5
ORDER BY account_type, agent_name;


Title: BM_Key-New recruit with credit limit - RDT
SQL: With affiliates AS (
    SELECT affiliate_id, 
           agent_code,
           CASE 
               WHEN account_type IN ('at_inspectiongarage', 'inspection_garage') THEN 'inspection_garage'
               WHEN account_type IN ('Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') THEN 'mlm_agent'
               WHEN account_type IS NULL THEN 'direct_agent'
               ELSE account_type 
           END AS account_type_transformed,
           user_id 
    FROM th_datawarehouse.dd_affiliate 
)
SELECT 
    affiliates.agent_code,
    users.fullname AS agent_name,
    account_type_transformed AS account_type,
    to_char(credit.created_at, 'MM/YYYY') AS credit_date,
    credit.limit as cr_limit,
    SUM(
        CASE
            WHEN product_type_name = 'vmi'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS vmi_premium,
    SUM(
        CASE
            WHEN product_type_name = 'cmi_solo'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS cmi_premium,
    CASE 
        WHEN (SUM(
                CASE
                    WHEN product_type_name = 'vmi'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0 
            OR SUM(
                CASE
                    WHEN product_type_name = 'cmi_solo'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0) THEN 'Yes'
        ELSE 'No' 
    END AS is_active_credit
FROM th_datawarehouse.fd_sale_all_product_unified_view sale 
LEFT JOIN affiliates ON sale.affiliate_id = affiliates.affiliate_id
JOIN vouch_db.profiles_user users ON users.id = affiliates.user_id
JOIN th_datawarehouse.dd_affiliate_bm_mapping map ON affiliates.affiliate_id = map.affiliate_id
JOIN th_datawarehouse.dd_affiliate aff ON sale.affiliate_id = aff.affiliate_id
JOIN vouch_db.profiles_credit credit ON aff.affiliate_id = credit.affiliate_id
    And credit.created_at::date between map.valid_from and map.valid_till
    AND credit.created_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
WHERE 
    credit.created_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    ) 
    AND map.assigned_bm IN ('BM_KEY_INT','BM_KEY')
GROUP BY 1, 2, 3, 4, 5
ORDER BY account_type, agent_name;


Title: BM_Nook
SQL: WITH affiliates AS (
    SELECT affiliate_id, 
        CASE 
            WHEN account_type IN ('at_inspectiongarage', 'inspection_garage') THEN 'inspection_garage'
            WHEN account_type IN ('Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') THEN 'mlm_agent'
            WHEN account_type IS NULL THEN 'direct_agent'
            ELSE account_type 
        END AS account_type_transformed
    FROM th_datawarehouse.dd_affiliate 
), 
total_affiliates AS (
    SELECT 
        months,
        account_type, 
        assigned_bm,
        SUM(affiliates) OVER (
        PARTITION BY assigned_bm, account_type
        ORDER BY months
     ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
) total_recruits
    FROM (
        SELECT
            months.months,
            months.assigned_bm,
            COALESCE(affiliates, 0) affiliates,
            months.account_type
        FROM (
            SELECT DISTINCT
                date_trunc('month', created_at::timestamp)::date months,
                assigned_bm,
                account_type.account_Type
            FROM th_datawarehouse.dd_affiliate
            CROSS JOIN (
                SELECT DISTINCT assigned_bm
                FROM th_datawarehouse.dd_affiliate_bm_mapping
            ) bm
            CROSS JOIN (
                SELECT DISTINCT account_Type
                FROM th_datawarehouse.dd_affiliate
                WHERE account_type LIKE 'at_%'
            ) account_type
        ) months
        LEFT JOIN (
            SELECT
                COUNT(DISTINCT aff_tag.affiliate_id) affiliates,
                affilaite.account_type,
                assigned_bm,
                date_trunc('month', affilaite.created_at::timestamp)::date months
            FROM th_datawarehouse.dd_affiliate affilaite
            JOIN th_datawarehouse.dd_affiliate_bm_mapping aff_tag ON affilaite.affiliate_id = aff_tag.affiliate_id
            WHERE affilaite.created_at <= '{{ Date.end }}'
            GROUP BY affilaite.account_type, months, assigned_bm
        ) agents ON agents.assigned_bm = months.assigned_bm
            AND agents.months = months.months
            AND months.account_type = agents.account_type
    ) A
),
new_recruits AS (
    SELECT
        aff_tag.affiliate_id,
        assigned_bm,
        affiliate.account_type,
        date_trunc('month', created_at::timestamp)::date months
    FROM th_datawarehouse.dd_affiliate affiliate
    JOIN th_datawarehouse.dd_affiliate_bm_mapping aff_tag ON affiliate.affiliate_id = aff_tag.affiliate_id
    WHERE created_at BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
),
sale AS (
    SELECT
        date_trunc('month', policy_sold_on_at::timestamp)::date months,
        account_type,
        aff.affiliate_id,
        SUM(premium_without_tax_amt) premium,
        product_type_name,
        map.assigned_bm
    FROM th_datawarehouse.fd_sale_all_product_unified_view sale
    JOIN th_datawarehouse.dd_affiliate aff ON aff.affiliate_id = sale.affiliate_id
    JOIN th_datawarehouse.dd_affiliate_bm_mapping map ON map.affiliate_id = aff.affiliate_id
    WHERE sale_status = 'is_sold'
        AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    GROUP BY 1, 2, 3, 5, 6
)
SELECT
    a.account_type_transformed AS account_type,
    date_trunc('month', sale.policy_sold_on_at::timestamp)::date sold_on_months,
    SUM(sale.premium_without_tax_amt) premium
FROM th_datawarehouse.fd_sale_all_product_unified_view sale
JOIN th_datawarehouse.dd_affiliate aff ON aff.affiliate_id = sale.affiliate_id
JOIN th_datawarehouse.dd_affiliate_bm_mapping map ON aff.affiliate_id = map.affiliate_id
    AND sale.policy_sold_on_at::date BETWEEN map.valid_from AND map.valid_till
LEFT JOIN affiliates a ON sale.affiliate_id = a.affiliate_id
    AND sale.policy_sold_on_at::date BETWEEN map.valid_from AND map.valid_till
    AND a.account_type_transformed IS NOT NULL
WHERE sale.sale_status = 'is_sold'
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR a.account_type_transformed = '{{ Account Type }}'
    )
    AND (
        '{{ Policy Type }}' = 'All' 
        OR CASE 
            WHEN sale.product_type_name = 'vmi' THEN 'vmi'
            WHEN sale.product_type_name = 'cmi_solo' THEN 'cmi_solo'
            WHEN sale.product_type_name = 'covid' THEN 'covid'
            WHEN sale.product_type_name = 'dengue' THEN 'dengue'
            WHEN sale.product_type_name = 'pa' THEN 'pa'
            ELSE 'others' 
        END = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('BM_NOOK_INT')
GROUP BY 1, 2


Title: BM_Yos-New recruit with credit limit - RDT
SQL: With affiliates AS (
    SELECT affiliate_id, 
           agent_code,
           CASE 
               WHEN account_type IN ('at_inspectiongarage', 'inspection_garage') THEN 'inspection_garage'
               WHEN account_type IN ('Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') THEN 'mlm_agent'
               WHEN account_type IS NULL THEN 'direct_agent'
               ELSE account_type 
           END AS account_type_transformed,
           user_id 
    FROM th_datawarehouse.dd_affiliate 
)
SELECT 
    affiliates.agent_code,
    users.fullname AS agent_name,
    account_type_transformed AS account_type,
    to_char(credit.created_at, 'MM/YYYY') AS credit_date,
    credit.limit as cr_limit,
    SUM(
        CASE
            WHEN product_type_name = 'vmi'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS vmi_premium,
    SUM(
        CASE
            WHEN product_type_name = 'cmi_solo'
            AND policy_sold_on_at BETWEEN '{{ Date.start }}'
            AND '{{ Date.end }}' THEN premium_after_tax_amt
        END
    ) AS cmi_premium,
    CASE 
        WHEN (SUM(
                CASE
                    WHEN product_type_name = 'vmi'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0 
            OR SUM(
                CASE
                    WHEN product_type_name = 'cmi_solo'
                    AND policy_sold_on_at BETWEEN '{{ Date.start }}'
                    AND '{{ Date.end }}' THEN 1
                END
            ) > 0) THEN 'Yes'
        ELSE 'No' 
    END AS is_active_credit
FROM th_datawarehouse.fd_sale_all_product_unified_view sale 
LEFT JOIN affiliates ON sale.affiliate_id = affiliates.affiliate_id
JOIN vouch_db.profiles_user users ON users.id = affiliates.user_id
JOIN th_datawarehouse.dd_affiliate_bm_mapping map ON affiliates.affiliate_id = map.affiliate_id
JOIN th_datawarehouse.dd_affiliate aff ON sale.affiliate_id = aff.affiliate_id
JOIN vouch_db.profiles_credit credit ON aff.affiliate_id = credit.affiliate_id
WHERE 
    credit.created_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    ) 
    AND map.assigned_bm IN ('BM_YOS_INT','BM_Yos')
GROUP BY 1, 2, 3, 4, 5
ORDER BY account_type, agent_name;


Title: BM-Bel-Leader Break Down RDT
SQL: with affiliates as (
    select affiliate_id, agent_code,
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed,
        user_id 
    from th_datawarehouse.dd_affiliate 
)
select 
    agent_code,
    users.fullname agent_name,
    account_type_transformed as account_type,
    case 
        when sale.product_type_name = 'vmi' then 'vmi'
        when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    date_trunc('month', policy_sold_on_at::timestamp)::date AS sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join vouch_db.profiles_user users on users.id = affiliates.user_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
where 
    sale.sale_status = 'is_sold'
    and sale.policy_sold_on_at::date between '{{ Date.start }}' and '{{ Date.end }}'
    and (
        '{{ Account Type }}' = 'All' 
        or account_type_transformed = '{{ Account Type }}'
    )
    and (
        '{{ Policy Type }}' = 'All' 
        or case 
            when sale.product_type_name = 'vmi' then 'vmi'
            when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
            when sale.product_type_name = 'covid' then 'covid'
            when sale.product_type_name = 'dengue' then 'dengue'
            when sale.product_type_name = 'pa' then 'pa'
            else 'others' 
        end = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('BM_BEL_INT')
group by 1, 2, 3, 4, 5 
order by 2, 1


Title: OCR output comparison [Raw Data]
SQL: select ocr.id, 
fqq.created_at quote_created_at,
lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'vehicle_brand')) make_ocr, make.name make_quotation, 
lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'vehicle_model')) model_ocr, mm.name model_name, 
lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'vehicle_displacement')) cc_ocr, cc.name cc_quotation, 
lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'vehicle_model_year')) year_ocr, fqq.year year_quotation, 
lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'vehicle_license_province')) registration_province_ocr, car.registration_province, 
lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'owner_1_title_th')) salutation_ocr, fqq.client_title salutation_quotation, 
lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'owner_1_first_name_th')) first_name_ocr, fqq.client_first_name first_name_quotation, 
lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'owner_1_last_name_th')) last_name_ocr, fqq.client_last_name last_name_quotation, 
lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'vehicle_type')) vehicle_code_ocr, fqq.vmi_car_code vegicle_code_quotation, 
lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'vehicle_license_number')) vehicle_number_ocr, fq.vehicle_number vehicle_number_quotation, 
upper(lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'vehicle_chassis_number'))) chassis_number_ocr, fq.chassis_number chassis_number_quotation, 
upper(lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'vehicle_engine_number'))) engine_number_ocr, car.engine_number engine_number_quotation, 
upper(lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'vehicle_car_weight'))) vehicle_weight_ocr, car.vehicle_weight vehicle_weight_quotation, 
upper(lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'vehicle_color'))) vehicle_color_ocr, car.color vehicle_color_quotation, 
upper(lower(JSON_EXTRACT_PATH_TEXT(vendor_response, 'result', 'vehicle_register_date'))) registration_date_ocr, car.registration_date registration_date_quotation
from vouch_db.utils_ocrdata ocr
join vouch_db.utils_ocrdatalinkage link on link.ocr_data_id = ocr.id 
join vouch_db.utils_fairdeequotationquery fqq on fqq.id = link.object_id
join vouch_db.masterdata_cc cc on cc.id = fqq.cc_id 
join vouch_db.masterdata_makemodel mm on mm.id = cc.make_model_id
join vouch_db.masterdata_make make on make.id = mm.make_id
left join vouch_db.utils_fairdeequotation fq on fq.quotation_query_id = fqq.id
left join vouch_db.profiles_car car on car.id = fq.car_id
where ocr.file_type = 'car_registration'
and fqq.created_at::date between '{{dt.start}}' and '{{dt.end}}'


-- select * from  vouch_db.utils_ocrdata where id = 2	


Title: BM-Ball-Leader Break Down RDT
SQL: with affiliates as (
    select affiliate_id, agent_code,
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed,
        user_id 
    from th_datawarehouse.dd_affiliate 
)
select 
    agent_code,
    users.fullname agent_name,
    account_type_transformed as account_type,
    case 
        when sale.product_type_name = 'vmi' then 'vmi'
        when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    date_trunc('month', policy_sold_on_at::timestamp)::date AS sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join vouch_db.profiles_user users on users.id = affiliates.user_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
where 
    sale.sale_status = 'is_sold'
    and sale.policy_sold_on_at::date between '{{ Date.start }}' and '{{ Date.end }}'
    and (
        '{{ Account Type }}' = 'All' 
        or account_type_transformed = '{{ Account Type }}'
    )
    and (
        '{{ Policy Type }}' = 'All' 
        or case 
            when sale.product_type_name = 'vmi' then 'vmi'
            when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
            when sale.product_type_name = 'covid' then 'covid'
            when sale.product_type_name = 'dengue' then 'dengue'
            when sale.product_type_name = 'pa' then 'pa'
            else 'others' 
        end = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('bm_ball','BM_BALL_INT')
group by 1, 2, 3, 4, 5 
order by 2, 1


Title: BM-Aey-Leader Break Down RDT
SQL: with affiliates as (
    select affiliate_id, agent_code,
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed,
        user_id 
    from th_datawarehouse.dd_affiliate 
)
select 
    agent_code,
    users.fullname agent_name,
    account_type_transformed as account_type,
    case 
        when sale.product_type_name = 'vmi' then 'vmi'
        when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    date_trunc('month', policy_sold_on_at::timestamp)::date AS sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join vouch_db.profiles_user users on users.id = affiliates.user_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
where 
    sale.sale_status = 'is_sold'
    and sale.policy_sold_on_at::date between '{{ Date.start }}' and '{{ Date.end }}'
    and (
        '{{ Account Type }}' = 'All' 
        or account_type_transformed = '{{ Account Type }}'
    )
    and (
        '{{ Policy Type }}' = 'All' 
        or case 
            when sale.product_type_name = 'vmi' then 'vmi'
            when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
            when sale.product_type_name = 'covid' then 'covid'
            when sale.product_type_name = 'dengue' then 'dengue'
            when sale.product_type_name = 'pa' then 'pa'
            else 'others' 
        end = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('BM_AEY_INT','BM_AEY_internal')
group by 1, 2, 3, 4, 5 
order by 2, 1


Title: BM-Anup-Leader Break Down RDT
SQL: with affiliates as (
    select affiliate_id, agent_code,
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed,
        user_id 
    from th_datawarehouse.dd_affiliate 
)
select 
    agent_code,
    users.fullname agent_name,
    account_type_transformed as account_type,
    case 
        when sale.product_type_name = 'vmi' then 'vmi'
        when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    date_trunc('month', policy_sold_on_at::timestamp)::date AS sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join vouch_db.profiles_user users on users.id = affiliates.user_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
where 
    sale.sale_status = 'is_sold'
    and sale.policy_sold_on_at::date between '{{ Date.start }}' and '{{ Date.end }}'
    and (
        '{{ Account Type }}' = 'All' 
        or account_type_transformed = '{{ Account Type }}'
    )
    and (
        '{{ Policy Type }}' = 'All' 
        or case 
            when sale.product_type_name = 'vmi' then 'vmi'
            when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
            when sale.product_type_name = 'covid' then 'covid'
            when sale.product_type_name = 'dengue' then 'dengue'
            when sale.product_type_name = 'pa' then 'pa'
            else 'others' 
        end = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('BM_ANUP_INT')
group by 1, 2, 3, 4, 5 
order by 2, 1


Title: BM-Pom-Leader Break Down RDT
SQL: with affiliates as (
    select affiliate_id, agent_code,
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed,
        user_id 
    from th_datawarehouse.dd_affiliate 
)
select 
    agent_code,
    users.fullname agent_name,
    account_type_transformed as account_type,
    case 
        when sale.product_type_name = 'vmi' then 'vmi'
        when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    date_trunc('month', policy_sold_on_at::timestamp)::date AS sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join vouch_db.profiles_user users on users.id = affiliates.user_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
where 
    sale.sale_status = 'is_sold'
    and sale.policy_sold_on_at::date between '{{ Date.start }}' and '{{ Date.end }}'
    and (
        '{{ Account Type }}' = 'All' 
        or account_type_transformed = '{{ Account Type }}'
    )
    and (
        '{{ Policy Type }}' = 'All' 
        or case 
            when sale.product_type_name = 'vmi' then 'vmi'
            when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
            when sale.product_type_name = 'covid' then 'covid'
            when sale.product_type_name = 'dengue' then 'dengue'
            when sale.product_type_name = 'pa' then 'pa'
            else 'others' 
        end = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('BM_POM_INT')
group by 1, 2, 3, 4, 5 
order by 2, 1


Title: BM-Tron-Leader Break Down RDT
SQL: with affiliates as (
    select affiliate_id, agent_code,
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed,
        user_id 
    from th_datawarehouse.dd_affiliate 
)
select 
    agent_code,
    users.fullname agent_name,
    account_type_transformed as account_type,
    case 
        when sale.product_type_name = 'vmi' then 'vmi'
        when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    date_trunc('month', policy_sold_on_at::timestamp)::date AS sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join vouch_db.profiles_user users on users.id = affiliates.user_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
where 
    sale.sale_status = 'is_sold'
    and sale.policy_sold_on_at::date between '{{ Date.start }}' and '{{ Date.end }}'
    and (
        '{{ Account Type }}' = 'All' 
        or account_type_transformed = '{{ Account Type }}'
    )
    and (
        '{{ Policy Type }}' = 'All' 
        or case 
            when sale.product_type_name = 'vmi' then 'vmi'
            when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
            when sale.product_type_name = 'covid' then 'covid'
            when sale.product_type_name = 'dengue' then 'dengue'
            when sale.product_type_name = 'pa' then 'pa'
            else 'others' 
        end = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('BM_TRON_INT')
group by 1, 2, 3, 4, 5 
order by 2, 1


Title: BM-Papar-Leader Break Down RDT
SQL: with affiliates as (
    select affiliate_id, agent_code,
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed,
        user_id 
    from th_datawarehouse.dd_affiliate 
)
select 
    agent_code,
    users.fullname agent_name,
    account_type_transformed as account_type,
    case 
        when sale.product_type_name = 'vmi' then 'vmi'
        when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    date_trunc('month', policy_sold_on_at::timestamp)::date AS sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join vouch_db.profiles_user users on users.id = affiliates.user_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
where 
    sale.sale_status = 'is_sold'
    and sale.policy_sold_on_at::date between '{{ Date.start }}' and '{{ Date.end }}'
    and (
        '{{ Account Type }}' = 'All' 
        or account_type_transformed = '{{ Account Type }}'
    )
    and (
        '{{ Policy Type }}' = 'All' 
        or case 
            when sale.product_type_name = 'vmi' then 'vmi'
            when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
            when sale.product_type_name = 'covid' then 'covid'
            when sale.product_type_name = 'dengue' then 'dengue'
            when sale.product_type_name = 'pa' then 'pa'
            else 'others' 
        end = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('bm_papar_int','BM_Papar')
group by 1, 2, 3, 4, 5 
order by 2, 1


Title: BM-Tum-Leader Break Down RDT
SQL: with affiliates as (
    select affiliate_id, agent_code,
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed,
        user_id 
    from th_datawarehouse.dd_affiliate 
)
select 
    agent_code,
    users.fullname agent_name,
    account_type_transformed as account_type,
    case 
        when sale.product_type_name = 'vmi' then 'vmi'
        when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    date_trunc('month', policy_sold_on_at::timestamp)::date AS sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join vouch_db.profiles_user users on users.id = affiliates.user_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
where 
    sale.sale_status = 'is_sold'
    and sale.policy_sold_on_at::date between '{{ Date.start }}' and '{{ Date.end }}'
    and (
        '{{ Account Type }}' = 'All' 
        or account_type_transformed = '{{ Account Type }}'
    )
    and (
        '{{ Policy Type }}' = 'All' 
        or case 
            when sale.product_type_name = 'vmi' then 'vmi'
            when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
            when sale.product_type_name = 'covid' then 'covid'
            when sale.product_type_name = 'dengue' then 'dengue'
            when sale.product_type_name = 'pa' then 'pa'
            else 'others' 
        end = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('bm_tum','BM_TUM_INT')
group by 1, 2, 3, 4, 5 
order by 2, 1


Title: BM-Arm-Leader Break Down RDT
SQL: with affiliates as (
    select affiliate_id, agent_code,
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed,
        user_id 
    from th_datawarehouse.dd_affiliate 
)
select 
    agent_code,
    users.fullname agent_name,
    account_type_transformed as account_type,
    case 
        when sale.product_type_name = 'vmi' then 'vmi'
        when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    date_trunc('month', policy_sold_on_at::timestamp)::date AS sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join vouch_db.profiles_user users on users.id = affiliates.user_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
where 
    sale.sale_status = 'is_sold'
    and sale.policy_sold_on_at::date between '{{ Date.start }}' and '{{ Date.end }}'
    and (
        '{{ Account Type }}' = 'All' 
        or account_type_transformed = '{{ Account Type }}'
    )
    and (
        '{{ Policy Type }}' = 'All' 
        or case 
            when sale.product_type_name = 'vmi' then 'vmi'
            when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
            when sale.product_type_name = 'covid' then 'covid'
            when sale.product_type_name = 'dengue' then 'dengue'
            when sale.product_type_name = 'pa' then 'pa'
            else 'others' 
        end = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('BM_ARM_INT')
group by 1, 2, 3, 4, 5 
order by 2, 1


Title: BM-Tae-Leader Break Down RDT
SQL: with affiliates as (
    select affiliate_id, agent_code,
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed,
        user_id 
    from th_datawarehouse.dd_affiliate 
)
select 
    agent_code,
    users.fullname agent_name,
    account_type_transformed as account_type,
    case 
        when sale.product_type_name = 'vmi' then 'vmi'
        when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    date_trunc('month', policy_sold_on_at::timestamp)::date AS sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join vouch_db.profiles_user users on users.id = affiliates.user_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
where 
    sale.sale_status = 'is_sold'
    and sale.policy_sold_on_at::date between '{{ Date.start }}' and '{{ Date.end }}'
    and (
        '{{ Account Type }}' = 'All' 
        or account_type_transformed = '{{ Account Type }}'
    )
    and (
        '{{ Policy Type }}' = 'All' 
        or case 
            when sale.product_type_name = 'vmi' then 'vmi'
            when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
            when sale.product_type_name = 'covid' then 'covid'
            when sale.product_type_name = 'dengue' then 'dengue'
            when sale.product_type_name = 'pa' then 'pa'
            else 'others' 
        end = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('bm_tae','bm_tae_int')
group by 1, 2, 3, 4, 5 
order by 2, 1


Title: BM_Nook-Leader Break Down RDT
SQL: with affiliates as (
    select affiliate_id, agent_code,
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed,
        user_id 
    from th_datawarehouse.dd_affiliate 
)
select 
    agent_code,
    users.fullname agent_name,
    account_type_transformed as account_type,
    case 
        when sale.product_type_name = 'vmi' then 'vmi'
        when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    date_trunc('month', policy_sold_on_at::timestamp)::date AS sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join vouch_db.profiles_user users on users.id = affiliates.user_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
where 
    sale.sale_status = 'is_sold'
    and sale.policy_sold_on_at::date between '{{ Date.start }}' and '{{ Date.end }}'
    and (
        '{{ Account Type }}' = 'All' 
        or account_type_transformed = '{{ Account Type }}'
    )
    and (
        '{{ Policy Type }}' = 'All' 
        or case 
            when sale.product_type_name = 'vmi' then 'vmi'
            when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
            when sale.product_type_name = 'covid' then 'covid'
            when sale.product_type_name = 'dengue' then 'dengue'
            when sale.product_type_name = 'pa' then 'pa'
            else 'others' 
        end = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('BM_NOOK_INT')
group by 1, 2, 3, 4, 5 
order by 2, 1


Title: BM_Kai-Leader Break Down RDT
SQL: with affiliates as (
    select affiliate_id, agent_code,
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed,
        user_id 
    from th_datawarehouse.dd_affiliate 
)
select 
    agent_code,
    users.fullname agent_name,
    account_type_transformed as account_type,
    case 
        when sale.product_type_name = 'vmi' then 'vmi'
        when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    date_trunc('month', policy_sold_on_at::timestamp)::date AS sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join vouch_db.profiles_user users on users.id = affiliates.user_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
where 
    sale.sale_status = 'is_sold'
    and sale.policy_sold_on_at::date between '{{ Date.start }}' and '{{ Date.end }}'
    and (
        '{{ Account Type }}' = 'All' 
        or account_type_transformed = '{{ Account Type }}'
    )
    and (
        '{{ Policy Type }}' = 'All' 
        or case 
            when sale.product_type_name = 'vmi' then 'vmi'
            when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
            when sale.product_type_name = 'covid' then 'covid'
            when sale.product_type_name = 'dengue' then 'dengue'
            when sale.product_type_name = 'pa' then 'pa'
            else 'others' 
        end = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('BM_KAI_INT')
group by 1, 2, 3, 4, 5 
order by 2, 1


Title: BM_Kanha-Leader Break Down RDT
SQL: with affiliates as (
    select affiliate_id, agent_code,
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed,
        user_id 
    from th_datawarehouse.dd_affiliate 
)
select 
    agent_code,
    users.fullname agent_name,
    account_type_transformed as account_type,
    case 
        when sale.product_type_name = 'vmi' then 'vmi'
        when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    date_trunc('month', policy_sold_on_at::timestamp)::date AS sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join vouch_db.profiles_user users on users.id = affiliates.user_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
where 
    sale.sale_status = 'is_sold'
    and sale.policy_sold_on_at::date between '{{ Date.start }}' and '{{ Date.end }}'
    and (
        '{{ Account Type }}' = 'All' 
        or account_type_transformed = '{{ Account Type }}'
    )
    and (
        '{{ Policy Type }}' = 'All' 
        or case 
            when sale.product_type_name = 'vmi' then 'vmi'
            when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
            when sale.product_type_name = 'covid' then 'covid'
            when sale.product_type_name = 'dengue' then 'dengue'
            when sale.product_type_name = 'pa' then 'pa'
            else 'others' 
        end = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('BM_Kanha','BM_KANHA_INT')
group by 1, 2, 3, 4, 5 
order by 2, 1


Title: BM_Mai-Leader Break Down RDT
SQL: with affiliates as (
    select affiliate_id, agent_code,
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed,
        user_id 
    from th_datawarehouse.dd_affiliate 
)
select 
    agent_code,
    users.fullname agent_name,
    account_type_transformed as account_type,
    case 
        when sale.product_type_name = 'vmi' then 'vmi'
        when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    date_trunc('month', policy_sold_on_at::timestamp)::date AS sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join vouch_db.profiles_user users on users.id = affiliates.user_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
where 
    sale.sale_status = 'is_sold'
    and sale.policy_sold_on_at::date between '{{ Date.start }}' and '{{ Date.end }}'
    and (
        '{{ Account Type }}' = 'All' 
        or account_type_transformed = '{{ Account Type }}'
    )
    and (
        '{{ Policy Type }}' = 'All' 
        or case 
            when sale.product_type_name = 'vmi' then 'vmi'
            when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
            when sale.product_type_name = 'covid' then 'covid'
            when sale.product_type_name = 'dengue' then 'dengue'
            when sale.product_type_name = 'pa' then 'pa'
            else 'others' 
        end = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('BM_MAI','BM_MAI_INT')
group by 1, 2, 3, 4, 5 
order by 2, 1


Title: BM_Kowit-Leader Break Down RDT
SQL: with affiliates as (
    select affiliate_id, agent_code,
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed,
        user_id 
    from th_datawarehouse.dd_affiliate 
)
select 
    agent_code,
    users.fullname agent_name,
    account_type_transformed as account_type,
    case 
        when sale.product_type_name = 'vmi' then 'vmi'
        when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    date_trunc('month', policy_sold_on_at::timestamp)::date AS sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join vouch_db.profiles_user users on users.id = affiliates.user_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
where 
    sale.sale_status = 'is_sold'
    and sale.policy_sold_on_at::date between '{{ Date.start }}' and '{{ Date.end }}'
    and (
        '{{ Account Type }}' = 'All' 
        or account_type_transformed = '{{ Account Type }}'
    )
    and (
        '{{ Policy Type }}' = 'All' 
        or case 
            when sale.product_type_name = 'vmi' then 'vmi'
            when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
            when sale.product_type_name = 'covid' then 'covid'
            when sale.product_type_name = 'dengue' then 'dengue'
            when sale.product_type_name = 'pa' then 'pa'
            else 'others' 
        end = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('BM_KOWIT_EX','bm_kowit')
group by 1, 2, 3, 4, 5 
order by 2, 1


Title: BM_Phueng-Leader Break Down RDT
SQL: with affiliates as (
    select affiliate_id, agent_code,
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed,
        user_id 
    from th_datawarehouse.dd_affiliate 
)
select 
    agent_code,
    users.fullname agent_name,
    account_type_transformed as account_type,
    case 
        when sale.product_type_name = 'vmi' then 'vmi'
        when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    date_trunc('month', policy_sold_on_at::timestamp)::date AS sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join vouch_db.profiles_user users on users.id = affiliates.user_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
where 
    sale.sale_status = 'is_sold'
    and sale.policy_sold_on_at::date between '{{ Date.start }}' and '{{ Date.end }}'
    and (
        '{{ Account Type }}' = 'All' 
        or account_type_transformed = '{{ Account Type }}'
    )
    and (
        '{{ Policy Type }}' = 'All' 
        or case 
            when sale.product_type_name = 'vmi' then 'vmi'
            when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
            when sale.product_type_name = 'covid' then 'covid'
            when sale.product_type_name = 'dengue' then 'dengue'
            when sale.product_type_name = 'pa' then 'pa'
            else 'others' 
        end = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('bm_phueng','BM_PHUENG_INT')
group by 1, 2, 3, 4, 5 
order by 2, 1


Title: BM_Key-Leader Break Down RDT
SQL: with affiliates as (
    select affiliate_id, agent_code,
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed,
        user_id 
    from th_datawarehouse.dd_affiliate 
)
select 
    agent_code,
    users.fullname agent_name,
    account_type_transformed as account_type,
    case 
        when sale.product_type_name = 'vmi' then 'vmi'
        when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    date_trunc('month', policy_sold_on_at::timestamp)::date AS sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join vouch_db.profiles_user users on users.id = affiliates.user_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
where 
    sale.sale_status = 'is_sold'
    and sale.policy_sold_on_at::date between '{{ Date.start }}' and '{{ Date.end }}'
    and (
        '{{ Account Type }}' = 'All' 
        or account_type_transformed = '{{ Account Type }}'
    )
    and (
        '{{ Policy Type }}' = 'All' 
        or case 
            when sale.product_type_name = 'vmi' then 'vmi'
            when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
            when sale.product_type_name = 'covid' then 'covid'
            when sale.product_type_name = 'dengue' then 'dengue'
            when sale.product_type_name = 'pa' then 'pa'
            else 'others' 
        end = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('BM_KEY','BM_KEY_INT')
group by 1, 2, 3, 4, 5 
order by 2, 1


Title: BM_Yos-Leader Break Down RDT
SQL: with affiliates as (
    select affiliate_id, agent_code,
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed,
        user_id 
    from th_datawarehouse.dd_affiliate 
)
select 
    agent_code,
    users.fullname agent_name,
    account_type_transformed as account_type,
    case 
        when sale.product_type_name = 'vmi' then 'vmi'
        when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    date_trunc('month', policy_sold_on_at::timestamp)::date AS sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join vouch_db.profiles_user users on users.id = affiliates.user_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
where 
    sale.sale_status = 'is_sold'
    and sale.policy_sold_on_at::date between '{{ Date.start }}' and '{{ Date.end }}'
    and (
        '{{ Account Type }}' = 'All' 
        or account_type_transformed = '{{ Account Type }}'
    )
    and (
        '{{ Policy Type }}' = 'All' 
        or case 
            when sale.product_type_name = 'vmi' then 'vmi'
            when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
            when sale.product_type_name = 'covid' then 'covid'
            when sale.product_type_name = 'dengue' then 'dengue'
            when sale.product_type_name = 'pa' then 'pa'
            else 'others' 
        end = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('BM_YOS_INT','BM_Yos')
group by 1, 2, 3, 4, 5 
order by 2, 1


Title: BM_Bel-Premium Analysis RDT
SQL: with affiliates as (
    select affiliate_id, 
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed
    from th_datawarehouse.dd_affiliate 
)
select 
    case 
        when sale.product_type_name = 'vmi' then 'VMI'
        when sale.product_type_name = 'cmi_solo' then 'CMI_SOLO'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    to_date(sale.policy_sold_on_at::date, 'YYYY/MM') sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
WHERE 
    sale.sale_status = 'is_sold'
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    )
    AND (
        '{{ Policy Type }}' = 'All' 
        OR CASE 
            WHEN sale.product_type_name = 'vmi' THEN 'vmi'
            WHEN sale.product_type_name = 'cmi_solo' THEN 'cmi_solo'
            WHEN sale.product_type_name = 'covid' THEN 'covid'
            WHEN sale.product_type_name = 'dengue' THEN 'dengue'
            WHEN sale.product_type_name = 'pa' THEN 'pa'
            ELSE 'others' 
        END = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('BM_BEL_INT')
group by 1, 2
order by 2, 1


Title: BM_Ball-Premium Analysis RDT
SQL: with affiliates as (
    select affiliate_id, 
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed
    from th_datawarehouse.dd_affiliate 
)
select 
    case 
        when sale.product_type_name = 'vmi' then 'VMI'
        when sale.product_type_name = 'cmi_solo' then 'CMI_SOLO'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    to_date(sale.policy_sold_on_at::date, 'YYYY/MM') sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
WHERE 
    sale.sale_status = 'is_sold'
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    )
    AND (
        '{{ Policy Type }}' = 'All' 
        OR CASE 
            WHEN sale.product_type_name = 'vmi' THEN 'vmi'
            WHEN sale.product_type_name = 'cmi_solo' THEN 'cmi_solo'
            WHEN sale.product_type_name = 'covid' THEN 'covid'
            WHEN sale.product_type_name = 'dengue' THEN 'dengue'
            WHEN sale.product_type_name = 'pa' THEN 'pa'
            ELSE 'others' 
        END = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('bm_ball','BM_BALL_INT')
group by 1, 2
order by 2, 1


Title: BM_Aey-Premium Analysis RDT
SQL: with affiliates as (
    select affiliate_id, 
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed
    from th_datawarehouse.dd_affiliate 
)
select 
    case 
        when sale.product_type_name = 'vmi' then 'VMI'
        when sale.product_type_name = 'cmi_solo' then 'CMI_SOLO'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    to_date(sale.policy_sold_on_at::date, 'YYYY/MM') sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
WHERE 
    sale.sale_status = 'is_sold'
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    )
    AND (
        '{{ Policy Type }}' = 'All' 
        OR CASE 
            WHEN sale.product_type_name = 'vmi' THEN 'vmi'
            WHEN sale.product_type_name = 'cmi_solo' THEN 'cmi_solo'
            WHEN sale.product_type_name = 'covid' THEN 'covid'
            WHEN sale.product_type_name = 'dengue' THEN 'dengue'
            WHEN sale.product_type_name = 'pa' THEN 'pa'
            ELSE 'others' 
        END = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('BM_AEY_internal','BM_AEY_INT')
group by 1, 2
order by 2, 1


Title: BM_Anup-Premium Analysis RDT
SQL: with affiliates as (
    select affiliate_id, 
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed
    from th_datawarehouse.dd_affiliate 
)
select 
    case 
        when sale.product_type_name = 'vmi' then 'VMI'
        when sale.product_type_name = 'cmi_solo' then 'CMI_SOLO'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    to_date(sale.policy_sold_on_at::date, 'YYYY/MM') sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
WHERE 
    sale.sale_status = 'is_sold'
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    )
    AND (
        '{{ Policy Type }}' = 'All' 
        OR CASE 
            WHEN sale.product_type_name = 'vmi' THEN 'vmi'
            WHEN sale.product_type_name = 'cmi_solo' THEN 'cmi_solo'
            WHEN sale.product_type_name = 'covid' THEN 'covid'
            WHEN sale.product_type_name = 'dengue' THEN 'dengue'
            WHEN sale.product_type_name = 'pa' THEN 'pa'
            ELSE 'others' 
        END = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('BM_ANUP_INT')
group by 1, 2
order by 2, 1


Title: BM_Pom-Premium Analysis RDT
SQL: with affiliates as (
    select affiliate_id, 
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed
    from th_datawarehouse.dd_affiliate 
)
select 
    case 
        when sale.product_type_name = 'vmi' then 'VMI'
        when sale.product_type_name = 'cmi_solo' then 'CMI_SOLO'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    to_date(sale.policy_sold_on_at::date, 'YYYY/MM') sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
WHERE 
    sale.sale_status = 'is_sold'
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    )
    AND (
        '{{ Policy Type }}' = 'All' 
        OR CASE 
            WHEN sale.product_type_name = 'vmi' THEN 'vmi'
            WHEN sale.product_type_name = 'cmi_solo' THEN 'cmi_solo'
            WHEN sale.product_type_name = 'covid' THEN 'covid'
            WHEN sale.product_type_name = 'dengue' THEN 'dengue'
            WHEN sale.product_type_name = 'pa' THEN 'pa'
            ELSE 'others' 
        END = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('BM_POM_INT')
group by 1, 2
order by 2, 1


Title: BM_Tron-Premium Analysis RDT
SQL: with affiliates as (
    select affiliate_id, 
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed
    from th_datawarehouse.dd_affiliate 
)
select 
    case 
        when sale.product_type_name = 'vmi' then 'VMI'
        when sale.product_type_name = 'cmi_solo' then 'CMI_SOLO'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    to_date(sale.policy_sold_on_at::date, 'YYYY/MM') sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
WHERE 
    sale.sale_status = 'is_sold'
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    )
    AND (
        '{{ Policy Type }}' = 'All' 
        OR CASE 
            WHEN sale.product_type_name = 'vmi' THEN 'vmi'
            WHEN sale.product_type_name = 'cmi_solo' THEN 'cmi_solo'
            WHEN sale.product_type_name = 'covid' THEN 'covid'
            WHEN sale.product_type_name = 'dengue' THEN 'dengue'
            WHEN sale.product_type_name = 'pa' THEN 'pa'
            ELSE 'others' 
        END = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('BM_TRON_INT')
group by 1, 2
order by 2, 1


Title: BM_Papar-Premium Analysis RDT
SQL: with affiliates as (
    select affiliate_id, 
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed
    from th_datawarehouse.dd_affiliate 
)
select 
    case 
        when sale.product_type_name = 'vmi' then 'VMI'
        when sale.product_type_name = 'cmi_solo' then 'CMI_SOLO'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    to_date(sale.policy_sold_on_at::date, 'YYYY/MM') sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
WHERE 
    sale.sale_status = 'is_sold'
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    )
    AND (
        '{{ Policy Type }}' = 'All' 
        OR CASE 
            WHEN sale.product_type_name = 'vmi' THEN 'vmi'
            WHEN sale.product_type_name = 'cmi_solo' THEN 'cmi_solo'
            WHEN sale.product_type_name = 'covid' THEN 'covid'
            WHEN sale.product_type_name = 'dengue' THEN 'dengue'
            WHEN sale.product_type_name = 'pa' THEN 'pa'
            ELSE 'others' 
        END = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('bm_papar_int','BM_Papar')
group by 1, 2
order by 2, 1


Title: BM_Tum-Premium Analysis RDT
SQL: with affiliates as (
    select affiliate_id, 
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed
    from th_datawarehouse.dd_affiliate 
)
select 
    case 
        when sale.product_type_name = 'vmi' then 'VMI'
        when sale.product_type_name = 'cmi_solo' then 'CMI_SOLO'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    to_date(sale.policy_sold_on_at::date, 'YYYY/MM') sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
WHERE 
    sale.sale_status = 'is_sold'
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    )
    AND (
        '{{ Policy Type }}' = 'All' 
        OR CASE 
            WHEN sale.product_type_name = 'vmi' THEN 'vmi'
            WHEN sale.product_type_name = 'cmi_solo' THEN 'cmi_solo'
            WHEN sale.product_type_name = 'covid' THEN 'covid'
            WHEN sale.product_type_name = 'dengue' THEN 'dengue'
            WHEN sale.product_type_name = 'pa' THEN 'pa'
            ELSE 'others' 
        END = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('bm_tum','BM_TUM_INT')
group by 1, 2
order by 2, 1


Title: BM_Arm-Premium Analysis RDT
SQL: with affiliates as (
    select affiliate_id, 
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed
    from th_datawarehouse.dd_affiliate 
)
select 
    case 
        when sale.product_type_name = 'vmi' then 'VMI'
        when sale.product_type_name = 'cmi_solo' then 'CMI_SOLO'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    to_date(sale.policy_sold_on_at::date, 'YYYY/MM') sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
WHERE 
    sale.sale_status = 'is_sold'
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    )
    AND (
        '{{ Policy Type }}' = 'All' 
        OR CASE 
            WHEN sale.product_type_name = 'vmi' THEN 'vmi'
            WHEN sale.product_type_name = 'cmi_solo' THEN 'cmi_solo'
            WHEN sale.product_type_name = 'covid' THEN 'covid'
            WHEN sale.product_type_name = 'dengue' THEN 'dengue'
            WHEN sale.product_type_name = 'pa' THEN 'pa'
            ELSE 'others' 
        END = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN  ('BM_ARM_INT')
group by 1, 2
order by 2, 1


Title: BM_Tae-Premium Analysis RDT
SQL: with affiliates as (
    select affiliate_id, 
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed
    from th_datawarehouse.dd_affiliate 
)
select 
    case 
        when sale.product_type_name = 'vmi' then 'VMI'
        when sale.product_type_name = 'cmi_solo' then 'CMI_SOLO'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    to_date(sale.policy_sold_on_at::date, 'YYYY/MM') sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
WHERE 
    sale.sale_status = 'is_sold'
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    )
    AND (
        '{{ Policy Type }}' = 'All' 
        OR CASE 
            WHEN sale.product_type_name = 'vmi' THEN 'vmi'
            WHEN sale.product_type_name = 'cmi_solo' THEN 'cmi_solo'
            WHEN sale.product_type_name = 'covid' THEN 'covid'
            WHEN sale.product_type_name = 'dengue' THEN 'dengue'
            WHEN sale.product_type_name = 'pa' THEN 'pa'
            ELSE 'others' 
        END = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('bm_tae','bm_tae_int')
group by 1, 2
order by 2, 1


Title: BM_Kai-Premium Analysis RDT
SQL: with affiliates as (
    select affiliate_id, 
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed
    from th_datawarehouse.dd_affiliate 
)
select 
    case 
        when sale.product_type_name = 'vmi' then 'VMI'
        when sale.product_type_name = 'cmi_solo' then 'CMI_SOLO'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    to_date(sale.policy_sold_on_at::date, 'YYYY/MM') sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
WHERE 
    sale.sale_status = 'is_sold'
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    )
    AND (
        '{{ Policy Type }}' = 'All' 
        OR CASE 
            WHEN sale.product_type_name = 'vmi' THEN 'vmi'
            WHEN sale.product_type_name = 'cmi_solo' THEN 'cmi_solo'
            WHEN sale.product_type_name = 'covid' THEN 'covid'
            WHEN sale.product_type_name = 'dengue' THEN 'dengue'
            WHEN sale.product_type_name = 'pa' THEN 'pa'
            ELSE 'others' 
        END = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('BM_KAI_INT')
group by 1, 2
order by 2, 1


Title: Monthly Revenue per Channel per Product
SQL: with eligible_users as (
select distinct users.id 
from vouch_db.profiles_user users
join vouch_db.profiles_userrole urole on urole.user_id = users.id
join vouch_db.profiles_role role on role.id = urole.role_id
where users.email not like '%fairdee.co.th%'
or role.name != 'admin'
), 
ao as(
select distinct atag.affiliate_id, tags.name
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
where tags.name in ('at_agentoffice', 'at_broker', 'at_agentoffline')
),
main as (
select 
      case  when ao.affiliate_id is not null then ao.name
            when affiliate.account_type is null then 'direct_agent'
      else affiliate.account_type 
      end || '-' || 
      case when sale.product_type_name = 'vmi' then 'vmi'
           when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
           else sale.product_type_name
           end as channel, 
       case when sale.product_type_name = 'vmi' then 'vmi'
           when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
           else sale.product_type_name end as product_name,
	   to_char(sale.policy_sold_on_at::date, 'YYYY/MM') sale_month,
	   sum(sale.premium_without_tax_amt) premium_without_tax_amt,
	   count(sale.id) total_sales,
	   sum(coalesce(sale.fairdee_commission_amt, 0)) total_commission_earned,
	   case when sale.product_type_name = 'cmi_solo'
	        then sum(coalesce(cf.commission,0))
	        else sum(coalesce(sale.expected_affiliate_commission_amt, 0)) end as commission_given_out,
	   sum(coalesce(sale.incentives_amt, 0)) promotions_given_out, 
	   sum(coalesce(sale.referral_bonus_amt, 0)) referral_bonus_given_out, 
	   sum(coalesce(sale.managment_fee_amt, 0)) managment_fee_given_out, 
	   sum(coalesce(sale.coupon_amt, 0)) coupon_amount_given_out, 
	   case 
	   when product_name = 'cmi_solo' then (((sum(premium_without_tax_amt)*0.12)/1.03)*0.03)
	   else (((sum(premium_without_tax_amt)*0.12)/1.03)*0.03) end as wht_given_out,
	   case 
	   when product_name = 'cmi_solo' then ((((sum(premium_without_tax_amt)*0.12)/1.03)/520000)*3000)
	   else ((((sum(premium_without_tax_amt)*0.18)/1.03)/520000)*3000) end as nominee_cost,
	   (sum(sale.fairdee_commission_amt) - 
	   case when sale.product_type_name = 'cmi_solo'
	        then sum(coalesce(cf.commission,0))
	        else sum(coalesce(sale.expected_affiliate_commission_amt, 0)) end -
	   sum(coalesce(sale.incentives_amt, 0)) -
	   sum(coalesce(sale.referral_bonus_amt, 0)) -
	   sum(coalesce(sale.managment_fee_amt, 0)) -
	   sum(coalesce(sale.coupon_amt, 0)) ) revenue
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_affiliate affiliate on affiliate.id = sale.affiliate_id
join eligible_users users on users.id = affiliate.user_id
left join ao on ao.affiliate_id = affiliate.id
left join vouch_db.utils_compulsoryinsuranceform cf on cf.id = sale.id
where sale.sale_status = 'is_sold'
and extract(year from policy_sold_on_at::date) = {{ year }}
and extract(month from policy_sold_on_at::date) in ( {{ start_month }} )
group by 1, 2, 3, sale.product_type_name
order by 2, 1
)
select 
channel,
sale_month,
premium_without_tax_amt as gwp,
total_commission_earned as com_earn,
commission_given_out as com_paid,
promotions_given_out as promotion,
referral_bonus_given_out as referral_fee,
managment_fee_given_out as management_fee,
case 
    when channel like '%inspection%' then wht_given_out + nominee_cost
    when channel like '%office%' then wht_given_out + nominee_cost 
    else 0 end as tax_absorption,
revenue as margin_amount,
revenue / premium_without_tax_amt as margin
from main
order by 2 asc, 1 asc

-- select distinct insurance_class from th_datawarehouse.fd_sale_all_product_unified_view

Title: BM_Nook-Premium Analysis RDT
SQL: with affiliates as (
    select affiliate_id, 
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed
    from th_datawarehouse.dd_affiliate 
)
select 
    case 
        when sale.product_type_name = 'vmi' then 'VMI'
        when sale.product_type_name = 'cmi_solo' then 'CMI_SOLO'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    to_date(sale.policy_sold_on_at::date, 'YYYY/MM') sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
WHERE 
    sale.sale_status = 'is_sold'
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    )
    AND (
        '{{ Policy Type }}' = 'All' 
        OR CASE 
            WHEN sale.product_type_name = 'vmi' THEN 'vmi'
            WHEN sale.product_type_name = 'cmi_solo' THEN 'cmi_solo'
            WHEN sale.product_type_name = 'covid' THEN 'covid'
            WHEN sale.product_type_name = 'dengue' THEN 'dengue'
            WHEN sale.product_type_name = 'pa' THEN 'pa'
            ELSE 'others' 
        END = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('BM_KAI_INT')
group by 1, 2
order by 2, 1


Title: BM_Kanha-Premium Analysis RDT
SQL: with affiliates as (
    select affiliate_id, 
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed
    from th_datawarehouse.dd_affiliate 
)
select 
    case 
        when sale.product_type_name = 'vmi' then 'VMI'
        when sale.product_type_name = 'cmi_solo' then 'CMI_SOLO'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    to_date(sale.policy_sold_on_at::date, 'YYYY/MM') sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
WHERE 
    sale.sale_status = 'is_sold'
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    )
    AND (
        '{{ Policy Type }}' = 'All' 
        OR CASE 
            WHEN sale.product_type_name = 'vmi' THEN 'vmi'
            WHEN sale.product_type_name = 'cmi_solo' THEN 'cmi_solo'
            WHEN sale.product_type_name = 'covid' THEN 'covid'
            WHEN sale.product_type_name = 'dengue' THEN 'dengue'
            WHEN sale.product_type_name = 'pa' THEN 'pa'
            ELSE 'others' 
        END = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('BM_Kanha', 'BM_KANHA_INT')
group by 1, 2
order by 2, 1


Title: BM_Mai-Premium Analysis RDT
SQL: with affiliates as (
    select affiliate_id, 
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed
    from th_datawarehouse.dd_affiliate 
)
select 
    case 
        when sale.product_type_name = 'vmi' then 'VMI'
        when sale.product_type_name = 'cmi_solo' then 'CMI_SOLO'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    to_date(sale.policy_sold_on_at::date, 'YYYY/MM') sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
WHERE 
    sale.sale_status = 'is_sold'
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    )
    AND (
        '{{ Policy Type }}' = 'All' 
        OR CASE 
            WHEN sale.product_type_name = 'vmi' THEN 'vmi'
            WHEN sale.product_type_name = 'cmi_solo' THEN 'cmi_solo'
            WHEN sale.product_type_name = 'covid' THEN 'covid'
            WHEN sale.product_type_name = 'dengue' THEN 'dengue'
            WHEN sale.product_type_name = 'pa' THEN 'pa'
            ELSE 'others' 
        END = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('BM_MAI_INT','BM_MAI')
group by 1, 2
order by 2, 1


Title: BM_Kowit-Premium Analysis RDT
SQL: with affiliates as (
    select affiliate_id, 
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed
    from th_datawarehouse.dd_affiliate 
)
select 
    case 
        when sale.product_type_name = 'vmi' then 'VMI'
        when sale.product_type_name = 'cmi_solo' then 'CMI_SOLO'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    to_date(sale.policy_sold_on_at::date, 'YYYY/MM') sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
WHERE 
    sale.sale_status = 'is_sold'
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    )
    AND (
        '{{ Policy Type }}' = 'All' 
        OR CASE 
            WHEN sale.product_type_name = 'vmi' THEN 'vmi'
            WHEN sale.product_type_name = 'cmi_solo' THEN 'cmi_solo'
            WHEN sale.product_type_name = 'covid' THEN 'covid'
            WHEN sale.product_type_name = 'dengue' THEN 'dengue'
            WHEN sale.product_type_name = 'pa' THEN 'pa'
            ELSE 'others' 
        END = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('BM_KOWIT_EX', 'bm_kowit')
group by 1, 2
order by 2, 1


Title: BM_Phueng-Premium Analysis RDT
SQL: with affiliates as (
    select affiliate_id, 
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed
    from th_datawarehouse.dd_affiliate 
)
select 
    case 
        when sale.product_type_name = 'vmi' then 'VMI'
        when sale.product_type_name = 'cmi_solo' then 'CMI_SOLO'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    to_date(sale.policy_sold_on_at::date, 'YYYY/MM') sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
WHERE 
    sale.sale_status = 'is_sold'
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    )
    AND (
        '{{ Policy Type }}' = 'All' 
        OR CASE 
            WHEN sale.product_type_name = 'vmi' THEN 'vmi'
            WHEN sale.product_type_name = 'cmi_solo' THEN 'cmi_solo'
            WHEN sale.product_type_name = 'covid' THEN 'covid'
            WHEN sale.product_type_name = 'dengue' THEN 'dengue'
            WHEN sale.product_type_name = 'pa' THEN 'pa'
            ELSE 'others' 
        END = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('bm_phueng', 'BM_PHUENG_INT')
group by 1, 2
order by 2, 1


Title: BM_Key-Premium Analysis RDT
SQL: with affiliates as (
    select affiliate_id, 
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed
    from th_datawarehouse.dd_affiliate 
)
select 
    case 
        when sale.product_type_name = 'vmi' then 'VMI'
        when sale.product_type_name = 'cmi_solo' then 'CMI_SOLO'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    to_date(sale.policy_sold_on_at::date, 'YYYY/MM') sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
WHERE 
    sale.sale_status = 'is_sold'
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    )
    AND (
        '{{ Policy Type }}' = 'All' 
        OR CASE 
            WHEN sale.product_type_name = 'vmi' THEN 'vmi'
            WHEN sale.product_type_name = 'cmi_solo' THEN 'cmi_solo'
            WHEN sale.product_type_name = 'covid' THEN 'covid'
            WHEN sale.product_type_name = 'dengue' THEN 'dengue'
            WHEN sale.product_type_name = 'pa' THEN 'pa'
            ELSE 'others' 
        END = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('BM_KEY_INT', 'BM_KEY')
group by 1, 2
order by 2, 1


Title: GWP by Insurer by Insurance Class - CMI
SQL: with eligible_users as (
select distinct users.id 
from vouch_db.profiles_user users
join vouch_db.profiles_userrole urole on urole.user_id = users.id
join vouch_db.profiles_role role on role.id = urole.role_id
where users.email not like '%fairdee.co.th%'
or role.name != 'admin'
), 

ao as(
select distinct atag.affiliate_id, tags.name
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
where tags.name in ('at_agentoffice', 'at_broker')
),

main as (
select 
      case  when ao.affiliate_id is not null then ao.name
            when affiliate.account_type is null then 'direct_agent'
      else affiliate.account_type 
      end, 
	   to_date(sale.policy_sold_on_at::date, 'YYYY/MM/01') sale_month,
	   sale.insurer_code,
	   sale.insurance_class,
	   sum(cmi.premium_without_tax_amt) premium_without_tax_amt,
	   sum(sale.fairdee_commission_amt) total_commission_earned,
	   sum(sale.expected_affiliate_commission_amt) commission_given_out,
	   sum(sale.incentives_amt) promotions_given_out, 
	   sum(sale.referral_bonus_amt) referral_bonus_given_out, 
	   sum(sale.managment_fee_amt) managment_fee_given_out, 
	   sum(sale.coupon_amt) coupon_amount_given_out, 
	   (sum(sale.fairdee_commission_amt) - 
	   sum(sale.expected_affiliate_commission_amt) -
	   sum(sale.incentives_amt) -
	   sum(sale.referral_bonus_amt) -
	   sum(sale.managment_fee_amt) -
	   sum(sale.coupon_amt) ) revenue
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_affiliate affiliate on affiliate.id = sale.affiliate_id
join eligible_users users on users.id = affiliate.user_id
left join th_datawarehouse.dd_cmi_solo_sale cmi on cmi.sale_id = sale.id
left join ao on ao.affiliate_id = affiliate.id
where sale.sale_status = 'is_sold'
and extract(year from sale.policy_sold_on_at::date) = {{ year }}
and extract(month from sale.policy_sold_on_at::date) in ( {{ start_month }} )
-- and ao.affiliate_id is null
and sale.product_type_name = 'vmi'
group by 1, 2, 3, 4
order by 2, 1
),

combined as (
select 'vmi' as policy_type, 
case 
    when account_type = 'direct_agent then' then 'FD'
    when account_type = 'mlm_agent' then 'MLM'
    when account_type = 'inspection_garage' then 'IG'
    when account_type = 'at_broker' then 'IG'
    when account_type = 'at_agentoffice' then 'AO' else account_type end as account_type,
insurer_code,
insurance_class,
sum(premium_without_tax_amt) as gwp, 
sum(revenue) as margin_amount
from main
group by 1,2,3,4

)

select *
from combined
where account_type in ({{agent_type}})
and insurer_code in ( case when {{ insurer code }} = 'All' then insurer_code else {{ insurer code }} end  )


Title: OIC Verified Direct Agents Cumulative Growth
SQL: SELECT 
  dates::DATE,
  cnt,
  SUM(cnt) OVER (ORDER BY dates ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS Total_agents
FROM (
  SELECT 
    to_date(affiliate.created_at::date, 'YYYY-MM-01') AS dates,
    count(DISTINCT affiliate.affiliate_id) AS cnt
  FROM th_datawarehouse.dd_affiliate affiliate
  WHERE affiliate.has_broker_license = 1
    AND affiliate.is_oic_data_verified = 1
     AND affiliate.doc_verified_date is not NULL
    AND affiliate.account_type = 'direct_agent'
  GROUP BY 1
) AS affiliates
ORDER BY dates;


Title: Total Agents Selling monthly - by sold_on
SQL: select to_date(sale.policy_sold_on_at::date, 'YYYY/MM') sale_month,
count(distinct sale.affiliate_id) as "Total Affiliates",
account_type
from th_datawarehouse.fd_sale_all_product_unified_view sale
join th_datawarehouse.dd_affiliate affiliate on sale.affiliate_id =affiliate.affiliate_id
where 
sale_status = 'is_sold'
and product_type_name = 'vmi'
and has_broker_license=1
and is_oic_data_verified=1
  and (case
        when '{{account_type}}' = 'all' then 1=1
        when '{{account_type}}' = 'direct_agent' then affiliate.account_type = 'direct_agent'
        when '{{account_type}}' = 'inspection_garage' then affiliate.account_type = 'inspection_garage'
        when '{{account_type}}' = 'mlm_agent' then affiliate.account_type = 'mlm_agent'
        -- else affiliates.account_type_transformed = 'mlm_agent' 
    end)
      group by 1,account_Type
      order by 1 

Title: Sale_report[updated][Cen]
SQL: with
payment as(
select bpi.invoice_id, 
	   p.paid_at, 
	   p.amount_paid
from vouch_db.billing_payment_invoices bpi 
join vouch_db.billing_payment p on p.id = bpi.payment_id 
where p.is_deleted = 0 
and p.is_reconciled = 1
),
instalment_penalty as(
select fsi.fairdee_sale_id, 
	   inv.id invoice_id, 
	   sum(p.amount_paid) total_paid
from vouch_db.policy_fairdeesaleinvoice fsi 
join vouch_db.billing_invoice inv on inv.id = fsi.invoice_id 
left join payment p on p.invoice_id = inv.id
join vouch_db.billing_invoicedetail invd on invd.invoice_id  = inv.id 
where detail_type = 'instalment_penalty'
group by 1, 2
), 
customer_invoice as(
select fsi.fairdee_sale_id, 
	   inv.id invoice_id,
	   case 
	   	when inv.payment_status in ('fully_paid', 'overpaid') then 1 
	   	else 0
	   end paid_invoices, 
	   min(p.paid_at) first_paid_at, 
	   max(p.paid_at) last_paid_at, 
	   sum(p.amount_paid) total_paid
from vouch_db.policy_fairdeesaleinvoice fsi 
join vouch_db.billing_invoice inv on inv.id = fsi.invoice_id 
left join payment p on p.invoice_id = inv.id
left join instalment_penalty ip on ip.invoice_id = inv.id
where inv.payer = 'customer'
and inv.payee = 'fairdee'
and inv.is_deleted  = 0 
and ip.invoice_id is null
--order by 2 desc 
--limit 2000
group by 1, 2, inv.payment_status 
--order by 2 desc 
--limit 2000
)
--select * from customer_invoice
, 
commission_invoice as(
select fsi.fairdee_sale_id, inv.id invoice_id, inv.payment_status, inv.amount_payable, inv.payee, inv.payer,
	   min(p.paid_at) first_paid_at, 
	   max(p.paid_at) last_paid_at, 
	   sum(p.amount_paid) total_paid, 
	   rank() over(partition by fsi.fairdee_sale_id order by inv.id desc) rnk
from vouch_db.policy_fairdeesaleinvoice fsi 
join vouch_db.billing_invoice inv on inv.id = fsi.invoice_id 
left join (select bpi.invoice_id , p.* 
			from vouch_db.billing_payment_invoices bpi 
			join vouch_db.billing_payment p on p.id = bpi.payment_id
			where p.is_deleted = 0 
			and   p.is_reconciled = 1
		  ) p on p.invoice_id = inv.id
join (select distinct invoice_id 
	  from vouch_db.billing_invoicedetail
	  where detail_type = 'affiliate_commission') invd on invd.invoice_id = inv.id
where inv.payer = 'fairdee'
and inv.payee = 'affiliate'
and inv.is_deleted = 0 
group by 1, 2, 3, 4, 5, 6
--order by 1 desc 
--limit 1000
)
--select * from commission_invoice
, 
ue as(
select fue.fairdeesale_id, 
	   ue.*
from vouch_db.policy_fairdeesale_unit_economics fue 
join vouch_db.utils_uniteconomics ue on ue.id = fue.uniteconomics_id 
where ue.is_valid = true
), 
vue as (
select * 
from ue 
where ue.unit_type in ('car_insurance', 'bike_insurance', 'taxi_insurance')
), 
cue as (
select * 
from ue 
where ue.unit_type = 'compulsory_car_insurance'
), 
metric as(
select sale.id sale_id, 
	   coalesce(sum(comm.total_paid), 0) commission_transfered,
	   min(comm.first_paid_at) first_commission_transfer, 
	   max(comm.last_paid_at) last_commission_transfer,
	   sum(custi.total_paid) total_customer_payment,
	   max(custi.last_paid_at) last_customer_payment,
	   case 
	   		when sale.sale_type = 'instalment' then sum(custi.paid_invoices)
	   		else NULL
	   end total_paid_instalments
from vouch_db.policy_fairdeesale sale
left join commission_invoice comm on comm.fairdee_sale_id = sale.id
left join (
			select * 
			from commission_invoice
			where rnk = 1) last_payment on last_payment.fairdee_sale_id = sale.id
join customer_invoice custi on custi.fairdee_sale_id = sale.id
group by 1, sale.sale_type 
), 
coupon as(
select coupon.quotation_id, sum(inv.amount) amount
from vouch_db.utils_quotationcouponlink coupon 
join vouch_db.billing_invoice inv on inv.id = coupon.invoice_id 
where coupon.is_paid = 1
and inv.is_deleted = 0 
group by 1)
select sale.id sale_id, 
	   ins.code insurer, 
	   sale.created_at, 
	   sale.sold_on, 
	   policy.policy_start_date, 
	   policy.policy_number, 
	   fq.vehicle_number, 
	   fq.chassis_number, 
	   pl.insurance_class, 
	   users.fullname agent_name,
	   affiliate.agent_code,
	   vue.premium_without_tax vmi_net_premium, 
	   (vue.duty + vue.tax) vmi_tax_and_duty, 
	   vue.premium_after_tax vmi_total_premium, 
	   coalesce(cue.premium_without_tax, 0) cmi_net_premium, 
	   coalesce((cue.duty + cue.tax), 0) cmi_tax_and_duty, 
	   coalesce (cue.premium_after_tax) cmi_total_premium, 
	   fq.commission_rate, 
	   fq.compulsory_commission_rate,
	   fq.affiliate_discount member_discount, 
	   vue.affiliate_commission_given_out + coalesce(cue.affiliate_commission_given_out, 0) + 
	   	vue.subsidy + coalesce(cue.subsidy, 0) expected_agent_commission, 
	   vue.affiliate_commission_vat + cue.affiliate_commission_vat affiliate_commission_vat, 
	   vue.affiliate_commission_wht + cue.affiliate_commission_wht affiliate_commission_wht, 
	   last_payment.payment_status last_commission_status,
	   fq.commission_payment_schedule,
	   vue.affiliate_to_customer_discount,
	   vue.premium_after_tax + coalesce(cue.premium_after_tax, 0) - vue.affiliate_to_customer_discount expected_transfer_from_customer,
	   sale.payment_status, 
	   inst.name total_instalments,
	   vue.insurer_commission_received + cue.insurer_commission_received +
	   	vue.insurer_incentive_received + cue.insurer_incentive_received insurer_commission_recieved, 
	   (vue.insurer_commission_received + cue.insurer_commission_received +
	   	vue.insurer_incentive_received + cue.insurer_incentive_received)/(vue.premium_without_tax + cue.premium_without_tax) insurer_commission_rate,
	   	case
	   		when vst.id is not null then true 
	   		else false 
	   	end voluntry_in_SOA, 
	   	case 
--			when fq.needs_compulsory_insurance = 0 then 'NO_cmi'::varchar
			when cst.id is not null then true
			else false 
	   	end compulsory_in_SOA, 
	   	sale.sale_type payment_method, 
	   	case 
	   		when tqr.id is not null then true
	   		else NULL
	   	end QR_payment,
	   	tqr.reference_one, 
	   	coupon.amount,
	   	case when inst.commission_deduction_percent!= 0 then 'true' 
	   	     else 'false'
	   	end instalment_deduction_status, 
	   	(fq.commission_rate + 
	   	coalesce(fq.assistance_deduction_rate, 0) + 
	   	coalesce(inst.commission_deduction_percent, 0))*coalesce(inst.commission_deduction_percent, 0)*vue.premium_after_tax instalment_deduction_amount, 
	   	inst.commission_deduction_percent,
	   	metric.*
from vouch_db.policy_fairdeesale sale 
join vouch_db.utils_fairdeequotation fq on fq.id = sale.quotation_id 
join vouch_db.utils_fairdeequotationquery fqq on fqq.id = fq.quotation_query_id 
join vouch_db.masterdata_pricelist pl on pl.id = fq.price_list_id 
join vouch_db.masterdata_insurer ins on ins.id = pl.insurer_id
join vouch_db.profiles_affiliate affiliate on affiliate.id = sale.affiliate_id
join vouch_db.profiles_user users on users.id = affiliate.user_id
left join vouch_db.policy_fairdeepolicy policy on policy.id = sale.voluntary_policy_id 
left join vouch_db.policy_fairdeepolicy cpolicy on cpolicy.id = sale.compulsory_policy_id
left join vouch_db.policy_soatransaction vst on vst.id = policy.soa_transaction_id 
left join vouch_db.policy_soatransaction cst on cst.id = cpolicy.soa_transaction_id 
join vue on vue.fairdeesale_id = sale.id 
left join cue on cue.fairdeesale_id = sale.id 
left join (
			select * 
			from commission_invoice
			where rnk = 1) last_payment on last_payment.fairdee_sale_id = sale.id
left join vouch_db.billing_instalmenttype inst on inst.id = fqq.instalment_type_id
left join (select id, tqr.reference_one 
		   from vouch_db.billing_thaiqrrequest tqr 
		   where is_paid = 1) tqr on tqr.id = fq.thai_qr_request_id 
left join metric on metric.sale_id = sale.id
left join coupon on coupon.quotation_id = fq.id
where sale.sold_on between '{{dt.start}}' and '{{dt.end}}'

Title: BM_Yos-Premium Analysis RDT
SQL: with affiliates as (
    select affiliate_id, 
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed
    from th_datawarehouse.dd_affiliate 
)
select 
    case 
        when sale.product_type_name = 'vmi' then 'VMI'
        when sale.product_type_name = 'cmi_solo' then 'CMI_SOLO'
        when sale.product_type_name = 'covid' then 'covid'
        when sale.product_type_name = 'dengue' then 'dengue'
        when sale.product_type_name = 'pa' then 'pa'
        else 'others' 
    end as policy_type,
    to_date(sale.policy_sold_on_at::date, 'YYYY/MM') sold_on_month,
    sum(sale.premium_without_tax_amt) premium_without_tax_amt,
    count(sale.id) policy_sold_count
from th_datawarehouse.fd_sale_all_product_unified_view sale 
left join affiliates on sale.affiliate_id = affiliates.affiliate_id
join th_datawarehouse.dd_affiliate_bm_mapping map on affiliates.affiliate_id = map.affiliate_id
    and sale.policy_sold_on_at::date between map.valid_from and map.valid_till
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
WHERE 
    sale.sale_status = 'is_sold'
    AND sale.policy_sold_on_at::date BETWEEN '{{ Date.start }}' AND '{{ Date.end }}'
    AND (
        '{{ Account Type }}' = 'All' 
        OR account_type_transformed = '{{ Account Type }}'
    )
    AND (
        '{{ Policy Type }}' = 'All' 
        OR CASE 
            WHEN sale.product_type_name = 'vmi' THEN 'vmi'
            WHEN sale.product_type_name = 'cmi_solo' THEN 'cmi_solo'
            WHEN sale.product_type_name = 'covid' THEN 'covid'
            WHEN sale.product_type_name = 'dengue' THEN 'dengue'
            WHEN sale.product_type_name = 'pa' THEN 'pa'
            ELSE 'others' 
        END = '{{ Policy Type }}'
    )
    AND map.assigned_bm IN ('BM_YOS_INT', 'BM_Yos')
group by 1, 2
order by 2, 1


Title: All Bank Transaction - Redshift
SQL: WITH instalment_invoices AS
  ( SELECT sale.id AS sale_id,
           cinv.combined_invoice_id AS invoice_id,
           vendor.name as vendor_name
   FROM vouch_db.billing_combinedinvoice cinv
   join vouch_db.billing_combinedinvoice_invoices ci on ci.combinedinvoice_id = cinv.id
   join vouch_db.billing_invoice invoice on invoice.id = ci.invoice_id
   LEFT JOIN vouch_db.policy_fairdeesaleinvoice fsi ON fsi.invoice_id = invoice.id
   LEFT JOIN vouch_db.policy_fairdeesale sale ON sale.id = fsi.fairdee_sale_id
   LEFT JOIN vouch_db.utils_fairdeequotation fq ON fq.id = sale.quotation_id
   LEFT JOIN vouch_db.utils_fairdeequotationquery fqq ON fqq.id = fq.quotation_query_id
   LEFT JOIN vouch_db.masterdata_vendor vendor ON fqq.vendor_id = vendor.id
   WHERE sale.sale_type = 'instalment'
     AND invoice.payer = 'customer'
     AND invoice.payee = 'fairdee'
    --  AND vendor.name = 'Credit OK'
   ORDER BY invoice.due_date)
SELECT ba.bank_name AS "Bank Name",
       ba.account_number AS "Account Number",
       bt.id AS "Bank Transaction ID",
       COALESCE(payment.id::text, ip.id::text) AS "Payment ID",
       COALESCE(payment.amount_paid, ip.amount_paid) AS "Payment Amount",
       COALESCE(payment.paid_at::timestamptz AT TIME ZONE 'Asia/Jakarta', ip.paid_at::timestamptz AT TIME ZONE 'Asia/Jakarta') AS "Payment Paid At",
       invoice.payment_status AS "Payment Status",
       bt.reference_id AS "Bank Reference ID",
       bt.amount AS "Bank Transaction Amount",
       bt.transaction_time::timestamptz AT TIME ZONE 'Asia/Jakarta' AS "Bank Transaction Time",
       CASE
           WHEN cf.id THEN LISTAGG(DISTINCT concat('C-', cf.id) within group (order by cf.id)) 
           WHEN sale.id THEN listagg(DISTINCT concat('M-', sale.id) within group (order by sale.id)) 
           WHEN df.id THEN listagg(DISTINCT concat('D-', df.id) within group (order by df.id)) 
           WHEN pf.id THEN listagg(DISTINCT concat('PA-', pf.id) within group (order by pf.id)) 
       END AS "Sale ID",
       listagg(distinct invd.detail_type) within group (order by invd.detail_type),
       CASE
           WHEN cf.id THEN concat('https://www.fairdee.co.th/corona-wizard?id=', cf.id)
           WHEN sale.id THEN concat('https://www.fairdee.co.th/fairdee-wizard?id=', quotation.id)
           WHEN df.id THEN concat('https://www.fairdee.co.th/dengue-wizard?id=', df.id) 
           WHEN pf.id THEN concat('https://www.fairdee.co.th/pa-wizard?id=', pf.id) 
       END AS "Wizard URL"
FROM vouch_db.billing_banktransaction bt
JOIN vouch_db.masterdata_brokerbankaccount ba ON ba.id = bt.bank_account_id
LEFT JOIN vouch_db.billing_payment payment ON bt.id = payment.bank_transaction_id
AND payment.is_deleted=FALSE
LEFT JOIN vouch_db.billing_payment_invoices pi ON pi.payment_id = payment.id
LEFT JOIN vouch_db.billing_intermediatepayment ip ON bt.id = ip.bank_transaction_id
LEFT JOIN vouch_db.billing_intermediatepayment_invoices ipi ON ipi.intermediatepayment_id = ip.id
LEFT JOIN vouch_db.billing_invoice invoice ON invoice.id = COALESCE(pi.invoice_id::text, ipi.invoice_id::text)
left join instalment_invoices ii on ii.invoice_id = invoice.id
LEFT JOIN vouch_db.billing_invoicedetail invd ON invd.invoice_id = invoice.id
LEFT JOIN vouch_db.utils_covidform cf ON cf.invoice_detail_id = invd.id
LEFT JOIN vouch_db.utils_dengueform df ON df.invoice_detail_id = invd.id
LEFT JOIN vouch_db.utils_paform pf ON pf.invoice_detail_id = invd.id
LEFT JOIN vouch_db.policy_fairdeesaleinvoice fsi ON fsi.invoice_id = invoice.id
LEFT JOIN vouch_db.policy_fairdeesale sale ON sale.id = COALESCE(fsi.fairdee_sale_id::text, ii.sale_id::text)
LEFT JOIN vouch_db.utils_fairdeequotation quotation ON quotation.id = sale.quotation_id
WHERE bt.transaction_time::timestamptz AT TIME ZONE 'Asia/Jakarta' >= '2022-11-01'
  AND bt.transaction_time::timestamptz AT TIME ZONE 'Asia/Jakarta' <= '2023-03-31'
  -- AND ba.bank_name like 'ธนาคาร กสิกรไทย จำกัด'
GROUP BY bt.id, ba.bank_name, ba.account_number, payment.id, ip.id, payment.amount_paid, ip.amount_paid,
         payment.paid_at, ip.paid_at, invoice.payment_status, bt.reference_id, bt.amount, bt.transaction_time,
         cf.id, sale.id, df.id, pf.id, quotation.id
ORDER BY bt.transaction_time



Title: Activity rate - Monthly
SQL: with ver_agents AS (
    SELECT
        to_date(affiliate.created_at::date, 'YYYY-MM-01') AS dates,
        COUNT(DISTINCT affiliate.broker_license_number) AS m_agents,
        SUM(COUNT(DISTINCT affiliate.broker_license_number)) OVER (ORDER BY MIN(to_date(affiliate.created_at::date, 'YYYY-MM')) ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS verified_agents

    FROM th_datawarehouse.dd_affiliate affiliate
    WHERE affiliate.has_broker_license = 1
        AND affiliate.is_oic_data_verified = 1
         AND affiliate.doc_verified_date is not null
        AND (
            case
        when '{{account_type}}' = 'all' then 1=1
        when '{{account_type}}' = 'direct_agent' then affiliate.account_type = 'direct_agent'
        when '{{account_type}}' = 'inspection_garage' then affiliate.account_type = 'inspection_garage'
        when '{{account_type}}' = 'mlm_agent' then affiliate.account_type = 'mlm_agent'
        -- else affiliates.account_type_transformed = 'mlm_agent' 
    end
        )
        -- AND affiliate.created_at > '2019-08-01'
    GROUP BY 1
),
agents_selling AS (
    SELECT
        TO_DATE(sale.policy_sold_on_at::date, 'YYYY-MM-01') AS dates,
        COUNT(DISTINCT affiliate.affiliate_id) AS total_affiliates,
        count( sale.id)
    FROM th_datawarehouse.fd_sale_all_product_unified_view sale
    JOIN th_datawarehouse.dd_affiliate affiliate ON affiliate.affiliate_id = sale.affiliate_id
    WHERE 
        sale.sale_status = 'is_sold' 
         and affiliate.has_broker_license = 1
         AND affiliate.is_oic_data_verified = 1
        -- AND sale.policy_sold_on_at > '2019-08-01'
        AND (
            case
        when '{{account_type}}' = 'all' then 1=1
        when '{{account_type}}' = 'direct_agent' then affiliate.account_type = 'direct_agent'
        when '{{account_type}}' = 'inspection_garage' then affiliate.account_type = 'inspection_garage'
        when '{{account_type}}' = 'mlm_agent' then affiliate.account_type = 'mlm_agent'
        -- else affiliates.account_type_transformed = 'mlm_agent' 
    end
        )
    GROUP BY 1
)
SELECT
    av.dates,
    total_affiliates,
    verified_agents,
    (total_affiliates * 100) / NULLIF(verified_agents, 0) AS activity_rate
FROM ver_agents av
JOIN agents_selling sa ON sa.dates = av.dates
ORDER BY av.dates;


Title: Account type and sale info basic
SQL: --account_type:direct, MLM, IG(subagent)
vouch_db.utils_compulsoryinsuranceform --sold only via credit, credit selling account -> Ig (subagent)(postpaid), 
--MLM(prepaid)
vouch_db.policy_fairdeesale -- sold via cbc_to_fairdee+cbc_insurer(bank-transfer, QR), 
--instalment(bank-transfer, QR), credit, vmi can be sold by all account types 
--at_agentoffice, at_broker, at_agentoffline, --these tag name are in vouch_db.profiles_tag
--bm_name, {bm_YOS]

--fetching bm info
select aff.agent_code, aff.account_type, tags.name
from vouch_db.profiles_affiliate aff 
join vouch_db.profiles_affiliatetag atag on atag.affiliate_id = aff.id
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
order by 1

Title: VMI - IG monthly performance
SQL: with affiliates as (
    select affiliate_id, 
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed
    from th_datawarehouse.dd_affiliate 
)
select 
    to_date(sale.policy_sold_on_at::date, 'YYYY/MM') sale_month, 
    count(distinct sale.affiliate_id) as agents,
    sum(premium_without_tax_amt) as total_premium,
    count(distinct sale.id) as total_sales,
    sum(premium_without_tax_amt) / count(distinct sale.id) as "Average order value",
    count(distinct sale.id) / count(distinct affiliates.affiliate_id) as "Order Freq"
from 
    th_datawarehouse.fd_sale_unified_view sale
    join affiliates on sale.affiliate_id = affiliates.affiliate_id
where 
        account_type_transformed = 'inspection_garage' 
    and product_type_name = 'vmi'
    and sale.policy_sold_on_at >= '2019-08-01'::date
    and sale.sale_status = 'is_sold'
group by 
    1


Title: AOV, OF monthly(VMI)
SQL: with affiliates as (
    select affiliate_id, 
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed
    from th_datawarehouse.dd_affiliate 
)
select 
    to_date(sale.policy_sold_on_at::date, 'YYYY/MM') sale_month, 
    count(distinct sale.affiliate_id) as agents,
    sum(premium_without_tax_amt) as total_premium,
    count(distinct sale.id) as total_sales,
    sum(premium_without_tax_amt) / count(distinct sale.id) as "Average order value",
    count(distinct sale.id) / count(distinct affiliates.affiliate_id)::float as "Avg num of policies sold per agent",
    sum(premium_without_tax_amt) / count(distinct affiliates.affiliate_id) as "Avg GWP Per Active Agent"
from 
    th_datawarehouse.fd_sale_unified_view sale
    join affiliates on sale.affiliate_id = affiliates.affiliate_id
where 
    (case
        when '{{account_type}}' = 'all' then 1=1
        when '{{account_type}}' = 'direct_agent' then affiliates.account_type_transformed = 'direct_agent'
        when '{{account_type}}' = 'inspection_garage' then affiliates.account_type_transformed = 'inspection_garage'
        when '{{account_type}}' = 'mlm_agent' then affiliates.account_type_transformed = 'mlm_agent'
        -- else affiliates.account_type_transformed = 'mlm_agent' 
    end)
    and sale.policy_sold_on_at >= '2019-08-01'::date
    and sale.sale_status = 'is_sold'
    and product_type_name = 'vmi'
group by 
    1


Title: Monthly growth [VMI]
SQL: with affiliate as (
    select affiliate_id, 
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed
    from th_datawarehouse.dd_affiliate 
)
SELECT
    to_date(sale.policy_sold_on_at::date, 'YYYY-MM') sale_month,
    COUNT(DISTINCT sale.id) AS total_sales,
    SUM(premium_without_tax_amt) AS total_premium,
    LAG(SUM(premium_without_tax_amt)) OVER (ORDER BY to_date(sale.policy_sold_on_at::date, 'YYYY-MM')) AS last_month_premium,
    100 * (SUM(premium_without_tax_amt) - LAG(SUM(premium_without_tax_amt)) OVER (ORDER BY to_date(sale.policy_sold_on_at::date, 'YYYY-MM'))) / LAG(SUM(premium_without_tax_amt)) OVER (ORDER BY to_date(sale.policy_sold_on_at::date, 'YYYY-MM')) AS premium_perc_change,
    LAG(COUNT(DISTINCT sale.id)) OVER (ORDER BY to_date(sale.policy_sold_on_at::date, 'YYYY-MM')) AS last_month_sale_count,
    COUNT(DISTINCT sale.id) - LAG(COUNT(DISTINCT sale.id)) OVER (ORDER BY to_date(sale.policy_sold_on_at::date, 'YYYY-MM')) AS sale_count_perc_change
FROM th_datawarehouse.fd_sale_all_product_unified_view sale
JOIN affiliate ON sale.affiliate_id = affiliate.affiliate_id
WHERE
    sale.policy_sold_on_at >= '2020-01-01'::date 
    and product_type_name = 'vmi'
    AND sale_status = 'is_sold'
    AND (case
        when '{{account_type}}' = 'all' then 1=1
        when '{{account_type}}' = 'direct_agent' then affiliate.account_type_transformed = 'direct_agent'
        when '{{account_type}}' = 'inspection_garage' then affiliate.account_type_transformed = 'inspection_garage'
        when '{{account_type}}' = 'mlm_agent' then affiliate.account_type_transformed = 'mlm_agent'
        -- else affiliates.account_type_transformed = 'mlm_agent' 
    end)
    
GROUP BY 1, to_date(sale.policy_sold_on_at::date, 'YYYY-MM')

Title: Premium and NOP- per month
SQL: select 
to_date(sale.policy_sold_on_at::date, 'YYYY/MM') sale_month,count(distinct id) policy_sold_count,
  sum(premium_without_tax_amt)premium_without_tax,
  sum(premium_after_tax_amt)premium_after_tax,
  sum(coalesce(incentives_amt, 0) + coalesce(referral_bonus_amt, 0)) agent_promotions,
  sum(coalesce(fairdee_commission_amt, 0)) commissions_earned,
  sum(coalesce(expected_affiliate_commission_amt, 0)) affiliate_commission
from th_datawarehouse.fd_sale_all_product_unified_view sale
  join th_datawarehouse.dd_affiliate affiliate on sale.affiliate_id = affiliate.affiliate_id
 where sale.sale_status = 'is_sold'
  group by 1
  order by 1 desc

Title: Banned Agents
SQL: select aff.agent_code
from vouch_db.profiles_affiliate aff 
join vouch_db.profiles_user users on users.id = aff.user_id
where users.is_banned = 1

Title: all_cmi_solo_sales
SQL:   select ucif.created_at, ucif.id, ucif.is_cancelled, ucif.unit_economics_id, ucif.is_new_car, ue.is_valid, pa.is_deleted,
  usr.is_test, rle.name, usr.email
from utils_compulsoryinsuranceform ucif 
left join utils_uniteconomics ue on ue.id = ucif.unit_economics_id
left join profiles_affiliate pa on pa.id = ue.affiliate_id
left join profiles_user usr on usr.id = pa.user_id
left join profiles_userrole urole on urole.user_id = usr.id 
left join profiles_role rle on rle.id = urole.role_id 
-- where ucif.id in (1032251, 1032271, 1032275, 1032288, 1032310, 1032318, 1032319)

-- 1032288, 1032310, 1032319 present in both unified view and growth dashboard rest are present in only unified view

Title: Cohorts Analysis Yearly
SQL: with eligible_users as (
select distinct users.id 
from vouch_db.profiles_user users
join vouch_db.profiles_userrole urole on urole.user_id = users.id
join vouch_db.profiles_role role on role.id = urole.role_id
where users.email not like '%fairdee.co.th%'
or role.name != 'admin'
), 
tags as(
select distinct atag.affiliate_id, tags.name
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
 where tags.name like '%at_%'
 and tags.name != ' Work Shop 2 Ubonratchathani'
 and tags.name not in ('at_inspectiongarage', 'at_mlm')
), 
ov as (
select  start_date::date start_date, 
		end_date::date end_date, 
		lower(insurance_partner_name) insurer_code, 
		case when ov_product_name = 'cmi' then 'cmi_solo'::varchar
		else ov_product_name
		end product_name, 
		ov.forcecast_ov_perc, 
		actual_ov_perc
from th_externals.fd_ov_estimation_collected  ov ),
affiliate as(
select affiliate.id, 
	   min(to_date(sale.policy_sold_on_at::date, 'YYYY-01-01')) cohort_year
from vouch_db.profiles_affiliate affiliate 
join th_datawarehouse.fd_sale_all_product_unified_view sale on sale.affiliate_id = affiliate.id 
join eligible_users users on users.id = affiliate.user_id
where sale.policy_sold_on_at::date >= '2019-01-01'
and affiliate.account_type = 'mlm_agent'
group by 1
),
sale as
(
select  
		affiliate.id,
		datediff(y, '2019-01-01', to_date(sale.policy_sold_on_at::date, 'YYYY-01-01') ) year_number,
		count(sale.id||'-'||sale.product_type_name) total_sales,
		sum(sale.premium_without_tax_amt) gwp, 
		((sum(sale.fairdee_commission_amt) + coalesce(sum(sale.premium_without_tax_amt*coalesce(ov.actual_ov_perc, ov.forcecast_ov_perc)), 0))
		- sum(sale.expected_affiliate_commission_amt)) revenue,
		sum(sale.fairdee_commission_amt) + coalesce(sum(sale.premium_without_tax_amt*coalesce(ov.actual_ov_perc, ov.forcecast_ov_perc)), 0)- (
		sum(sale.expected_affiliate_commission_amt) + 
		sum(sale.incentives_amt) + 
		sum(sale.referral_bonus_amt) + 
		sum(sale.managment_fee_amt)
		) revenue_with_marketing
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_affiliate aff on aff.id = sale.affiliate_id
join affiliate on affiliate.id = aff.id
left join ov on (ov.insurer_code = sale.insurer_code) and 
		        (ov.product_name = sale.product_type_name) and 
		        (sale.policy_sold_on_at::date<= ov.end_date and sale.policy_sold_on_at::date >= ov.start_date)
where sale.sale_status = 'is_sold'
group by 1, 2
order by 1, 2
)
select  affiliate.cohort_year, 
        year_number,
        count(distinct sale.id) selling_agents, 
        sum(total_sales) total_sales, 
        sum(gwp)/31.88 gwp, 
        sum(revenue)/31.88 revenue, 
        sum(revenue_with_marketing)/31.88 revenue_with_marketing
from affiliate 
join sale on sale.id = affiliate.id
group by 1, 2
order by 1, 2 



Title: Cohorts Analysis [monthly]
SQL: with eligible_users as (
select distinct users.id 
from vouch_db.profiles_user users
join vouch_db.profiles_userrole urole on urole.user_id = users.id
join vouch_db.profiles_role role on role.id = urole.role_id
where users.email not like '%fairdee.co.th%'
or role.name != 'admin'
), 
tags as(
select distinct atag.affiliate_id, tags.name
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
 where tags.name like '%at_%'
 and tags.name != ' Work Shop 2 Ubonratchathani'
 and tags.name not in ('at_inspectiongarage', 'at_mlm')
), 
ov as (
select  start_date::date start_date, 
		end_date::date end_date, 
		lower(insurance_partner_name) insurer_code, 
		case when ov_product_name = 'cmi' then 'cmi_solo'::varchar
		else ov_product_name
		end product_name, 
		ov.forcecast_ov_perc, 
		actual_ov_perc
from th_externals.fd_ov_estimation_collected  ov ),
affiliate as(
select affiliate.id, 
	   min(to_date(sale.policy_sold_on_at::date, 'YYYY-MM-01')) cohort_month
from vouch_db.profiles_affiliate affiliate 
join th_datawarehouse.fd_sale_all_product_unified_view sale on sale.affiliate_id = affiliate.id 
join eligible_users users on users.id = affiliate.user_id
where sale.policy_sold_on_at::date >= '2019-01-01'
group by 1
),
sale as
(
select  
		affiliate.id,
		datediff(mon, '2019-01-01', to_date(sale.policy_sold_on_at::date, 'YYYY-MM-01') ) month_number,
		count(sale.id||'-'||sale.product_type_name) total_sales,
		sum(sale.premium_without_tax_amt) gwp, 
		((sum(sale.fairdee_commission_amt) + coalesce(sum(sale.premium_without_tax_amt*coalesce(ov.actual_ov_perc, ov.forcecast_ov_perc)), 0))
		- sum(sale.expected_affiliate_commission_amt)) revenue,
		sum(sale.fairdee_commission_amt) + coalesce(sum(sale.premium_without_tax_amt*coalesce(ov.actual_ov_perc, ov.forcecast_ov_perc)), 0)- (
		sum(sale.expected_affiliate_commission_amt) + 
		sum(sale.incentives_amt) + 
		sum(sale.referral_bonus_amt) + 
		sum(sale.managment_fee_amt)
		) revenue_with_marketing
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_affiliate aff on aff.id = sale.affiliate_id
join affiliate on affiliate.id = aff.id
left join ov on (ov.insurer_code = sale.insurer_code) and 
		        (ov.product_name = sale.product_type_name) and 
		        (sale.policy_sold_on_at::date<= ov.end_date and sale.policy_sold_on_at::date >= ov.start_date)
where sale.sale_status = 'is_sold'
group by 1, 2
order by 1, 2
)
select  affiliate.cohort_month, 
        month_number,
        count(distinct sale.id) selling_agents, 
        sum(total_sales) total_sales, 
        sum(gwp) gwp, 
        sum(revenue) revenue, 
        sum(revenue_with_marketing) revenue_with_marketing
from affiliate 
join sale on sale.id = affiliate.id
group by 1, 2
order by 1, 2 



Title: Monthly Revenue per account_type per product
SQL: with eligible_users as (
select distinct users.id 
from vouch_db.profiles_user users
join vouch_db.profiles_userrole urole on urole.user_id = users.id
join vouch_db.profiles_role role on role.id = urole.role_id
where users.email not like '%fairdee.co.th%'
or role.name != 'admin'
), 
ao as(
select distinct atag.affiliate_id, tags.name
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
where tags.name in ('at_agentoffice', 'at_broker')
)

select 
      case  when ao.affiliate_id is not null then ao.name
            when affiliate.account_type is null then 'direct_agent'
      else affiliate.account_type 
      end || '-' || 
      case when insurance_class in ('1', '1 ราคาถูกพิเศษ') then 'type1_vmi' 
           when sale.product_type_name = 'vmi' then 'vmi_non_type_1'
           when sale.product_type_name = 'cmi_solo' then 'cmi_solo'
           else 'others' 
           end as gropued, 
	   to_date(sale.policy_sold_on_at::date, 'YYYY/MM/01') sale_month,
	   sum(sale.premium_without_tax_amt) premium_without_tax_amt,
	   count(sale.id) total_sales,
	   sum(coalesce(sale.fairdee_commission_amt, 0)) total_commission_earned,
	   sum(coalesce(sale.expected_affiliate_commission_amt, 0)) commission_given_out,
	   sum(coalesce(sale.incentives_amt, 0)) promotions_given_out, 
	   sum(coalesce(sale.referral_bonus_amt, 0)) referral_bonus_given_out, 
	   sum(coalesce(sale.managment_fee_amt, 0)) managment_fee_given_out, 
	   sum(coalesce(sale.coupon_amt, 0)) coupon_amount_given_out, 
	   (sum(sale.fairdee_commission_amt) - 
	   sum(coalesce(sale.expected_affiliate_commission_amt, 0)) -
	   sum(coalesce(sale.incentives_amt, 0)) -
	   sum(coalesce(sale.referral_bonus_amt, 0)) -
	   sum(coalesce(sale.managment_fee_amt, 0)) -
	   sum(coalesce(sale.coupon_amt, 0)) ) revenue
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_affiliate affiliate on affiliate.id = sale.affiliate_id
join eligible_users users on users.id = affiliate.user_id
left join ao on ao.affiliate_id = affiliate.id
where sale.sale_status = 'is_sold'
and policy_sold_on_at::date between '{{dt.start}}' and '{{dt.end}}'
and ao.affiliate_id is null
group by 1, 2
order by 2, 1


-- select distinct insurance_class from th_datawarehouse.fd_sale_all_product_unified_view

Title: Monthly Revenue per channel
SQL: with eligible_users as (
select distinct users.id 
from vouch_db.profiles_user users
join vouch_db.profiles_userrole urole on urole.user_id = users.id
join vouch_db.profiles_role role on role.id = urole.role_id
where users.email not like '%fairdee.co.th%'
or role.name != 'admin'
), 
ao as(
select distinct atag.affiliate_id, tags.name
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
where tags.name in ('at_agentoffice', 'at_broker')
)
select 
      case  when ao.affiliate_id is not null then ao.name
            when affiliate.account_type is null then 'direct_agent'
      else affiliate.account_type 
      end, 
	   to_date(sale.policy_sold_on_at::date, 'YYYY/MM/01') sale_month,
	   sum(sale.premium_without_tax_amt) premium_without_tax_amt,
	   sum(sale.fairdee_commission_amt) total_commission_earned,
	   sum(sale.expected_affiliate_commission_amt) commission_given_out,
	   sum(sale.incentives_amt) promotions_given_out, 
	   sum(sale.referral_bonus_amt) referral_bonus_given_out, 
	   sum(sale.managment_fee_amt) managment_fee_given_out, 
	   sum(sale.coupon_amt) coupon_amount_given_out, 
	   (sum(sale.fairdee_commission_amt) - 
	   sum(sale.expected_affiliate_commission_amt) -
	   sum(sale.incentives_amt) -
	   sum(sale.referral_bonus_amt) -
	   sum(sale.managment_fee_amt) -
	   sum(sale.coupon_amt) ) revenue
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_affiliate affiliate on affiliate.id = sale.affiliate_id
join eligible_users users on users.id = affiliate.user_id
left join ao on ao.affiliate_id = affiliate.id
where sale.sale_status = 'is_sold'
and policy_sold_on_at::date between '{{dt.start}}' and '{{dt.end}}'
and ao.affiliate_id is null
group by 1, 2
order by 2, 1

Title: Total Monthly Revenue
SQL: with eligible_users as (
select distinct users.id 
from vouch_db.profiles_user users
join vouch_db.profiles_userrole urole on urole.user_id = users.id
join vouch_db.profiles_role role on role.id = urole.role_id
where users.email not like '%fairdee.co.th%'
or role.name != 'admin'
), 
ao as(
select distinct atag.affiliate_id, tags.name
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
where tags.name in ('at_agentoffice', 'at_broker')
)
select 
	   to_date(sale.policy_sold_on_at::date, 'YYYY/MM/01') sale_month,
	   sum(sale.premium_without_tax_amt) premium_without_tax_amt,
	   sum(sale.fairdee_commission_amt) total_commission_earned,
	   sum(sale.expected_affiliate_commission_amt) commission_given_out,
	   sum(sale.incentives_amt) promotions_given_out, 
	   sum(sale.referral_bonus_amt) referral_bonus_given_out, 
	   sum(sale.managment_fee_amt) managment_fee_given_out, 
	   sum(sale.coupon_amt) coupon_amount_given_out, 
	   (sum(sale.fairdee_commission_amt) - 
	   sum(sale.expected_affiliate_commission_amt) -
	   sum(sale.incentives_amt) -
	   sum(sale.referral_bonus_amt) -
	   sum(sale.managment_fee_amt) -
	   sum(sale.coupon_amt) ) revenue
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_affiliate affiliate on affiliate.id = sale.affiliate_id
join eligible_users users on users.id = affiliate.user_id
left join ao on ao.affiliate_id = affiliate.id
where sale.sale_status = 'is_sold'
and ao.affiliate_id is null
and policy_sold_on_at::date between '{{dt.start}}' and '{{dt.end}}'
group by 1

Title: GWP by Insurer by Insurance Class - CMI Solo
SQL: with eligible_users as (
select distinct users.id 
from vouch_db.profiles_user users
join vouch_db.profiles_userrole urole on urole.user_id = users.id
join vouch_db.profiles_role role on role.id = urole.role_id
where users.email not like '%fairdee.co.th%'
or role.name != 'admin'
), 

ao as(
select distinct atag.affiliate_id, tags.name
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
where tags.name in ('at_agentoffice', 'at_broker')
),

main as (
select 
      case  when ao.affiliate_id is not null then ao.name
            when affiliate.account_type is null then 'direct_agent'
      else affiliate.account_type 
      end, 
	   to_date(sale.policy_sold_on_at::date, 'YYYY/MM/01') sale_month,
	   sale.insurer_code,
	   sale.insurance_class,
	   sum(sale.premium_without_tax_amt) premium_without_tax_amt,
	   sum(sale.fairdee_commission_amt) total_commission_earned,
	   sum(sale.expected_affiliate_commission_amt) commission_given_out,
	   sum(sale.incentives_amt) promotions_given_out, 
	   sum(sale.referral_bonus_amt) referral_bonus_given_out, 
	   sum(sale.managment_fee_amt) managment_fee_given_out, 
	   sum(sale.coupon_amt) coupon_amount_given_out, 
	   (sum(sale.fairdee_commission_amt) - 
	   sum(sale.expected_affiliate_commission_amt) -
	   sum(sale.incentives_amt) -
	   sum(sale.referral_bonus_amt) -
	   sum(sale.managment_fee_amt) -
	   sum(sale.coupon_amt) ) revenue
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_affiliate affiliate on affiliate.id = sale.affiliate_id
join eligible_users users on users.id = affiliate.user_id
left join ao on ao.affiliate_id = affiliate.id
where sale.sale_status = 'is_sold'
and extract(year from policy_sold_on_at::date) = {{ year }}
and extract(month from policy_sold_on_at::date) in ( {{ start_month }} )
-- and ao.affiliate_id is null
and sale.product_type_name = 'cmi_solo'
group by 1, 2, 3, 4
order by 2, 1
),

combined as (
select 'vmi' as policy_type, 
case 
    when account_type = 'direct_agent then' then 'FD'
    when account_type = 'mlm_agent' then 'MLM'
    when account_type = 'inspection_garage' then 'IG'
    when account_type = 'at_broker' then 'IG'
    when account_type = 'at_agentoffice' then 'AO' else account_type end as account_type,
insurer_code,
insurance_class,
sum(premium_without_tax_amt) as gwp, 
sum(revenue) as margin_amount
from main
group by 1,2,3,4

)

select *
from combined
where account_type in ({{agent_type}})
and insurer_code in ( case when {{ insurer code }} = 'All' then insurer_code else {{ insurer code }} end  )


Title: GWP by Insurer by Insurance Class - VMI
SQL: with eligible_users as (
select distinct users.id 
from vouch_db.profiles_user users
join vouch_db.profiles_userrole urole on urole.user_id = users.id
join vouch_db.profiles_role role on role.id = urole.role_id
where users.email not like '%fairdee.co.th%'
or role.name != 'admin'
), 

ao as(
select distinct atag.affiliate_id, tags.name
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
where tags.name in ('at_agentoffice', 'at_broker')
),

main as (
select 
      case  when ao.affiliate_id is not null then ao.name
            when affiliate.account_type is null then 'direct_agent'
      else affiliate.account_type 
      end, 
	   to_date(sale.policy_sold_on_at::date, 'YYYY/MM/01') sale_month,
	   sale.insurer_code,
	   sale.insurance_class,
	   sum(sale.premium_without_tax_amt) - sum(cmi.premium_without_tax_amt) premium_without_tax_amt,
	   sum(sale.fairdee_commission_amt) total_commission_earned,
	   sum(sale.expected_affiliate_commission_amt) commission_given_out,
	   sum(sale.incentives_amt) promotions_given_out, 
	   sum(sale.referral_bonus_amt) referral_bonus_given_out, 
	   sum(sale.managment_fee_amt) managment_fee_given_out, 
	   sum(sale.coupon_amt) coupon_amount_given_out, 
	   (sum(sale.fairdee_commission_amt) - 
	   sum(sale.expected_affiliate_commission_amt) -
	   sum(sale.incentives_amt) -
	   sum(sale.referral_bonus_amt) -
	   sum(sale.managment_fee_amt) -
	   sum(sale.coupon_amt) ) revenue
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_affiliate affiliate on affiliate.id = sale.affiliate_id
join eligible_users users on users.id = affiliate.user_id
left join th_datawarehouse.dd_cmi_solo_sale cmi on cmi.sale_id = sale.id
left join ao on ao.affiliate_id = affiliate.id
where sale.sale_status = 'is_sold'
and extract(year from sale.policy_sold_on_at::date) = {{ year }}
and extract(month from sale.policy_sold_on_at::date) in ( {{ start_month }} )
-- and ao.affiliate_id is null
and sale.product_type_name = 'vmi'
group by 1, 2, 3, 4, sale.product_type_name
order by 2, 1
),

combined as (
select 'vmi' as policy_type, 
case 
    when account_type = 'direct_agent then' then 'FD'
    when account_type = 'mlm_agent' then 'MLM'
    when account_type = 'inspection_garage' then 'IG'
    when account_type = 'at_broker' then 'IG'
    when account_type = 'at_agentoffice' then 'AO' else account_type end as account_type,
insurer_code,
insurance_class,
sum(premium_without_tax_amt) as gwp, 
sum(revenue) as margin_amount
from main
group by 1,2,3,4

)

select *
from combined
where account_type in ({{agent_type}})
and insurer_code in ( case when {{ insurer code }} = 'All' then insurer_code else {{ insurer code }} end  )


Title: Clawback & Refund Invoices
SQL: with report as(select
       p.id,
       affiliate.agent_code,
       case when affiliate.account_type is null then 'direct_agent' else affiliate.account_type end as account_type,
       trunc(p.paid_at)  as paid_at,
       sale.sold_on as sold_on,
    --   sale.id as 'sale_id',
       fq.vehicle_number,
       inv.payment_status,
       (case
            when inv.payer = 'fairdee' and inv.payee = 'affiliate' and invd.detail_type like '%refund%' then 'refund'
            when inv.payer = 'affiliate' and inv.payee = 'fairdee' then 'clawback'
        end) as detail,
       inv.amount as amount,
       inv.discount, 
       inv.withholding_tax, 
       inv.amount_payable as amount_payable,
       p.amount_paid as amount_paid
from vouch_db.billing_invoice inv 
join vouch_db.billing_invoicedetail invd on invd.invoice_id = inv.id
join vouch_db.billing_payment_invoices pi on pi.invoice_id = inv.id
join vouch_db.billing_payment p on p.id = pi.payment_id
join vouch_db.policy_fairdeesaleinvoice fsi on fsi.invoice_id = inv.id
join vouch_db.policy_fairdeesale sale on sale.id = fsi.fairdee_sale_id
join vouch_db.utils_fairdeequotation fq on fq.id = sale.quotation_id
join vouch_db.profiles_affiliate affiliate on affiliate.id = sale.affiliate_id
-- where (CONVERT_TZ(p.paid_at, 'UTC', '+07:00')) between '{{ dt.start }}' and  '{{ dt.end }}'
where inv.is_deleted = false
and p.is_deleted = False
order by vehicle_number),


calc as (
select 
       r.agent_code,
       r.account_type as channel,
       r.vehicle_number,
       r.sold_on,
       r.payment_status,
       r.paid_at,
       sum(case when r.detail = 'refund' then r.amount else null end) as refund,
       sum(case when r.detail = 'clawback' then r.amount else null end) as clawback,
       sum(r.discount) as discount,
       sum(r.withholding_tax) as withholding_tax,
       sum(r.amount_payable) as amount_payable,
       sum(r.amount_paid) as amount_paid
from report r
where r.sold_on between '{{ dt.start }}' and  '{{ dt.end }}'
and r.payment_status in ( {{status}} ) 
group by 1,2,3,4,5,6
order by agent_code, vehicle_number
)

select * from calc
where (clawback is not null) or (refund is not null)


Title: Self Serve Raw Data [VMI]
SQL: with
eligible_users as(
select distinct users.id
from vouch_db.profiles_user users
join vouch_db.profiles_userrole urole on urole.user_id = users.id
where users.is_test = false
and users.email not like '%fairdee.co.th%'
),
tqr as(
select tqr.id, tqr.amount_paid, tqr.created_at, tqr.created_by_id
from vouch_db.billing_thaiqrrequest tqr
where is_paid = 1
),
pdf as(
select pdf.quotation_query_id,
pdf.created_at,
pdf.created_by_id,
rank() over(partition by pdf.quotation_query_id order by pdf.created_at) rnk
from vouch_db.utils_quotationdownload pdf
),
payment_proof as (
select doc.fairdee_quotation_id,
doc.created_by_id,
doc.created_at,
rank() over(partition by doc.fairdee_quotation_id order by doc.created_at) rnk
from vouch_db.utils_fairdeedocument doc
where doc.document_type = 'payment_proof'
),
-- national_id as(
-- select doc.fairdee_quotation_query_id,
-- doc.created_by_id,
-- doc.created_at,
-- rank() over(partition by doc.fairdee_quotation_query_id order by doc.created_at) rnk
-- from vouch_db.utils_fairdeecoadocument doc
-- where doc.document_type = 'national_id'
-- ),
-- car_registration as (
-- select doc.fairdee_quotation_query_id,
-- doc.created_by_id,
-- doc.created_at,
-- rank() over(partition by doc.fairdee_quotation_query_id order by doc.created_at) rnk
-- from vouch_db.utils_fairdeecoadocument doc
-- where doc.document_type = 'car_registration'
-- ),
-- old_policy as(
-- select doc.fairdee_quotation_query_id,
-- doc.created_by_id,
-- doc.created_at,
-- rank() over(partition by doc.fairdee_quotation_query_id order by doc.created_at) rnk
-- from vouch_db.utils_fairdeecoadocument doc
-- where doc.document_type = 'old_policy'
-- ),
quotation as(
select fq.id,
fq.quotation_query_id,
fq.vehicle_number,
CONCAT('https://fairdee.co.th/fairdee-wizard?id=',fq.id) as sale_link,
fq.created_at,
fq.created_by_id,
fq.change_of_agent,
pl.plan_name,
pl.restriction_text,
pl.is_manual,
pl.for_renewal,
pl.can_issue_policy_online possible_API_sale,
pl.insurance_class,
ins.code insurer_code,
fq.thai_qr_request_id, 
fq.transferred_quote_for_id
from vouch_db.utils_fairdeequotation fq
join vouch_db.masterdata_pricelist pl on pl.id = fq.price_list_id
join vouch_db.masterdata_insurer ins on ins.id = pl.insurer_id
),
sale as(
select sale.id,
sale.quotation_id,
sale.sold_on,
sale.created_at,
sale.created_by_id,
case
when json_extract_path_text(policy.insurer_response, 'is_success') = 'true' then 1
else 0
end sold_via_API,
sale.sale_type,
sale.policy_status,
sale.payment_status
from vouch_db.policy_fairdeesale sale
left join vouch_db.policy_fairdeepolicy policy on policy.id = sale.voluntary_policy_id
), 
ao as(
select distinct atag.affiliate_id affiliate_id
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
where tags.name = 'at_agentoffice'
)
 select fqq.id quotation_query_id,
quotation.id quotation_id,
sale.id sale_id,
-- case when sale.id is not null then 1 else 0 end sale_count,
 -- concat(make.name, mm.name, cc.value, fqq.year) as MakeModelData,
affiliate.agent_code,
case when tags.affiliate_id is not null then 'AgentOffice' 
     else coalesce(affiliate.account_type, 'Direct_Agent')
end account_type, 
affiliate.id affiliate_id,
affiliate.user_id affiliate_user_id,
case
when coalesce(doc.fairdee_quotation_id, tqr.id) is not null or
(sale.sale_type = 'credit' or sale.sale_type = 'cbc_to_insurer') then 'payment_done'::varchar
when sale.id is not null then 'sale_reported'::varchar
when quotation.id is not null then 'quotation_created'::varchar
when pdf.quotation_query_id is not null then 'pdf_generated'::varchar
else 'quotation_query_created'::varchar
end current_state,
fqq.created_at quote_created_at,
to_char(fqq.created_at::date, 'YYYY-mm') quote_created_month, 
to_char(fqq.created_at::date, 'YYYY') quote_created_year,
pdf.created_at pdf_created_at,
case
when tqr.id is null then doc.created_at
else tqr.created_at
end payment_proof_uploaded_at,
-- nid.created_at nation_id_uploaded_at,
-- cr.created_at car_registration_uploaded_at,
-- op.created_at old_policy_uploaded_at,
quotation.created_at report_sale_button_clicked_at,
to_char(quotation.created_at::date, 'YYYY-mm') report_sale_button_clicked_at_month, 
to_char(quotation.created_at::date, 'YYYY') report_sale_button_clicked_at_year,
sale.created_at data_submited_at,
sale.sold_on,
to_char(sale.sold_on::date, 'YYYY-mm') sold_on_month, 
to_char(sale.sold_on::date, 'YYYY') sold_on_year,
s.sale_status, 
case
when fqq.created_by_id = affiliate.user_id then 'affiliate'::varchar
when fqq.created_by_id != affiliate.user_id then 'Admin'::varchar
end quote_created_by,
case
when affiliate.user_id::int =
case
when pdf.created_by_id is null then fqq.created_by_id::int
else pdf.created_by_id::int
end
then 'affiliate'::varchar
when pdf.created_by_id is null and quotation.id is not null and quotation.is_manual = 0 then
case
when quotation.created_by_id::int = affiliate.user_id
then 'affiliate'::varchar
else 'Admin'::varchar
end
when pdf.created_at is not null then 'Admin'::varchar
end pdf_created_by,
case
when sale.sale_type = 'credit' then 'affiliate'::varchar
when sale.sale_type = 'cbc_to_insurer' then 'admin'::varchar
when affiliate.user_id::int = (
case
when tqr.id is null then doc.created_by_id::int
else tqr.created_by_id::int
end
) then 'affiliate'::varchar
when (tqr.id is not null or doc.created_by_id is not null) then 'Admin'::varchar
end payment__proof_uploaded_by,
case
when quotation.created_by_id = affiliate.user_id then 'affiliate'::varchar
when quotation.created_by_id is not null then 'Admin'::varchar
end report_sale_button_clicked_by,
case
when sale.created_by_id = affiliate.user_id then 'affiliate'::varchar
when sale.created_by_id is not null then 'Admin'::varchar
end data_submited_by,
case when quotation.is_manual = 1 then 'manual_quote'::varchar
else 'system_quote'::varchar
end type_of_quote,
case when quotation.for_renewal = 1 then 'renewal'::varchar
when quotation.change_of_agent = 1 then 'change__of_agent'::varchar
when quotation.is_manual = 1 then 'manual_quote'::varchar
else 'Not_manual'::varchar
end type_of_manual_quote,
fqq.vmi_car_code,
quotation.plan_name,
quotation.restriction_text,
make.name car_make,
mm.name car_model,
quotation.insurer_code,
fqq.vehicle_number vehicle_number_before_payment,
quotation.vehicle_number vehicle_number_after_payment,
fqq.insurance_class insurance_class_while_created_quote,
quotation.insurance_class insurance_class_on_price_list,
quotation.possible_API_sale,
sale.sold_via_API,
sale.policy_status,
sale.payment_status,
coalesce(sale.sale_type, 'cbc_to_fairdee') sale_type,
case
when sale.sale_type = 'credit' and credit.is_prepaid = 1 then 'pre_paid_credit'::varchar
when sale.sale_type = 'credit' and credit.is_prepaid = 0 then 'post_paid_credit'::varchar
when tqr.id is not null then 'qr'::varchar
else 'bank_transfer'::varchar
end payment_method_for_downpayment,
coalesce(sale.sale_type, 'cbc_to_fairdee') || '_' || 
case
when sale.sale_type = 'credit' and credit.is_prepaid = 1 then 'pre_paid_credit'::varchar
when sale.sale_type = 'credit' and credit.is_prepaid = 0 then 'post_paid_credit'::varchar
when tqr.id is not null then 'qr'::varchar
else 'bank_transfer'::varchar
end payment_method,
quotation.transferred_quote_for_id, 
CONCAT('https://www.fairdee.co.th/get-quotes?quotation_query_id=',quotation.transferred_quote_for_id) as Sale_transfer_Quotation_link,
CONCAT('https://www.fairdee.co.th/get-quotes?quotation_query_id=',fqq.id) as Quotation_link,
quotation.sale_link
from vouch_db.utils_fairdeequotationquery fqq
join vouch_db.profiles_affiliate affiliate on affiliate.id = fqq.affiliate_id
left join vouch_db.profiles_credit credit on credit.affiliate_id = affiliate.id
join eligible_users users on users.id = affiliate.user_id
left join vouch_db.masterdata_modeldescription md on md.id = fqq.model_description_id
left JOIN vouch_db.masterdata_cc cc ON cc.id = md.cc_id
left JOIN vouch_db.masterdata_makemodel mm ON mm.id = cc.make_model_id
left JOIN vouch_db.masterdata_make make ON make.id = mm.make_id
left join pdf on pdf.quotation_query_id = fqq.id and pdf.rnk = 1
-- left join national_id nid on nid.fairdee_quotation_query_id = fqq.id and nid.rnk = 1
-- left join car_registration cr on cr.fairdee_quotation_query_id = fqq.id and cr.rnk = 1
-- left join old_policy op on op.fairdee_quotation_query_id = fqq.id = op.rnk = 1
left join quotation on quotation.quotation_query_id = fqq.id
left join payment_proof doc on doc.fairdee_quotation_id = quotation.id and doc.rnk = 1
left join sale on sale.quotation_id = quotation.id
left join th_datawarehouse.fd_sale_all_product_unified_view s on s.id = sale.id and s.product_type_name = 'vmi'
left join tqr on tqr.id = quotation.thai_qr_request_id
left join ao tags on tags.affiliate_id = affiliate.id
where case 
        when '{{date_type}}' = 'quote_created' 
            then fqq.created_at between '{{dt.start}}' and '{{dt.end}}'
        when '{{date_type}}' = 'sold_on' 
            then sale.sold_on between '{{dt.start}}' and '{{dt.end}}'
      end
and      case 
        when '{{quote_type}}' = 'system_package' then quotation.is_manual = 0 
        when '{{quote_type}}' = 'manual_quote' then quotation.is_manual = 1
        when '{{quote_type}}' = 'renewal_quote' then quotation.for_renewal = 1
        when '{{quote_type}}' = 'change_of_agent' then quotation.change_of_agent = 1
        when '{{quote_type}}' = 'All' then 1 = 1
      end
and      case 
       when '{{account_type}}' = 'AgentOffice' then tags.affiliate_id is not null
       when '{{account_type}}' = 'Direct_Agent' then affiliate.account_type is null
                                                        and tags.affiliate_id is null
       when '{{account_type}}' = 'MLM_Agent' then affiliate.account_type = 'mlm_agent'
       when '{{account_type}}' = 'Inspection_Garage_Including_Sub_Agents' then affiliate.account_type in ('subagent', 'inspection_garage')
                                                                                and tags.affiliate_id is null
                                                            
       when '{{account_type}}' = 'Telesales' then affiliate.account_type = 'telesales'
                                                    and tags.affiliate_id is null
       when '{{account_type}}' = 'Dealership' then affiliate.account_type = 'dealership'
                                                    and tags.affiliate_id is null
       when '{{account_type}}' = 'All' then 1 = 1
     end
        
      

Title: BM same tags multiple entries
SQL: 
select a.name namea, b.name nameb
from 
(select case 
			when tags.name like '%INT%' then lower(rtrim((substring(trim(tags.name), -5, len(tags.name)+ 2)), '_')) 
			else lower(tags.name)
		end bm_name, 
		tags.name, len(name), tags.id tag_id
from vouch_db.profiles_tag tags where tags.name like '%BM%'
) a 
join (
select  case 
			when tags.name like '%int%' then substring(trim(tags.name), -5, len(tags.name)+ 2)
			else tags.name 
		end bm_name, tags.name, tags.id tag_id
from vouch_db.profiles_tag tags 
where tags.name like '%bm%' 
) b on b.bm_name = a.bm_name


Title: Agents assigned to different BM's
SQL: with multi_account_type as
(select atag.affiliate_id 
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id 
where name like 'bm%' or name like '%BM%'
group by 1
having count(distinct tags.name) > 1
order by 1 
)
select affiliate.agent_code, tags.created_at, tags.modified_at, tags.name 
from vouch_db.profiles_affiliate affiliate 
join vouch_db.profiles_affiliatetag atag on atag.affiliate_id = affiliate.id 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id 
join multi_account_type a on a.affiliate_id = affiliate.id
where tags.name like '%bm%' or name like '%BM%'
order by 1


Title: Sales Report (Motor Sales) [unified_view]
SQL: with eligible_users as (
select distinct users.id, users.fullname
from vouch_db.profiles_user users
join vouch_db.profiles_userrole urole on urole.user_id = users.id
join vouch_db.profiles_role role on role.id = urole.role_id
where users.email not like '%fairdee.co.th%'
or role.name != 'admin'
), 
ao as(
select distinct atag.affiliate_id, tags.name
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
where tags.name in ('at_agentoffice', 'at_broker')
),
invoicedetail as (
select distinct invoice_id, detail_type
from vouch_db.billing_invoicedetail  
where detail_type in ('instalment_penalty', 'affiliate_commission')
),
billing_payment as (
select id, paid_at, amount_paid from vouch_db.billing_payment 
where is_deleted = 0
),
customer_invoices as(
select	fsi.fairdee_sale_id,
		inv.id invoice_id, 
		inv.payment_status, 
		inv.amount_payable, 
		max(bp.paid_at) paid_at,
		sum(bp.amount_paid) as total_customer_paid, 
		rank() over(partition by fsi.fairdee_sale_id order by inv.id) rnk
from vouch_db.policy_fairdeesaleinvoice fsi 
join vouch_db.billing_invoice inv on inv.id = fsi.invoice_id 
left join invoicedetail invd on invd.invoice_id = inv.id
left join vouch_db.billing_payment_invoices bpi on bpi.invoice_id = inv.id 
left join vouch_db.billing_payment bp on bp.id = bpi.payment_id  and bp.is_reconciled = 1 and bp.is_deleted  = 0
where inv.is_deleted = 0
and inv.payer = 'customer'
and inv.payee = 'fairdee'
and invd.invoice_id is null
group by 1, 2, 3, 4
),
customer_payments as (
select 	fairdee_sale_id,
		min(paid_at) as first_payment_date,
		max(paid_at) as last_payment_date,
		sum(total_customer_paid) as total_customer_paid
from customer_invoices		
where payment_status <> 'unpaid'
group by 1
),
cust as(
select fairdee_sale_id, max(invoice_id) inv_id
from customer_invoices cust_inv
group by 1
), 
customer_payment_status as(
select  cust_inv.fairdee_sale_id, cust_inv.payment_status
from customer_invoices cust_inv 
join cust on cust.inv_id = cust_inv.invoice_id
where paid_at is not null 
),
instalment as(
select distinct
sale.id as sale_id,
ins.name as total_instalment, 
count(distinct case when cust_inv.payment_status IN ('fully_paid', 'overpaid') then cust_inv.invoice_id end) AS fully_paid_instalment,
sum(cust_inv.total_customer_paid) as total_amount_paid
from vouch_db.policy_fairdeesale sale
join vouch_db.utils_fairdeequotation fq on fq.id = sale.quotation_id 
join vouch_db.utils_fairdeequotationquery fqq on fqq.id = fq.quotation_query_id 
join vouch_db.billing_instalmenttype ins on ins.id = fqq.instalment_type_id 
join customer_invoices cust_inv on cust_inv.fairdee_sale_id = sale.id
where sale.sale_type = 'instalment'
group by 1,2
),
commission_invoices as ( 
select distinct  invoice.*, invd.detail_type
FROM vouch_db.billing_invoice invoice
JOIN invoicedetail invd on invd.invoice_id = invoice.id
WHERE invoice.payee = 'affiliate'
AND invoice.payer = 'fairdee'
AND invoice.is_deleted = FALSE
),
commission_payments as (
SELECT 	fsi.fairdee_sale_id AS sale_id,
  		p.id as payment_id, 
     	p.paid_at as payment_paid_at,
     	i.id AS invoice_id,
     	i.invoice_date,
     	i.payment_status,
     	p.amount_paid
FROM vouch_db.billing_payment p
JOIN vouch_db.billing_payment_invoices pi ON pi.payment_id = p.id
JOIN commission_invoices i ON i.id = pi.invoice_id
JOIN vouch_db.policy_fairdeesaleinvoice fsi ON fsi.invoice_id = i.id
WHERE p.is_deleted = FALSE 
and p.is_reconciled = TRUE
),
grouped_commission_payment as (
select 	distinct sale_id,
		min(payment_paid_at) first_commission_transferred_date,
		min(invoice_date) first_commission_invoice_date,
		max(invoice_id) as last_invoice_id,
		max(payment_id) as last_payment_id,
		max(invoice_date) last_commission_invoice_date,
		max(payment_paid_at) last_commission_transferred_date
from commission_payments
group by 1		
),
affiliate_commission_info as (
select	distinct grouped_commission_payment.sale_id,
		grouped_commission_payment.first_commission_invoice_date,
		grouped_commission_payment.first_commission_transferred_date,
		grouped_commission_payment.last_invoice_id,
		grouped_commission_payment.last_payment_id,
		grouped_commission_payment.last_commission_invoice_date,
		grouped_commission_payment.last_commission_transferred_date,
		commission_payments.payment_status
from grouped_commission_payment
left join commission_payments on commission_payments.invoice_id = grouped_commission_payment.last_invoice_id
),
level_rank as(
select grade.affiliate_id, grade.upgraded_on, gs.level_rank, grade.id grade_id
from vouch_db.profiles_grade grade 
join vouch_db.masterdata_gradesettings gs on gs.id = grade.grade_settings_id
), 
def_rank as(
select aff.id
from vouch_db.profiles_affiliate aff
join level_rank on level_rank.affiliate_id = aff.id
group by aff.id
having count(distinct level_rank.level_rank) = 1
),
def_sale_rank as(
select def_rank.id affiliate_id, level_rank.level_rank 
from def_rank 
join level_rank on level_rank.affiliate_id = def_rank.id 
),
rnk as(
select  distinct aff.id affiliate_id, sale.id sale_id,  
        max(level_rank.grade_id) grade_id
from vouch_db.profiles_affiliate aff
join level_rank on level_rank.affiliate_id = aff.id
join vouch_db.policy_fairdeesale sale on sale.affiliate_id = aff.id 
where sale.sold_on::date >= level_rank.upgraded_on::date
group by 1, 2
order by 1, 2
),
rnk_sale_rank as(
select rnk.*, level_rank.*
from rnk 
join level_rank on level_rank.grade_id = rnk.grade_id
), 
sale_level_settings as(
select  sale.id sale_id, 
        coalesce(dr.level_rank, rnk.level_rank) level_rank
from vouch_db.policy_fairdeesale sale
left join def_sale_rank dr on dr.affiliate_id = sale.affiliate_id
left join rnk_sale_rank rnk on rnk.sale_id = sale.id
), 
main as (
select 
distinct 
sale.id as sale_id,
sale.insurer_code as insurer,
sale.policy_purchased_at as created_at,
sale.policy_sold_on_at as sold_on,
fq.policy_start_date,
vpolicy.policy_number,
fq.vehicle_number, 
fq.chassis_number, 
sale.insurance_class,
affiliate.agent_code as agent_code,
gs.level_rank level_rank, 
users.fullname as agent_name,
      case  when ao.affiliate_id is not null then ao.name
            when affiliate.account_type is null then 'direct_agent'
      else affiliate.account_type end as business_line,
affiliate.has_broker_license, 
--sale.product_type_name as product,
( sale.premium_without_tax_amt - coalesce(csale.premium_without_tax_amt,0) ) as vmi_net_premium,
( sale.tax_amt + sale.duty_amt ) - ( coalesce(csale.tax_amt,0) + coalesce(csale.duty_amt,0) ) as vmi_tax_and_duty,
( vmi_net_premium + coalesce(vmi_tax_and_duty,0) ) as vmi_total_premium,
csale.premium_without_tax_amt as cmi_net_premium,
( csale.tax_amt + coalesce(csale.duty_amt,0) ) as cmi_tax_and_duty,
( cmi_net_premium + coalesce(cmi_tax_and_duty,0) ) as cmi_total_premium,
fq.affiliate_discount member_discount, 
sale.commission_rate as vmi_marketing_rate,
( coalesce(csale.expected_affiliate_commission_amt,0) / csale.premium_without_tax_amt ) as cmi_marketing_rate,
sale.expected_affiliate_commission_amt as affiliate_marketing_fee,
sale.coupon_amt as coupon,
sale.affiliate_commission_vat affiliate_marketing_fee_vat ,
sale.expected_affiliate_commission_wht_amt as affiliate_marketing_fee_wht,
sale.affiliate_to_customer_discount as agent_discount_to_customer,
sale.premium_after_tax_amt - coalesce(sale.affiliate_to_customer_discount,0) as expected_transfer_from_customer,
cp.total_customer_paid as actual_transfer_from_customer,
coalesce(cust_status.payment_status, 'unpaid') last_customer_paid_invoice_payment_status,
cp.last_payment_date,
sale.sale_type as type_of_payment,
sale.payment_status,
comm_info.first_commission_transferred_date first_marketing_fee_transferred_date,
comm_info.last_commission_transferred_date last_marketing_fee_transferred_date,
comm_info.payment_status as marketing_fee_payment_status,
case when sale.sale_type = 'instalment' then fq.commission_payment_schedule else null end as marketing_fee_payment_schedule,
instalment.fully_paid_instalment,
instalment.total_instalment,
instalment.total_amount_paid as total_instalment_amount_paid,
sale.fairdee_commission_amt as insurer_income_received_amt,
( coalesce(sale.fairdee_commission_amt,0) / sale.premium_without_tax_amt ) as insurer_income_received_rate,
-- ( coalesce(csale.expected_affiliate_commission_amt,0) / csale.premium_without_tax_amt ) as cmi_marketing_rate,

case 
    when vmi_marketing_rate > 0.18 and cmi_marketing_rate > 0.12
    then coalesce(vmi_net_premium,0)*0.18 + coalesce(cmi_net_premium,0)*0.12
    when vmi_marketing_rate > 0.18 and cmi_marketing_rate < 0.13
    then coalesce(vmi_net_premium,0)*0.18 + coalesce(cmi_net_premium,0)*coalesce(cmi_marketing_rate,0)
    when vmi_marketing_rate < 0.19 and cmi_marketing_rate > 0.12
    then coalesce(vmi_net_premium,0)*coalesce(vmi_marketing_rate,0) + coalesce(cmi_net_premium,0)*0.12
    else coalesce(vmi_net_premium,0)*coalesce(vmi_marketing_rate,0) + coalesce(cmi_net_premium,0)*coalesce(cmi_marketing_rate,0) end as agent_com_cost_book,
    
sale.expected_affiliate_commission_amt - agent_com_cost_book as agent_incentive_cost_book,
agent_incentive_cost_book*0.03 as wht,
    
case when vst.id is not null then true else false end as voluntry_in_SOA, 
case when cst.id is not null then true else false end compulsory_in_SOA,
sale.payment_method,
case when sale.qr_id is not null then 1 else 0 end as qr_payment_status
from th_datawarehouse.fd_sale_all_product_unified_view sale
left join vouch_db.profiles_affiliate affiliate on affiliate.id = sale.affiliate_id
join eligible_users users on users.id = affiliate.user_id
left join ao on ao.affiliate_id = affiliate.id
left join vouch_db.policy_fairdeesale pf on pf.id = sale.id
left join vouch_db.utils_fairdeequotation fq on fq.id = pf.quotation_id 
left join vouch_db.policy_fairdeepolicy vpolicy on vpolicy.id = pf.voluntary_policy_id 
left join vouch_db.policy_fairdeepolicy cpolicy on cpolicy.id = pf.compulsory_policy_id 
left join th_datawarehouse.dd_cmi_solo_sale csale on csale.sale_id = sale.id
left join customer_payments cp on cp.fairdee_sale_id = sale.id
left join affiliate_commission_info comm_info on comm_info.sale_id = sale.id
left join instalment on instalment.sale_id = sale.id
left join vouch_db.policy_soatransaction vst on vst.id = vpolicy.soa_transaction_id
left join vouch_db.policy_soatransaction cst on cst.id = cpolicy.soa_transaction_id
left join customer_payment_status cust_status on cust_status.fairdee_sale_id = sale.id
left join sale_level_settings gs on gs.sale_id = sale.id
where sale.product_type_name = 'vmi'
and sale.sale_status = 'is_sold'
and sale.policy_sold_on_at between '{{dt.start}}' and '{{dt.end}}'
)
select *
from main
order by sale_id asc

Title: sale_report_debug
SQL: with
payment as(
select bpi.invoice_id, 
       p.paid_at, 
       p.amount_paid
from vouch_db.billing_payment_invoices bpi 
join vouch_db.billing_payment p on p.id = bpi.payment_id 
where p.is_deleted = 0 
and p.is_reconciled = 1
),
instalment_penalty as(
select fsi.fairdee_sale_id, 
       inv.id invoice_id, 
       sum(p.amount_paid) total_paid
from vouch_db.policy_fairdeesaleinvoice fsi 
join vouch_db.billing_invoice inv on inv.id = fsi.invoice_id 
left join payment p on p.invoice_id = inv.id
join vouch_db.billing_invoicedetail invd on invd.invoice_id  = inv.id 
where detail_type = 'instalment_penalty'
group by 1, 2
), 
customer_invoice as(
select fsi.fairdee_sale_id, 
       inv.id invoice_id,
       case 
        when inv.payment_status in ('full_paid', 'overpaid') then 1 
        else 0
       end paid_invoices, 
       min(p.paid_at) first_paid_at, 
       max(p.paid_at) last_paid_at, 
       sum(p.amount_paid) total_paid
from vouch_db.policy_fairdeesaleinvoice fsi 
join vouch_db.billing_invoice inv on inv.id = fsi.invoice_id 
left join payment p on p.invoice_id = inv.id
left join instalment_penalty ip on ip.invoice_id = inv.id
where inv.payer = 'customer'
and inv.payee = 'fairdee'
and inv.is_deleted  = 0 
and ip.invoice_id is null
--order by 2 desc 
--limit 2000
group by 1, 2, inv.payment_status 
--order by 2 desc 
--limit 2000
)
--select * from customer_invoice
, 
commission_invoice as(
select fsi.fairdee_sale_id, inv.id invoice_id, inv.payment_status, inv.amount_payable, inv.payee, inv.payer,
       min(p.paid_at) first_paid_at, 
       max(p.paid_at) last_paid_at, 
       sum(p.amount_paid) total_paid, 
       rank() over(partition by fsi.fairdee_sale_id order by inv.id desc) rnk
from vouch_db.policy_fairdeesaleinvoice fsi 
join vouch_db.billing_invoice inv on inv.id = fsi.invoice_id 
left join (select bpi.invoice_id , p.* 
            from vouch_db.billing_payment_invoices bpi 
            join vouch_db.billing_payment p on p.id = bpi.payment_id
            where p.is_deleted = 0 
            and   p.is_reconciled = 1
          ) p on p.invoice_id = inv.id
join (select distinct invoice_id 
      from vouch_db.billing_invoicedetail
      where detail_type = 'affiliate_commission') invd on invd.invoice_id = inv.id
where inv.payer = 'fairdee'
and inv.payee = 'affiliate'
and inv.is_deleted = 0 
group by 1, 2, 3, 4, 5, 6
--order by 1 desc 
--limit 1000
)
--select * from commission_invoice
, 
ue as(
select fue.fairdeesale_id, 
       ue.*
from vouch_db.policy_fairdeesale_unit_economics fue 
join vouch_db.utils_uniteconomics ue on ue.id = fue.uniteconomics_id 
where ue.is_valid = true
), 
vue as (
select * 
from ue 
where ue.unit_type in ('car_insurance', 'bike_insurance', 'taxi_insurance')
), 
cue as (
select * 
from ue 
where ue.unit_type = 'compulsory_car_insurance'
), 
metric as(
select sale.id sale_id, 
       coalesce(sum(comm.total_paid), 0) commission_transfered,
       min(comm.first_paid_at) first_commission_transfer, 
       max(comm.last_paid_at) last_commission_transfer,
       sum(custi.total_paid) total_customer_payment,
       max(custi.last_paid_at) last_customer_payment,
       case 
            when sale.sale_type = 'instalment' then sum(custi.paid_invoices)
            else NULL
       end total_paid_instalments
from vouch_db.policy_fairdeesale sale
left join commission_invoice comm on comm.fairdee_sale_id = sale.id
left join (
            select * 
            from commission_invoice
            where rnk = 1) last_payment on last_payment.fairdee_sale_id = sale.id
join customer_invoice custi on custi.fairdee_sale_id = sale.id
group by 1, sale.sale_type 
), 
coupon as(
select coupon.quotation_id, sum(inv.amount) amount
from vouch_db.utils_quotationcouponlink coupon 
join vouch_db.billing_invoice inv on inv.id = coupon.invoice_id 
where coupon.is_paid = 1
and inv.is_deleted = 0 
group by 1)
select sale.id sale_id, 
       ins.code insurer, 
       sale.created_at, 
       sale.sold_on, 
       policy.policy_start_date, 
       policy.policy_number, 
       fq.vehicle_number, 
       fq.chassis_number, 
       pl.insurance_class, 
       users.fullname agent_name,
       affiliate.agent_code,
       vue.premium_without_tax vmi_net_premium, 
       (vue.duty + vue.tax) vmi_tax_and_duty, 
       vue.premium_after_tax vmi_total_premium, 
       coalesce(cue.premium_without_tax, 0) cmi_net_premium, 
       coalesce((cue.duty + cue.tax), 0) cmi_tax_and_duty, 
       coalesce (cue.premium_after_tax) cmi_total_premium, 
       fq.commission_rate, 
       fq.compulsory_commission_rate, 
       vue.affiliate_commission_given_out + coalesce(cue.affiliate_commission_given_out, 0) + 
        vue.subsidy + coalesce(cue.subsidy, 0) expected_agent_commission, 
       vue.affiliate_commission_vat + cue.affiliate_commission_vat affiliate_commission_vat, 
       vue.affiliate_commission_wht + cue.affiliate_commission_wht affiliate_commission_wht, 
       last_payment.payment_status last_commission_status,
       fq.commission_payment_schedule,
       vue.affiliate_to_customer_discount,
       vue.premium_after_tax + coalesce(cue.premium_after_tax, 0) - vue.affiliate_to_customer_discount expected_transfer_from_customer,
       sale.payment_status, 
       inst.name total_instalments,
       vue.insurer_commission_received + cue.insurer_commission_received +
        vue.insurer_incentive_received + cue.insurer_incentive_received insurer_commission_recieved, 
       (vue.insurer_commission_received + cue.insurer_commission_received +
        vue.insurer_incentive_received + cue.insurer_incentive_received)/(vue.premium_without_tax + cue.premium_without_tax) insurer_commission_rate,
        case
            when vst.id is not null then true 
            else false 
        end voluntry_in_SOA, 
        case 
--          when fq.needs_compulsory_insurance = 0 then 'NO_cmi'::varchar
            when cst.id is not null then true
            else false 
        end compulsory_in_SOA, 
        sale.sale_type payment_method, 
        case 
            when tqr.id is not null then true
            else NULL
        end QR_payment,
        tqr.reference_one, 
        coupon.amount
from vouch_db.policy_fairdeesale sale 
join vouch_db.utils_fairdeequotation fq on fq.id = sale.quotation_id 
join vouch_db.utils_fairdeequotationquery fqq on fqq.id = fq.quotation_query_id 
join vouch_db.masterdata_pricelist pl on pl.id = fq.price_list_id 
join vouch_db.masterdata_insurer ins on ins.id = pl.insurer_id
join vouch_db.profiles_affiliate affiliate on affiliate.id = sale.affiliate_id
join vouch_db.profiles_user users on users.id = affiliate.user_id
left join vouch_db.policy_fairdeepolicy policy on policy.id = sale.voluntary_policy_id 
left join vouch_db.policy_fairdeepolicy cpolicy on cpolicy.id = sale.compulsory_policy_id
left join vouch_db.policy_soatransaction vst on vst.id = policy.soa_transaction_id 
left join vouch_db.policy_soatransaction cst on cst.id = cpolicy.soa_transaction_id 
join vue on vue.fairdeesale_id = sale.id 
left join cue on cue.fairdeesale_id = sale.id 
left join (
            select * 
            from commission_invoice
            where rnk = 1) last_payment on last_payment.fairdee_sale_id = sale.id
left join vouch_db.billing_instalmenttype inst on inst.id = fqq.instalment_type_id
left join (select id, tqr.reference_one 
           from vouch_db.billing_thaiqrrequest tqr 
           where is_paid = 1) tqr on tqr.id = fq.thai_qr_request_id 
left join metric on metric.sale_id = sale.id
left join coupon on coupon.quotation_id = fq.id
where sale.sold_on between '{{dt.start}}' and '{{dt.end}}'

Title: Margin by Channel (AO)
SQL: with eligible_users as (
select distinct users.id 
from vouch_db.profiles_user users
join vouch_db.profiles_userrole urole on urole.user_id = users.id
join vouch_db.profiles_role role on role.id = urole.role_id
where users.email not like '%fairdee.co.th%'
or role.name != 'admin'
), 

ao as(
select distinct atag.affiliate_id, tags.name
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
where tags.name in ('at_agentoffice', 'at_broker')
),

fetch as (
select 
      case  when ao.affiliate_id is not null then ao.name
            when affiliate.account_type is null then 'direct_agent'
      else affiliate.account_type 
      end, 
	   to_date(sale.policy_sold_on_at::date, 'YYYY/MM/01') sold_on,
	   sum(sale.premium_without_tax_amt) premium_without_tax_amt,
	   --coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0) as vmi_gwp,
	   --coalesce(sum(csale.premium_without_tax_amt),0) as cmi_gwp,
	   sum(sale.fairdee_commission_amt) total_commission_earned,
	   case when sale.product_type_name = 'cmi_solo'
	        then sum(coalesce(cf.commission,0))
	        else sum(coalesce(sale.expected_affiliate_commission_amt, 0)) end as commission_given_out,
	   sum(sale.incentives_amt) promotions_given_out, 
	   sum(sale.referral_bonus_amt) referral_bonus_given_out, 
	   sum(sale.managment_fee_amt) management_fee_given_out, 
	   sum(sale.coupon_amt) coupon_amount_given_out, 
	   ((((coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0))*0.18)/1.03)*0.03) as vmi_wht_given_out,
	   ((((coalesce(sum(csale.premium_without_tax_amt),0))*0.12)/1.03)*0.03) as cmi_wht_given_out,
	   (((((coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0))*0.18)/1.03)/520000)*3000) as vmi_nominee_cost,
	   (((((coalesce(sum(csale.premium_without_tax_amt),0))*0.12)/1.03)/520000)*3000) as cmi_nominee_cost,
	   
	   
	   (sum(sale.fairdee_commission_amt) - 
	   case when sale.product_type_name = 'cmi_solo'
	        then sum(coalesce(cf.commission,0))
	        else sum(coalesce(sale.expected_affiliate_commission_amt, 0)) end -
	   sum(sale.incentives_amt) -
	   sum(coalesce(sale.referral_bonus_amt,0)) -
	   sum(coalesce(sale.managment_fee_amt,0))  
	   ) revenue
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_affiliate affiliate on affiliate.id = sale.affiliate_id
join eligible_users users on users.id = affiliate.user_id
left join ao on ao.affiliate_id = affiliate.id
left join th_datawarehouse.dd_cmi_solo_sale csale on csale.sale_id = sale.id
left join vouch_db.utils_compulsoryinsuranceform cf on cf.id = sale.id
where sale.sale_status = 'is_sold'
and extract(year from policy_sold_on_at::date) = {{ year }}
-- and ao.affiliate_id is null
group by 1, 2, sale.product_type_name
order by 2, 1
),

combined as (
select 'all' as policy_type, 
case 
    when account_type = 'direct_agent then' then 'FD'
    when account_type = 'mlm_agent' then 'MLM'
    when account_type = 'inspection_garage' then 'IG'
    when account_type = 'at_broker' then 'IG'
    when account_type = 'at_agentoffice' then 'AO' else account_type end as account_type,
extract(year from sold_on) as year,
extract(month from sold_on) as month,
sum(premium_without_tax_amt) as gwp, 
sum(revenue) as margin_amount
from fetch
group by 1,2,3,4
),


result as (
select  year::text,
month::text,
account_type as channel,
'Result' as result_type,
round(sum(margin_amount)) as margin_amount, 
round(sum(gwp)) as gwp,
round(sum(margin_amount)*100/sum(gwp),2) as margin_perc
from combined

group by 1,2,3
),


target as (
-- select distinct '2023' as year,
-- 'Target' as month,
-- 'IG' as channel,
-- 'Target' as result_type,
-- 600000 as margin_amount,
-- 100000000 as gwp,
-- 0.60 as margin_perc
-- from vouch_db.utils_dengueform

-- union all

-- select distinct '2023' as year,
-- 'Target' as month,
-- 'FD' as channel,
-- 'Target' as result_type,
-- 700000 as margin_amount,
-- 35000000 as gwp,
-- 2.00 as margin_perc
-- from vouch_db.utils_dengueform

-- union all 

-- select distinct '2023' as year,
-- 'Target' as month,
-- 'MLM' as channel,
-- 'Target' as result_type,
-- 2000000 as margin_amount,
-- 100000000 as gwp,
-- 2.00 as margin_perc
-- from vouch_db.utils_dengueform

-- union all 

select distinct '2023' as year,
'Target' as month,
'AO' as channel,
'Target' as result_type,
30000 as margin_amount,
3000000 as gwp,
1.00 as margin_perc
from vouch_db.utils_dengueform

),



main as(
select * from target

union all

select * from result

)


select * from main 
where channel = 'AO'

order by 
    case    
        when month = 'Target' then 1
        when month = '1' then 2
        when month = '2' then 3
        when month = '3' then 4
        when month = '4' then 5
        when month = '5' then 6
        when month = '6' then 7
        when month = '7' then 8
        when month = '8' then 9
        when month = '9' then 10
        when month = '10' then 11
        when month = '11' then 12
        when month = '12' then 13
        end



Title: Margin by Channel (IG_CM2)
SQL: with tagg as (
select distinct 
atag.affiliate_id, 
tagg.name
from vouch_db.profiles_affiliatetag atag
join vouch_db.profiles_tag tagg on tagg.id = atag.tag_id
where tagg.name in ('at_agentoffice', 'at_broker')
),

calc as
(
SELECT extract(year from cast(ue.sold_on as date)) as year,
extract(month from cast(ue.sold_on as date)) as month,
sum(insurer_commission_received + insurer_incentive_received - subsidy - 
bonus - affiliate_commission_given_out - ae_commission - referral_bonus) as profit,
sum(premium_without_tax) as gwp_without_tax,
-- case when affiliate.account_type = 'mlm_agent' then 'MLM'
--   when affiliate.account_type in ('inspection_garage', 'subagent') then 'IG'
--   when affiliate.account_type is null THEN 'direct_agent'
--       when affiliate.account_type = 'business_manager' THEN 'business_manager'
--   else 'others'
--   end as agent_type
case when affiliate.account_type = 'mlm_agent' and tagg.affiliate_id is null then 'MLM'
  when affiliate.account_type in ('inspection_garage', 'subagent') and tagg.affiliate_id is null then 'IG'
  when affiliate.account_type is null and tagg.affiliate_id is null THEN 'direct_agent'
      when affiliate.account_type = 'business_manager' THEN 'business_manager'
  when tagg.affiliate_id is not null and (affiliate.account_type is null  or affiliate.account_type in ('inspection_garage', 'subagent')) 
                and tagg.name = 'at_agentoffice' then 'AO'      
  when tagg.affiliate_id is not null and affiliate.account_type = 'inspection_garage' and tagg.name = 'at_broker' then 'IG_CM2'                
  else affiliate.account_type
  end as agent_type
FROM vouch_db.utils_uniteconomics ue
    JOIN vouch_db.policy_fairdeesale_unit_economics fsue ON fsue.uniteconomics_id = ue.id
    JOIN vouch_db.policy_fairdeesale sale ON fsue.fairdeesale_id = sale.id 
    JOIN vouch_db.profiles_affiliate affiliate ON affiliate.id = sale.affiliate_id
    left join tagg on tagg.affiliate_id = affiliate.id
WHERE is_valid = TRUE 
-- and unit_type != "compulsory_car_insurance" 
  
  AND extract(year from cast(ue.sold_on as date)) = {{ year }}

  AND affiliate_commission_given_out > 0 
  AND sale.is_cancelled = false
  AND sale.policy_status NOT LIKE '%rejected'
  AND (sale.payment_status IN ('payment_verified',
                              'commission_transferred','credit_approved')
      OR sale.policy_status IN ('policy_sent_to_user',
                                 'policy_delivered_to_user","policy_uploaded') 
      OR EXISTS
        (SELECT 1
        FROM vouch_db.billing_invoice invoice
        JOIN vouch_db.policy_fairdeesaleinvoice sale_invoice_map ON invoice.id = sale_invoice_map.invoice_id
        WHERE sale_invoice_map.fairdee_sale_id = sale.id
            AND invoice.payee = 'fairdee'
            AND invoice.payer = 'customer'
            AND invoice.payment_status != 'unpaid')
        )
group by sale.id, year, month, agent_type
),

target as (
select year_number::varchar as year,
'Target'::varchar as month,
channel::varchar as channel,
'Target'::varchar as result_type,
sum(target_net_revenue_amt) as margin_amount,
sum(target_gwp_amt) as gwp,
sum(target_net_revenue_amt)/sum(target_gwp_amt)*100 as margin_perc
from th_externals.fd_th_revenue_target rev_target
where target_type_name = 'Ideal'
and year_number = '{{ year }}'
group by 1,2,3,4
),


result as (
select year::varchar as year,
month::varchar as month,
agent_type::varchar as channel,
'Result'::varchar as result_type,
sum(profit) as margin_amount, 
sum(gwp_without_tax) as gwp,
sum(profit)*100/sum(gwp_without_tax) as margin_perc
from calc
group by 1,2,3,4
),


main as(
select * from target

union all

select * from result

)


select * from main 
where channel = 'IG_CM2'

order by 
    case    
        when month = 'Target' then 1
        when month = '1' then 2
        when month = '2' then 3
        when month = '3' then 4
        when month = '4' then 5
        when month = '5' then 6
        when month = '6' then 7
        when month = '7' then 8
        when month = '8' then 9
        when month = '9' then 10
        when month = '10' then 11
        when month = '11' then 12
        when month = '12' then 13
        end



Title: % Detail of % Margin by Channel (MTD)
SQL: with eligible_users as (
select distinct users.id 
from vouch_db.profiles_user users
join vouch_db.profiles_userrole urole on urole.user_id = users.id
join vouch_db.profiles_role role on role.id = urole.role_id
where users.email not like '%fairdee.co.th%'
or role.name != 'admin'
), 

ao as(
select distinct atag.affiliate_id, tags.name
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
where tags.name in ('at_agentoffice', 'at_broker')
),

main as (
select 
      case  when ao.affiliate_id is not null then ao.name
            when affiliate.account_type is null then 'direct_agent'
      else affiliate.account_type 
      end, 
	   to_date(sale.policy_sold_on_at::date, 'YYYY/MM/01') sale_month,
	   sale.product_type_name,
	   sum(sale.premium_without_tax_amt) premium_without_tax_amt,
	   --coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0) as vmi_gwp,
	   --coalesce(sum(csale.premium_without_tax_amt),0) as cmi_gwp,
	   sum(sale.fairdee_commission_amt) total_commission_earned,
	   case when sale.product_type_name = 'cmi_solo'
	        then sum(coalesce(cf.commission,0))
	        else sum(coalesce(sale.expected_affiliate_commission_amt, 0)) end as commission_given_out,
	   sum(sale.incentives_amt) promotions_given_out, 
	   sum(sale.referral_bonus_amt) referral_bonus_given_out, 
	   sum(sale.managment_fee_amt) management_fee_given_out, 
	   sum(sale.coupon_amt) coupon_amount_given_out, 
	   ((((coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0))*0.18)/1.03)*0.03) as vmi_wht_given_out,
	   ((((coalesce(sum(csale.premium_without_tax_amt),0))*0.12)/1.03)*0.03) as cmi_wht_given_out,
	   (((((coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0))*0.18)/1.03)/520000)*3000) as vmi_nominee_cost,
	   (((((coalesce(sum(csale.premium_without_tax_amt),0))*0.12)/1.03)/520000)*3000) as cmi_nominee_cost,
	   
	   
	   (sum(sale.fairdee_commission_amt) - 
	   case when sale.product_type_name = 'cmi_solo'
	        then sum(coalesce(cf.commission,0))
	        else sum(coalesce(sale.expected_affiliate_commission_amt, 0)) end -
	   sum(sale.incentives_amt) -
	   sum(coalesce(sale.referral_bonus_amt,0)) -
	   sum(coalesce(sale.managment_fee_amt,0))  
	   ) revenue
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_affiliate affiliate on affiliate.id = sale.affiliate_id
join eligible_users users on users.id = affiliate.user_id
left join ao on ao.affiliate_id = affiliate.id
left join th_datawarehouse.dd_cmi_solo_sale csale on csale.sale_id = sale.id
left join vouch_db.utils_compulsoryinsuranceform cf on cf.id = sale.id
where sale.sale_status = 'is_sold'
and extract(year from policy_sold_on_at::date) = {{ year }}
and extract(month from policy_sold_on_at::date) in ( {{ start_month }} )
-- and ao.affiliate_id is null
group by 1, 2, 3
order by 2, 1
)


select 
case 
    when account_type = 'direct_agent then' then 'FD'
    when account_type = 'mlm_agent' then 'MLM'
    when account_type = 'inspection_garage' then 'IG'
    when account_type = 'at_broker' then 'IG'
    when account_type = 'at_agentoffice' then 'AO' else account_type end as channel,
sale_month,    
-- sum(case when product_type_name = 'vmi' then premium_without_tax_amt else null end) as vmi,
-- sum(case when product_type_name = 'cmi_solo' then premium_without_tax_amt else null end) as cmi,
-- sum(case when product_type_name not in ('vmi', 'cmi_solo') then premium_without_tax_amt else null end as non_motor,
-- null as non_std,
sum(premium_without_tax_amt) as all_gwp,
-- sum(vmi_gwp) as vmi_gwp,
-- sum(cmi_gwp) as cmi_gwp,
sum(total_commission_earned) as com_earn,
sum(commission_given_out) as com_paid,
sum(promotions_given_out) as promotions,
-- sum (affiliate_to_customer_discount) as affiliate_to_customer_discount,
sum(referral_bonus_given_out) as referral_fee,
sum(management_fee_given_out) as management_fee,

case when channel in ('IG', 'AO') then sum(vmi_wht_given_out) + sum(cmi_wht_given_out) + sum(vmi_nominee_cost) + sum(cmi_nominee_cost) else null end as tax_absorbtion,
sum(revenue) as margin_amount,
sum(revenue)*100/sum(premium_without_tax_amt) as margin_perc
from main
group by 1,2
order by 2 asc, 1 asc


Title: QR Payments
SQL: with tqr as (
select * 
from vouch_db.billing_thaiqrrequest 
where is_paid = 1 ),
detail as(
select id 
from vouch_db.billing_invoicedetail
where detail_type in ('compulsory_insurance', 
					  'compulsory_insurance_cancellation_fee', 
					  'instalment_premium',
					  'instalment_penalty', 
					  'previously_paid_amount')
)
select 	tqr.reference_one,
		tqr.reference_two,
		invd.detail_type, 
		inv.amount, 
		inv.tax, 
		inv.duty,
		inv.withholding_tax,
		inv.discount, 
		inv.amount_payable, 
		inv.due_date,
		p.paid_at,
		p.amount_paid
from  tqr 
join vouch_db.billing_payment p on p.vendor_transaction_id = tqr.reference_one
join vouch_db.billing_payment_invoices bpi on bpi.payment_id  = p.id 
join vouch_db.billing_invoice inv on inv.id = bpi.invoice_id 
join vouch_db.billing_invoicedetail invd on invd.invoice_id  = inv.id
left join detail on detail.id = invd.id 
where detail.id is null
and invd.detail_type != 'combined_credit_payout'
and inv.is_deleted = 0
and p.is_deleted = 0
and date(p.paid_at) between '{{dt.start}}' and '{{dt.end}}'

Title: Admin Involvement Sales Reporting Pattern
SQL: with payment_uploaded_by as(
select doc.fairdee_quotation_id, doc.created_by_id, 
	   rank() over(partition by doc.fairdee_quotation_id order by id) rnk
from vouch_db.utils_fairdeedocument doc
where document_type = 'payment_proof'
), 
tqr as(
select tqr.id, created_by_id 
from vouch_db.billing_thaiqrrequest tqr
where tqr.is_paid = 1
), 
pdf as(
select pdf.quotation_query_id, pdf.created_by_id,
	   rank() over(partition by pdf.quotation_query_id order by pdf.id) rnk
from vouch_db.utils_quotationdownload pdf
),
self_serve as(
select sale.id,
	   sale.sold_on::date, 
	   case 
	   		when sale.created_by_id = affiliate.user_id then 'affiliate'::varchar
	   		else 'admin'::varchar
	   end sale_created_by,
	   case 
	   		when fq.created_by_id = affiliate.user_id then 'affiliate'::varchar
	   		else 'admin'::varchar
	   end quotation_created_by,
	   case 
	   		when pdf.created_by_id = affiliate.user_id then 'affiliate'::varchar
	   		else 'admin'::varchar
	   end pdf_created_by,
	   case 
	   		when fqq.created_by_id = affiliate.user_id then 'affiliate'::varchar
	   		else 'admin'::varchar
	   end quotation_query_created_by,
	   case 
	   		when case 
	   				when tqr.id is not null then tqr.created_by_id
	   				when sale.sale_type = 'cbc_to_fairdee' or sale.sale_type = 'credit' then affiliate.user_id
	   				else p.created_by_id
	   			  end = affiliate.user_id then 'affiliate'::varchar
	   		else 'admin'::varchar
	   end payment_uploaded_by 
from vouch_db.policy_fairdeesale sale 
join vouch_db.utils_fairdeequotation fq on fq.id = sale.quotation_id
join vouch_db.utils_fairdeequotationquery fqq on fqq.id = fq.quotation_query_id
left join pdf on pdf.quotation_query_id = fqq.id and pdf.rnk = 1
left join payment_uploaded_by p on p.fairdee_quotation_id = fq.id and p.rnk = 1
left join tqr on tqr.id = fq.thai_qr_request_id 
join vouch_db.profiles_affiliate affiliate on affiliate.id = sale.affiliate_id 
join vouch_db.masterdata_pricelist pl on pl.id = fq.price_list_id 
where pl.is_manual  = 0 
and sale.sold_on between '{{dt.start}}' and '{{dt.end}}'
), 
 a as
 (select   to_date(sold_on, 'YY-mm') sold_on_month,
            self_serve.*, 
		case 
			when sale_created_by = 'affiliate' and 
				 quotation_created_by = 'affiliate' and 
				 pdf_created_by = 'affiliate' and 
				 quotation_query_created_by = 'affiliate' and 
				 payment_uploaded_by = 'affiliate' then 'self_serve'::varchar
			when sale_created_by = 'admin' and 
				 quotation_created_by = 'admin' and 
				 pdf_created_by = 'admin' and 
				 quotation_query_created_by = 'admin' and 
				 payment_uploaded_by = 'admin' then 'sale_reported_by_admin'::varchar
			else 'admin_involvment'::varchar
		end sale_reporting
-- 		count(id) sales
from self_serve
-- group by 1, 2
)
select a.sold_on_month, 
      sale_created_by, 
      quotation_created_by, 
      pdf_created_by, 
      quotation_query_created_by, 
      payment_uploaded_by, 
       count(a.id)/sum(count(a.id)) over(partition by a.sold_on_month)::float percentage_of_sales
from a 
where a.sale_reporting = 'admin_involvment'
group by 1, 2, 3, 4, 5, 6

Title: Sale reporting Pattern
SQL: with payment_uploaded_by as(
select doc.fairdee_quotation_id, doc.created_by_id, 
	   rank() over(partition by doc.fairdee_quotation_id order by id) rnk
from vouch_db.utils_fairdeedocument doc
where document_type = 'payment_proof'
), 
tqr as(
select tqr.id, created_by_id 
from vouch_db.billing_thaiqrrequest tqr
where tqr.is_paid = 1
), 
pdf as(
select pdf.quotation_query_id, pdf.created_by_id,
	   rank() over(partition by pdf.quotation_query_id order by pdf.id) rnk
from vouch_db.utils_quotationdownload pdf
),
self_serve as(
select sale.id,
	   sale.sold_on::date, 
	   case 
	   		when sale.created_by_id = affiliate.user_id then 'affiliate'::varchar
	   		else 'admin'::varchar
	   end sale_created_by,
	   case 
	   		when fq.created_by_id = affiliate.user_id then 'affiliate'::varchar
	   		else 'admin'::varchar
	   end quotation_created_by,
	   case 
	   		when pdf.created_by_id = affiliate.user_id then 'affiliate'::varchar
	   		else 'admin'::varchar
	   end pdf_created_by,
	   case 
	   		when fqq.created_by_id = affiliate.user_id then 'affiliate'::varchar
	   		else 'admin'::varchar
	   end quotation_query_created_by,
	   case 
	   		when case 
	   				when tqr.id is not null then tqr.created_by_id
	   				when sale.sale_type = 'cbc_to_fairdee' or sale.sale_type = 'credit' then affiliate.user_id
	   				else p.created_by_id
	   			  end = affiliate.user_id then 'affiliate'::varchar
	   		else 'admin'::varchar
	   end payment_uploaded_by 
from vouch_db.policy_fairdeesale sale 
join vouch_db.utils_fairdeequotation fq on fq.id = sale.quotation_id
join vouch_db.utils_fairdeequotationquery fqq on fqq.id = fq.quotation_query_id
left join pdf on pdf.quotation_query_id = fqq.id and pdf.rnk = 1
left join payment_uploaded_by p on p.fairdee_quotation_id = fq.id and p.rnk = 1
left join tqr on tqr.id = fq.thai_qr_request_id 
join vouch_db.profiles_affiliate affiliate on affiliate.id = sale.affiliate_id 
join vouch_db.masterdata_pricelist pl on pl.id = fq.price_list_id 
where pl.is_manual  = 0 
and sale.sold_on between '{{dt.start}}' and '{{dt.end}}'
)
select   to_date(sold_on, 'YYYY-mm-01')::date sold_on_month,  
		case 
			when sale_created_by = 'affiliate' and 
				 quotation_created_by = 'affiliate' and 
				 pdf_created_by = 'affiliate' and 
				 quotation_query_created_by = 'affiliate' and 
				 payment_uploaded_by = 'affiliate' then 'self_serve'::varchar
			when sale_created_by = 'admin' and 
				 quotation_created_by = 'admin' and 
				 pdf_created_by = 'admin' and 
				 quotation_query_created_by = 'admin' and 
				 payment_uploaded_by = 'admin' then 'sale_reported_by_admin'::varchar
			else 'admin_involvment'::varchar
		end,
		count(id) sales
from self_serve
group by 1, 2

Title: Defaulted Instalment Payments [new]
SQL: with instalment as(

                select fsi.fairdee_sale_id,
                        inv.id invoice_id,
                        inv.payment_status, 
                        rank() over(partition by fairdee_sale_id order by inv.id) rnk, 
                        rank() over(partition by fairdee_sale_id order by inv.id desc) rnkd
                from vouch_db.policy_fairdeesaleinvoice fsi 
                join vouch_db.policy_fairdeesale sale on sale.id = fsi.fairdee_sale_id
                join (
                        select  id, payment_status, created_at, amount_payable
                        from vouch_db.billing_invoice
                        where payer = 'customer'
                        and payee = 'fairdee'
                        and is_deleted = 0
                     ) inv on inv.id = fsi.invoice_id
                where sale.sale_type = 'instalment'
                and sale.policy_status = 'docs_rejected'
                and sale.sold_on between '{{dt.start}}' and '{{dt.end}}'
                
             
), 
defaulted as(
select distinct ins1.fairdee_sale_id
from 
(   select *
    from instalment ins
where ins.rnk = 1 and ins.payment_status in ('fully_paid', 'overpaid')) ins1 
join (  select * 
from instalment ins 
where ins.rnkd = 1 and ins.payment_status in ('unpaid', 'underpaid')
) ins2 on ins1.fairdee_sale_id = ins2.fairdee_sale_id),
sale as(
  select  
            fsi.fairdee_sale_id, 
            sale.sold_on,
            sale.quotation_id, 
            sale.policy_status,
            sale.affiliate_id,
            inv.id invoice_id,
            inv.payment_status,
            inv.amount_payable,
            min(p.paid_at) paid_at, 
            sum(p.amount_paid) amount_paid, 
            rank() over(partition by fsi.fairdee_sale_id order by inv.id) rnk,
            inv.id as inv_id
            -- select * 
    from vouch_db.policy_fairdeesaleinvoice fsi 
    join vouch_db.policy_fairdeesale sale on sale.id = fsi.fairdee_sale_id
    -- join utils_fairdeequotation fq on fq.id = sale.quotation_id
    -- join (
    --     select  fairdee_quotation_id, 
    --             created_by_id,
    --             created_at,
    --             rank() over(partition by fairdee_quotation_id order by created_at) rnk
    --             from utils_fairdeedocument 
    --             where document_type = 'payment_proof'
    --  ) doc on doc.fairdee_quotation_id = fq.id
    join (
            select  id, payment_status, created_at, amount_payable
            from vouch_db.billing_invoice
            where payer = 'customer'
            and payee = 'fairdee'
            and is_deleted = 0
         ) inv on inv.id = fsi.invoice_id
    left join vouch_db.billing_payment_invoices pi on pi.invoice_id = inv.id
    left join (select * from vouch_db.billing_payment where is_deleted = 0) p on p.id = pi.payment_id
    join vouch_db.billing_invoicedetail invd on invd.invoice_id = inv.id
    join defaulted on defaulted.fairdee_sale_id = sale.id
    where invd.detail_type not in  ('instalment_penalty', 'compulsory_insurance')
    -- and exists (select 1
    --                 from billing_invoice inv
    --                 left join billing_payment_invoices pi on pi.invoice_id = inv.id
    --                 where pi.invoice_id is not null)
    -- and sale.id = 35041
    group by 1, 2, 3, 4, 5, 6, 7, 8)
 
 select 
        affiliate.agent_code, 
        coalesce(affiliate.account_type, 'direct_agent') account_type, 
--        aff.current_rank, 
        sale.fairdee_sale_id sale_id, 
        sale.sold_on sold_on_date, 
        sale.policy_status, 
        sale.payment_status,
        ins.name total_instalment_terms,
        sale.paid_at paid_at, 
        sale.rnk payment_for_instalment,
        CONCAT('https://fairdee.co.th/fairdee-wizard?id=', sale.quotation_id) as sale_link,
        case 
            when tqr.id is not null then 'qr'
            else 'bank_transfer'
        end payment_channel, 
        case when sale.paid_at isnull  then NULL
        	 when affiliate.user_id = doc.created_by_id then 'affiliate'
        	 else 'ops/ast' 
        end
--        if(sale.paid_at is null, NULL, if(affiliate.user_id = doc.created_by_id, 'affiliate', 'ops/ast')) payment_uploaded_by
 from sale 
 left join (
        select  fairdee_quotation_id, 
                created_by_id,
                created_at,
                rank() over(partition by fairdee_quotation_id order by created_at) rnk
                from vouch_db.utils_fairdeedocument 
                where document_type = 'payment_proof'
     ) doc on doc.fairdee_quotation_id = sale.quotation_id and doc.rnk = sale.rnk
join vouch_db.profiles_affiliate affiliate on affiliate.id = sale.affiliate_id
join vouch_db.utils_fairdeequotation fq on fq.id = sale.quotation_id
join vouch_db.utils_fairdeequotationquery fqq on fqq.id = fq.quotation_query_id
join vouch_db.billing_instalmenttype ins on ins.id = fqq.instalment_type_id
left join (select * from vouch_db.billing_thaiqrrequest where is_paid = 1) tqr on tqr.id = fq.thai_qr_request_id
    

Title: New Query
SQL: 
select *
from (select id, min(history_date) docs_rejected_date
		from vouch_db.policy_fairdeesale_historical 
		where policy_status = 'docs_rejected'
		group by 1) csale
join (select id, min(history_date) sale_date
		from vouch_db.policy_fairdeesale_historical
		where payment_status in ('credit_approved', 'payment_verified', 'commission_transferred') 
		group by 1) sale on sale.id =csale.id
where csale.id = 82947
order by 1 desc
limit 1000


Title: % Detail of % Margin by Channel (YTD)
SQL: with eligible_users as (
select distinct users.id 
from vouch_db.profiles_user users
join vouch_db.profiles_userrole urole on urole.user_id = users.id
join vouch_db.profiles_role role on role.id = urole.role_id
where users.email not like '%fairdee.co.th%'
or role.name != 'admin'
), 

ao as(
select distinct atag.affiliate_id, tags.name
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
where tags.name in ('at_agentoffice', 'at_broker')
),

main as (
select 
      case  when ao.affiliate_id is not null then ao.name
            when affiliate.account_type is null then 'direct_agent'
      else affiliate.account_type 
      end, 
	   to_date(sale.policy_sold_on_at::date, 'YYYY/MM/01') sale_month,
	   sale.product_type_name,
	   sum(sale.premium_without_tax_amt) premium_without_tax_amt,
	   --coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0) as vmi_gwp,
	   --coalesce(sum(csale.premium_without_tax_amt),0) as cmi_gwp,
	   sum(sale.fairdee_commission_amt) total_commission_earned,
	   case when sale.product_type_name = 'cmi_solo'
	        then sum(coalesce(cf.commission,0))
	        else sum(coalesce(sale.expected_affiliate_commission_amt, 0)) end as commission_given_out,
	   sum(sale.incentives_amt) promotions_given_out, 
	   sum(sale.referral_bonus_amt) referral_bonus_given_out, 
	   sum(sale.managment_fee_amt) management_fee_given_out, 
	   sum(sale.coupon_amt) coupon_amount_given_out, 
	   ((((coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0))*0.18)/1.03)*0.03) as vmi_wht_given_out,
	   ((((coalesce(sum(csale.premium_without_tax_amt),0))*0.12)/1.03)*0.03) as cmi_wht_given_out,
	   (((((coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0))*0.18)/1.03)/520000)*3000) as vmi_nominee_cost,
	   (((((coalesce(sum(csale.premium_without_tax_amt),0))*0.12)/1.03)/520000)*3000) as cmi_nominee_cost,
	   
	   
	   (sum(sale.fairdee_commission_amt) - 
	   case when sale.product_type_name = 'cmi_solo'
	        then sum(coalesce(cf.commission,0))
	        else sum(coalesce(sale.expected_affiliate_commission_amt, 0)) end -
	   sum(sale.incentives_amt) -
	   sum(coalesce(sale.referral_bonus_amt,0)) -
	   sum(coalesce(sale.managment_fee_amt,0))  
	   ) revenue
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_affiliate affiliate on affiliate.id = sale.affiliate_id
join eligible_users users on users.id = affiliate.user_id
left join ao on ao.affiliate_id = affiliate.id
left join th_datawarehouse.dd_cmi_solo_sale csale on csale.sale_id = sale.id
left join vouch_db.utils_compulsoryinsuranceform cf on cf.id = sale.id
where sale.sale_status = 'is_sold'
and extract(year from policy_sold_on_at::date) = {{ year }}

-- and ao.affiliate_id is null
group by 1, 2, 3
order by 2, 1
)


select 
case 
    when account_type = 'direct_agent then' then 'FD'
    when account_type = 'mlm_agent' then 'MLM'
    when account_type = 'inspection_garage' then 'IG'
    when account_type = 'at_broker' then 'IG'
    when account_type = 'at_agentoffice' then 'AO' else account_type end as channel,
-- sum(case when product_type_name = 'vmi' then premium_without_tax_amt else null end) as vmi,
-- sum(case when product_type_name = 'cmi_solo' then premium_without_tax_amt else null end) as cmi,
-- sum(case when product_type_name not in ('vmi', 'cmi_solo') then premium_without_tax_amt else null end as non_motor,
-- null as non_std,
sum(premium_without_tax_amt) as all_gwp,
-- sum(vmi_gwp) as vmi_gwp,
-- sum(cmi_gwp) as cmi_gwp,
sum(total_commission_earned) as com_earn,
sum(commission_given_out) as com_paid,
sum(promotions_given_out) as promotions,
-- sum (affiliate_to_customer_discount) as affiliate_to_customer_discount,
sum(referral_bonus_given_out) as referral_fee,
sum(management_fee_given_out) as management_fee,

case when channel in ('IG', 'AO') then sum(vmi_wht_given_out) + sum(cmi_wht_given_out) + sum(vmi_nominee_cost) + sum(cmi_nominee_cost) else null end as tax_absorbtion,
sum(revenue) as margin_amount,
sum(revenue)*100/sum(premium_without_tax_amt) as margin_perc
from main
group by 1
order by 1 asc

Title: Margin by Channel (Direct Agent)
SQL: with eligible_users as (
select distinct users.id 
from vouch_db.profiles_user users
join vouch_db.profiles_userrole urole on urole.user_id = users.id
join vouch_db.profiles_role role on role.id = urole.role_id
where users.email not like '%fairdee.co.th%'
or role.name != 'admin'
), 

ao as(
select distinct atag.affiliate_id, tags.name
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
where tags.name in ('at_agentoffice', 'at_broker')
),

fetch as (
select 
      case  when ao.affiliate_id is not null then ao.name
            when affiliate.account_type is null then 'direct_agent'
      else affiliate.account_type 
      end, 
	   to_date(sale.policy_sold_on_at::date, 'YYYY/MM/01') sold_on,
	   sum(sale.premium_without_tax_amt) premium_without_tax_amt,
	   --coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0) as vmi_gwp,
	   --coalesce(sum(csale.premium_without_tax_amt),0) as cmi_gwp,
	   sum(sale.fairdee_commission_amt) total_commission_earned,
	   case when sale.product_type_name = 'cmi_solo'
	        then sum(coalesce(cf.commission,0))
	        else sum(coalesce(sale.expected_affiliate_commission_amt, 0)) end as commission_given_out,
	   sum(sale.incentives_amt) promotions_given_out, 
	   sum(sale.referral_bonus_amt) referral_bonus_given_out, 
	   sum(sale.managment_fee_amt) management_fee_given_out, 
	   sum(sale.coupon_amt) coupon_amount_given_out, 
	   ((((coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0))*0.18)/1.03)*0.03) as vmi_wht_given_out,
	   ((((coalesce(sum(csale.premium_without_tax_amt),0))*0.12)/1.03)*0.03) as cmi_wht_given_out,
	   (((((coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0))*0.18)/1.03)/520000)*3000) as vmi_nominee_cost,
	   (((((coalesce(sum(csale.premium_without_tax_amt),0))*0.12)/1.03)/520000)*3000) as cmi_nominee_cost,
	   
	   
	   (sum(sale.fairdee_commission_amt) - 
	   case when sale.product_type_name = 'cmi_solo'
	        then sum(coalesce(cf.commission,0))
	        else sum(coalesce(sale.expected_affiliate_commission_amt, 0)) end -
	   sum(sale.incentives_amt) -
	   sum(coalesce(sale.referral_bonus_amt,0)) -
	   sum(coalesce(sale.managment_fee_amt,0))  
	   ) revenue
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_affiliate affiliate on affiliate.id = sale.affiliate_id
join eligible_users users on users.id = affiliate.user_id
left join ao on ao.affiliate_id = affiliate.id
left join th_datawarehouse.dd_cmi_solo_sale csale on csale.sale_id = sale.id
left join vouch_db.utils_compulsoryinsuranceform cf on cf.id = sale.id
where sale.sale_status = 'is_sold'
and extract(year from policy_sold_on_at::date) = {{ year }}
-- and ao.affiliate_id is null
group by 1, 2, sale.product_type_name
order by 2, 1
),

combined as (
select 'all' as policy_type, 
case 
    when account_type = 'direct_agent then' then 'FD'
    when account_type = 'mlm_agent' then 'MLM'
    when account_type = 'inspection_garage' then 'IG'
    when account_type = 'at_broker' then 'IG'
    when account_type = 'at_agentoffice' then 'AO' else account_type end as account_type,
extract(year from sold_on) as year,
extract(month from sold_on) as month,
sum(premium_without_tax_amt) as gwp, 
sum(revenue) as margin_amount
from fetch
group by 1,2,3,4
),


result as (
select  year::text,
month::text,
account_type as channel,
'Result' as result_type,
round(sum(margin_amount)) as margin_amount, 
round(sum(gwp)) as gwp,
round(sum(margin_amount)*100/sum(gwp),2) as margin_perc
from combined

group by 1,2,3
),


target as (
-- select distinct '2023' as year,
-- 'Target' as month,
-- 'IG' as channel,
-- 'Target' as result_type,
-- 600000 as margin_amount,
-- 100000000 as gwp,
-- 0.60 as margin_perc
-- from vouch_db.utils_dengueform

-- union all

select distinct '2023' as year,
'Target' as month,
'FD' as channel,
'Target' as result_type,
700000 as margin_amount,
35000000 as gwp,
2.00 as margin_perc
from vouch_db.utils_dengueform

-- union all 

-- select distinct '2023' as year,
-- 'Target' as month,
-- 'MLM' as channel,
-- 'Target' as result_type,
-- 2000000 as margin_amount,
-- 100000000 as gwp,
-- 2.00 as margin_perc
-- from vouch_db.utils_dengueform

-- union all 

-- select distinct '2023' as year,
-- 'Target' as month,
-- 'AO' as channel,
-- 'Target' as result_type,
-- 30000 as margin_amount,
-- 3000000 as gwp,
-- 1.00 as margin_perc
-- from vouch_db.utils_dengueform

),



main as(
select * from target

union all

select * from result

)


select * from main 
where channel in ('direct_agent', 'FD')

order by 
    case    
        when month = 'Target' then 1
        when month = '1' then 2
        when month = '2' then 3
        when month = '3' then 4
        when month = '4' then 5
        when month = '5' then 6
        when month = '6' then 7
        when month = '7' then 8
        when month = '8' then 9
        when month = '9' then 10
        when month = '10' then 11
        when month = '11' then 12
        when month = '12' then 13
        end



Title: Margin by Channel (MLM)
SQL: with eligible_users as (
select distinct users.id 
from vouch_db.profiles_user users
join vouch_db.profiles_userrole urole on urole.user_id = users.id
join vouch_db.profiles_role role on role.id = urole.role_id
where users.email not like '%fairdee.co.th%'
or role.name != 'admin'
), 

ao as(
select distinct atag.affiliate_id, tags.name
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
where tags.name in ('at_agentoffice', 'at_broker')
),

fetch as (
select 
      case  when ao.affiliate_id is not null then ao.name
            when affiliate.account_type is null then 'direct_agent'
      else affiliate.account_type 
      end, 
	   to_date(sale.policy_sold_on_at::date, 'YYYY/MM/01') sold_on,
	   sum(sale.premium_without_tax_amt) premium_without_tax_amt,
	   --coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0) as vmi_gwp,
	   --coalesce(sum(csale.premium_without_tax_amt),0) as cmi_gwp,
	   sum(sale.fairdee_commission_amt) total_commission_earned,
	   case when sale.product_type_name = 'cmi_solo'
	        then sum(coalesce(cf.commission,0))
	        else sum(coalesce(sale.expected_affiliate_commission_amt, 0)) end as commission_given_out,
	   sum(sale.incentives_amt) promotions_given_out, 
	   sum(sale.referral_bonus_amt) referral_bonus_given_out, 
	   sum(sale.managment_fee_amt) management_fee_given_out, 
	   sum(sale.coupon_amt) coupon_amount_given_out, 
	   ((((coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0))*0.18)/1.03)*0.03) as vmi_wht_given_out,
	   ((((coalesce(sum(csale.premium_without_tax_amt),0))*0.12)/1.03)*0.03) as cmi_wht_given_out,
	   (((((coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0))*0.18)/1.03)/520000)*3000) as vmi_nominee_cost,
	   (((((coalesce(sum(csale.premium_without_tax_amt),0))*0.12)/1.03)/520000)*3000) as cmi_nominee_cost,
	   
	   
	   (sum(sale.fairdee_commission_amt) - 
	   case when sale.product_type_name = 'cmi_solo'
	        then sum(coalesce(cf.commission,0))
	        else sum(coalesce(sale.expected_affiliate_commission_amt, 0)) end -
	   sum(sale.incentives_amt) -
	   sum(coalesce(sale.referral_bonus_amt,0)) -
	   sum(coalesce(sale.managment_fee_amt,0))  
	   ) revenue
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_affiliate affiliate on affiliate.id = sale.affiliate_id
join eligible_users users on users.id = affiliate.user_id
left join ao on ao.affiliate_id = affiliate.id
left join th_datawarehouse.dd_cmi_solo_sale csale on csale.sale_id = sale.id
left join vouch_db.utils_compulsoryinsuranceform cf on cf.id = sale.id
where sale.sale_status = 'is_sold'
and extract(year from policy_sold_on_at::date) = {{ year }}
-- and ao.affiliate_id is null
group by 1, 2, sale.product_type_name
order by 2, 1
),

combined as (
select 'all' as policy_type, 
case 
    when account_type = 'direct_agent then' then 'FD'
    when account_type = 'mlm_agent' then 'MLM'
    when account_type = 'inspection_garage' then 'IG'
    when account_type = 'at_broker' then 'IG'
    when account_type = 'at_agentoffice' then 'AO' else account_type end as account_type,
extract(year from sold_on) as year,
extract(month from sold_on) as month,
sum(premium_without_tax_amt) as gwp, 
sum(revenue) as margin_amount
from fetch
group by 1,2,3,4
),


result as (
select  year::text,
month::text,
account_type as channel,
'Result' as result_type,
round(sum(margin_amount)) as margin_amount, 
round(sum(gwp)) as gwp,
round(sum(margin_amount)*100/sum(gwp),2) as margin_perc
from combined

group by 1,2,3
),


target as (
-- select distinct '2023' as year,
-- 'Target' as month,
-- 'IG' as channel,
-- 'Target' as result_type,
-- 600000 as margin_amount,
-- 100000000 as gwp,
-- 0.60 as margin_perc
-- from vouch_db.utils_dengueform

-- union all

-- select distinct '2023' as year,
-- 'Target' as month,
-- 'FD' as channel,
-- 'Target' as result_type,
-- 700000 as margin_amount,
-- 35000000 as gwp,
-- 2.00 as margin_perc
-- from vouch_db.utils_dengueform

-- union all 

select distinct '2023' as year,
'Target' as month,
'MLM' as channel,
'Target' as result_type,
2000000 as margin_amount,
100000000 as gwp,
2.00 as margin_perc
from vouch_db.utils_dengueform

-- union all 

-- select distinct '2023' as year,
-- 'Target' as month,
-- 'AO' as channel,
-- 'Target' as result_type,
-- 30000 as margin_amount,
-- 3000000 as gwp,
-- 1.00 as margin_perc
-- from vouch_db.utils_dengueform

),



main as(
select * from target

union all

select * from result

)


select * from main 
where channel = 'MLM'

order by 
    case    
        when month = 'Target' then 1
        when month = '1' then 2
        when month = '2' then 3
        when month = '3' then 4
        when month = '4' then 5
        when month = '5' then 6
        when month = '6' then 7
        when month = '7' then 8
        when month = '8' then 9
        when month = '9' then 10
        when month = '10' then 11
        when month = '11' then 12
        when month = '12' then 13
        end



Title: Margin by Channel (IG)
SQL: with eligible_users as (
select distinct users.id 
from vouch_db.profiles_user users
join vouch_db.profiles_userrole urole on urole.user_id = users.id
join vouch_db.profiles_role role on role.id = urole.role_id
where users.email not like '%fairdee.co.th%'
or role.name != 'admin'
), 

ao as(
select distinct atag.affiliate_id, tags.name
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
where tags.name in ('at_agentoffice', 'at_broker')
),

fetch as (
select 
      case  when ao.affiliate_id is not null then ao.name
            when affiliate.account_type is null then 'direct_agent'
      else affiliate.account_type 
      end, 
	   to_date(sale.policy_sold_on_at::date, 'YYYY/MM/01') sold_on,
	   sum(sale.premium_without_tax_amt) premium_without_tax_amt,
	   --coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0) as vmi_gwp,
	   --coalesce(sum(csale.premium_without_tax_amt),0) as cmi_gwp,
	   sum(sale.fairdee_commission_amt) total_commission_earned,
	   case when sale.product_type_name = 'cmi_solo'
	        then sum(coalesce(cf.commission,0))
	        else sum(coalesce(sale.expected_affiliate_commission_amt, 0)) end as commission_given_out,
	   sum(sale.incentives_amt) promotions_given_out, 
	   sum(sale.referral_bonus_amt) referral_bonus_given_out, 
	   sum(sale.managment_fee_amt) management_fee_given_out, 
	   sum(sale.coupon_amt) coupon_amount_given_out, 
	   ((((coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0))*0.18)/1.03)*0.03) as vmi_wht_given_out,
	   ((((coalesce(sum(csale.premium_without_tax_amt),0))*0.12)/1.03)*0.03) as cmi_wht_given_out,
	   (((((coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0))*0.18)/1.03)/520000)*3000) as vmi_nominee_cost,
	   (((((coalesce(sum(csale.premium_without_tax_amt),0))*0.12)/1.03)/520000)*3000) as cmi_nominee_cost,
	   
	   
	   (sum(sale.fairdee_commission_amt) - 
	   case when sale.product_type_name = 'cmi_solo'
	        then sum(coalesce(cf.commission,0))
	        else sum(coalesce(sale.expected_affiliate_commission_amt, 0)) end -
	   sum(sale.incentives_amt) -
	   sum(coalesce(sale.referral_bonus_amt,0)) -
	   sum(coalesce(sale.managment_fee_amt,0))  
	   ) revenue
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_affiliate affiliate on affiliate.id = sale.affiliate_id
join eligible_users users on users.id = affiliate.user_id
left join ao on ao.affiliate_id = affiliate.id
left join th_datawarehouse.dd_cmi_solo_sale csale on csale.sale_id = sale.id
left join vouch_db.utils_compulsoryinsuranceform cf on cf.id = sale.id
where sale.sale_status = 'is_sold'
and extract(year from policy_sold_on_at::date) = {{ year }}
-- and ao.affiliate_id is null
group by 1, 2, sale.product_type_name
order by 2, 1
),

combined as (
select 'all' as policy_type, 
case 
    when account_type = 'direct_agent then' then 'FD'
    when account_type = 'mlm_agent' then 'MLM'
    when account_type = 'inspection_garage' then 'IG'
    when account_type = 'at_broker' then 'IG'
    when account_type = 'at_agentoffice' then 'AO' else account_type end as account_type,
extract(year from sold_on) as year,
extract(month from sold_on) as month,
sum(premium_without_tax_amt) as gwp, 
sum(revenue) as margin_amount
from fetch
group by 1,2,3,4
),


result as (
select  year::text,
month::text,
account_type as channel,
'Result' as result_type,
round(sum(margin_amount)) as margin_amount, 
round(sum(gwp)) as gwp,
round(sum(margin_amount)*100/sum(gwp),2) as margin_perc
from combined

group by 1,2,3
),


target as (
select distinct '2023' as year,
'Target' as month,
'IG' as channel,
'Target' as result_type,
600000 as margin_amount,
100000000 as gwp,
0.60 as margin_perc
from vouch_db.utils_dengueform

-- union all

-- select distinct '2023' as year,
-- 'Target' as month,
-- 'FD' as channel,
-- 'Target' as result_type,
-- 700000 as margin_amount,
-- 35000000 as gwp,
-- 2.00 as margin_perc
-- from vouch_db.utils_dengueform

-- union all 

-- select distinct '2023' as year,
-- 'Target' as month,
-- 'MLM' as channel,
-- 'Target' as result_type,
-- 2000000 as margin_amount,
-- 100000000 as gwp,
-- 2.00 as margin_perc
-- from vouch_db.utils_dengueform

-- union all 

-- select distinct '2023' as year,
-- 'Target' as month,
-- 'AO' as channel,
-- 'Target' as result_type,
-- 30000 as margin_amount,
-- 3000000 as gwp,
-- 1.00 as margin_perc
-- from vouch_db.utils_dengueform

),



main as(
select * from target

union all

select * from result

)


select * from main 
where channel = 'IG'

order by 
    case    
        when month = 'Target' then 1
        when month = '1' then 2
        when month = '2' then 3
        when month = '3' then 4
        when month = '4' then 5
        when month = '5' then 6
        when month = '6' then 7
        when month = '7' then 8
        when month = '8' then 9
        when month = '9' then 10
        when month = '10' then 11
        when month = '11' then 12
        when month = '12' then 13
        end



Title: Margin Info All per Month
SQL: with eligible_users as (
select distinct users.id 
from vouch_db.profiles_user users
join vouch_db.profiles_userrole urole on urole.user_id = users.id
join vouch_db.profiles_role role on role.id = urole.role_id
where users.email not like '%fairdee.co.th%'
or role.name != 'admin'
), 

ao as(
select distinct atag.affiliate_id, tags.name
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
where tags.name in ('at_agentoffice', 'at_broker')
),

fetch as (
select 
      case  when ao.affiliate_id is not null then ao.name
            when affiliate.account_type is null then 'direct_agent'
      else affiliate.account_type 
      end, 
	   to_date(sale.policy_sold_on_at::date, 'YYYY/MM/01') sold_on,
	   sum(sale.premium_without_tax_amt) premium_without_tax_amt,
	   --coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0) as vmi_gwp,
	   --coalesce(sum(csale.premium_without_tax_amt),0) as cmi_gwp,
	   sum(sale.fairdee_commission_amt) total_commission_earned,
	   case when sale.product_type_name = 'cmi_solo'
	        then sum(coalesce(cf.commission,0))
	        else sum(coalesce(sale.expected_affiliate_commission_amt, 0)) end as commission_given_out,
	   sum(sale.incentives_amt) promotions_given_out, 
	   sum(sale.referral_bonus_amt) referral_bonus_given_out, 
	   sum(sale.managment_fee_amt) management_fee_given_out, 
	   sum(sale.coupon_amt) coupon_amount_given_out, 
	   ((((coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0))*0.18)/1.03)*0.03) as vmi_wht_given_out,
	   ((((coalesce(sum(csale.premium_without_tax_amt),0))*0.12)/1.03)*0.03) as cmi_wht_given_out,
	   (((((coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0))*0.18)/1.03)/520000)*3000) as vmi_nominee_cost,
	   (((((coalesce(sum(csale.premium_without_tax_amt),0))*0.12)/1.03)/520000)*3000) as cmi_nominee_cost,
	   
	   
	   (sum(sale.fairdee_commission_amt) - 
	   case when sale.product_type_name = 'cmi_solo'
	        then sum(coalesce(cf.commission,0))
	        else sum(coalesce(sale.expected_affiliate_commission_amt, 0)) end -
	   sum(sale.incentives_amt) -
	   sum(coalesce(sale.referral_bonus_amt,0)) -
	   sum(coalesce(sale.managment_fee_amt,0))  
	   ) revenue
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_affiliate affiliate on affiliate.id = sale.affiliate_id
join eligible_users users on users.id = affiliate.user_id
left join ao on ao.affiliate_id = affiliate.id
left join th_datawarehouse.dd_cmi_solo_sale csale on csale.sale_id = sale.id
left join vouch_db.utils_compulsoryinsuranceform cf on cf.id = sale.id
where sale.sale_status = 'is_sold'
and extract(year from policy_sold_on_at::date) = {{ year }}
-- and ao.affiliate_id is null
group by 1, 2, sale.product_type_name
order by 2, 1
),

combined as (
select 'all' as policy_type, 
case 
    when account_type = 'direct_agent then' then 'FD'
    when account_type = 'mlm_agent' then 'MLM'
    when account_type = 'inspection_garage' then 'IG'
    when account_type = 'at_broker' then 'IG'
    when account_type = 'at_agentoffice' then 'AO' else account_type end as account_type,
extract(year from sold_on) as year,
extract(month from sold_on) as month,
sum(premium_without_tax_amt) as gwp, 
sum(revenue) as margin_amount
from fetch
group by 1,2,3,4
),


result as (
select  year::text,
month::text,
'Result' as result_type,
round(sum(margin_amount)) as margin_amount, 
round(sum(gwp)) as gwp,
round(sum(margin_amount)*100/sum(gwp),2) as margin_perc
from combined

group by 1,2,3
),



target as (
select distinct '2023' as year,
'Target' as month,
'Target' as result_type,
5524200 as margin_amount,
376000000 as gwp,
1.47 as margin_perc
from vouch_db.utils_dengueform
),


main as(
select * from target

union all

select * from result

)


select * from main 

order by 
    case    
        when month = 'Target' then 1
        when month = '1' then 2
        when month = '2' then 3
        when month = '3' then 4
        when month = '4' then 5
        when month = '5' then 6
        when month = '6' then 7
        when month = '7' then 8
        when month = '8' then 9
        when month = '9' then 10
        when month = '10' then 11
        when month = '11' then 12
        when month = '12' then 13
        end



Title: Info per Month per Channel
SQL: with eligible_users as (
select distinct users.id 
from vouch_db.profiles_user users
join vouch_db.profiles_userrole urole on urole.user_id = users.id
join vouch_db.profiles_role role on role.id = urole.role_id
where users.email not like '%fairdee.co.th%'
or role.name != 'admin'
), 

ao as(
select distinct atag.affiliate_id, tags.name
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
where tags.name in ('at_agentoffice', 'at_broker')
),

fetch as (
select 
      case  when ao.affiliate_id is not null then ao.name
            when affiliate.account_type is null then 'direct_agent'
      else affiliate.account_type 
      end, 
	   to_date(sale.policy_sold_on_at::date, 'YYYY/MM/01') sold_on,
	   sum(sale.premium_without_tax_amt) premium_without_tax_amt,
	   --coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0) as vmi_gwp,
	   --coalesce(sum(csale.premium_without_tax_amt),0) as cmi_gwp,
	   sum(sale.fairdee_commission_amt) total_commission_earned,
	   case when sale.product_type_name = 'cmi_solo'
	        then sum(coalesce(cf.commission,0))
	        else sum(coalesce(sale.expected_affiliate_commission_amt, 0)) end as commission_given_out,
	   sum(sale.incentives_amt) promotions_given_out, 
	   sum(sale.referral_bonus_amt) referral_bonus_given_out, 
	   sum(sale.managment_fee_amt) management_fee_given_out, 
	   sum(sale.coupon_amt) coupon_amount_given_out, 
	   ((((coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0))*0.18)/1.03)*0.03) as vmi_wht_given_out,
	   ((((coalesce(sum(csale.premium_without_tax_amt),0))*0.12)/1.03)*0.03) as cmi_wht_given_out,
	   (((((coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0))*0.18)/1.03)/520000)*3000) as vmi_nominee_cost,
	   (((((coalesce(sum(csale.premium_without_tax_amt),0))*0.12)/1.03)/520000)*3000) as cmi_nominee_cost,
	   
	   
	   (sum(sale.fairdee_commission_amt) - 
	   case when sale.product_type_name = 'cmi_solo'
	        then sum(coalesce(cf.commission,0))
	        else sum(coalesce(sale.expected_affiliate_commission_amt, 0)) end -
	   sum(sale.incentives_amt) -
	   sum(coalesce(sale.referral_bonus_amt,0)) -
	   sum(coalesce(sale.managment_fee_amt,0))  
	   ) revenue
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_affiliate affiliate on affiliate.id = sale.affiliate_id
join eligible_users users on users.id = affiliate.user_id
left join ao on ao.affiliate_id = affiliate.id
left join th_datawarehouse.dd_cmi_solo_sale csale on csale.sale_id = sale.id
left join vouch_db.utils_compulsoryinsuranceform cf on cf.id = sale.id
where sale.sale_status = 'is_sold'
and extract(year from policy_sold_on_at::date) = {{ year }}
-- and ao.affiliate_id is null
group by 1, 2, sale.product_type_name
order by 2, 1
),

combined as (
select 'all' as policy_type, 
case 
    when account_type = 'direct_agent then' then 'FD'
    when account_type = 'mlm_agent' then 'MLM'
    when account_type = 'inspection_garage' then 'IG'
    when account_type = 'at_broker' then 'IG'
    when account_type = 'at_agentoffice' then 'AO' else account_type end as account_type,
extract(year from sold_on) as year,
extract(month from sold_on) as month,
sum(premium_without_tax_amt) as gwp, 
sum(revenue) as margin_amount
from fetch
group by 1,2,3,4
),


result as (
select  year::text,
month::text,
account_type as channel,
'Result' as result_type,
round(sum(margin_amount)) as margin_amount, 
round(sum(gwp)) as gwp,
round(sum(margin_amount)*100/sum(gwp),2) as margin_perc
from combined

group by 1,2,3
),


target as (
select distinct '2023' as year,
'Target' as month,
'IG' as channel,
'Target' as result_type,
600000 as margin_amount,
100000000 as gwp,
0.60 as margin_perc
from vouch_db.utils_dengueform

union all

select distinct '2023' as year,
'Target' as month,
'FD' as channel,
'Target' as result_type,
700000 as margin_amount,
35000000 as gwp,
2.00 as margin_perc
from vouch_db.utils_dengueform

union all 

select distinct '2023' as year,
'Target' as month,
'MLM' as channel,
'Target' as result_type,
2000000 as margin_amount,
100000000 as gwp,
2.00 as margin_perc
from vouch_db.utils_dengueform

union all 

select distinct '2023' as year,
'Target' as month,
'AO' as channel,
'Target' as result_type,
30000 as margin_amount,
3000000 as gwp,
1.00 as margin_perc
from vouch_db.utils_dengueform

),



main as(
select * from target

union all

select * from result

)


select * from main 

order by 
    case    
        when month = 'Target' then 1
        when month = '1' then 2
        when month = '2' then 3
        when month = '3' then 4
        when month = '4' then 5
        when month = '5' then 6
        when month = '6' then 7
        when month = '7' then 8
        when month = '8' then 9
        when month = '9' then 10
        when month = '10' then 11
        when month = '11' then 12
        when month = '12' then 13
        end



Title: Info MTD
SQL: with eligible_users as (
select distinct users.id 
from vouch_db.profiles_user users
join vouch_db.profiles_userrole urole on urole.user_id = users.id
join vouch_db.profiles_role role on role.id = urole.role_id
where users.email not like '%fairdee.co.th%'
or role.name != 'admin'
), 

ao as(
select distinct atag.affiliate_id, tags.name
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
where tags.name in ('at_agentoffice', 'at_broker')
),

main as (
select 
      case  when ao.affiliate_id is not null then ao.name
            when affiliate.account_type is null then 'direct_agent'
      else affiliate.account_type 
      end, 
	   to_date(sale.policy_sold_on_at::date, 'YYYY/MM/01') sale_month,
	   sum(sale.premium_without_tax_amt) premium_without_tax_amt,
	   --coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0) as vmi_gwp,
	   --coalesce(sum(csale.premium_without_tax_amt),0) as cmi_gwp,
	   sum(sale.fairdee_commission_amt) total_commission_earned,
	   case when sale.product_type_name = 'cmi_solo'
	        then sum(coalesce(cf.commission,0))
	        else sum(coalesce(sale.expected_affiliate_commission_amt, 0)) end as commission_given_out,
	   sum(sale.incentives_amt) promotions_given_out, 
	   sum(sale.referral_bonus_amt) referral_bonus_given_out, 
	   sum(sale.managment_fee_amt) management_fee_given_out, 
	   sum(sale.coupon_amt) coupon_amount_given_out, 
	   ((((coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0))*0.18)/1.03)*0.03) as vmi_wht_given_out,
	   ((((coalesce(sum(csale.premium_without_tax_amt),0))*0.12)/1.03)*0.03) as cmi_wht_given_out,
	   (((((coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0))*0.18)/1.03)/520000)*3000) as vmi_nominee_cost,
	   (((((coalesce(sum(csale.premium_without_tax_amt),0))*0.12)/1.03)/520000)*3000) as cmi_nominee_cost,
	   
	   
	   (sum(sale.fairdee_commission_amt) - 
	   case when sale.product_type_name = 'cmi_solo'
	        then sum(coalesce(cf.commission,0))
	        else sum(coalesce(sale.expected_affiliate_commission_amt, 0)) end -
	   sum(sale.incentives_amt) -
	   sum(coalesce(sale.referral_bonus_amt,0)) -
	   sum(coalesce(sale.managment_fee_amt,0))  
	   ) revenue
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_affiliate affiliate on affiliate.id = sale.affiliate_id
join eligible_users users on users.id = affiliate.user_id
left join ao on ao.affiliate_id = affiliate.id
left join th_datawarehouse.dd_cmi_solo_sale csale on csale.sale_id = sale.id
left join vouch_db.utils_compulsoryinsuranceform cf on cf.id = sale.id
where sale.sale_status = 'is_sold'
and extract(year from policy_sold_on_at::date) = {{ year }}
and extract(month from policy_sold_on_at::date) in ( {{ start_month }} )
-- and ao.affiliate_id is null
group by 1, 2, sale.product_type_name
order by 2, 1
),

combined as (
select 'all' as policy_type, 
case 
    when account_type = 'direct_agent then' then 'FD'
    when account_type = 'mlm_agent' then 'MLM'
    when account_type = 'inspection_garage' then 'IG'
    when account_type = 'at_broker' then 'IG'
    when account_type = 'at_agentoffice' then 'AO' else account_type end as account_type,
sum(premium_without_tax_amt) as gwp, 
sum(revenue) as margin_amount
from main
group by 1,2

)

select sum(margin_amount) as margin_amount, 
sum(gwp) as gwp,
sum(margin_amount)*100/sum(gwp) as margin_perc
from combined
where account_type in ({{agent_type}})



Title: Info YTD
SQL: with eligible_users as (
select distinct users.id 
from vouch_db.profiles_user users
join vouch_db.profiles_userrole urole on urole.user_id = users.id
join vouch_db.profiles_role role on role.id = urole.role_id
where users.email not like '%fairdee.co.th%'
or role.name != 'admin'
), 

ao as(
select distinct atag.affiliate_id, tags.name
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
where tags.name in ('at_agentoffice', 'at_broker')
),

main as (
select 
      case  when ao.affiliate_id is not null then ao.name
            when affiliate.account_type is null then 'direct_agent'
      else affiliate.account_type 
      end, 
	   to_date(sale.policy_sold_on_at::date, 'YYYY/MM/01') sale_month,
	   sum(sale.premium_without_tax_amt) premium_without_tax_amt,
	   --coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0) as vmi_gwp,
	   --coalesce(sum(csale.premium_without_tax_amt),0) as cmi_gwp,
	   sum(sale.fairdee_commission_amt) total_commission_earned,
	   case when sale.product_type_name = 'cmi_solo'
	        then sum(coalesce(cf.commission,0))
	        else sum(coalesce(sale.expected_affiliate_commission_amt, 0)) end as commission_given_out,
	   sum(sale.incentives_amt) promotions_given_out, 
	   sum(sale.referral_bonus_amt) referral_bonus_given_out, 
	   sum(sale.managment_fee_amt) management_fee_given_out, 
	   sum(sale.coupon_amt) coupon_amount_given_out, 
	   ((((coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0))*0.18)/1.03)*0.03) as vmi_wht_given_out,
	   ((((coalesce(sum(csale.premium_without_tax_amt),0))*0.12)/1.03)*0.03) as cmi_wht_given_out,
	   (((((coalesce(sum(sale.premium_without_tax_amt),0) - coalesce(sum(csale.premium_without_tax_amt),0))*0.18)/1.03)/520000)*3000) as vmi_nominee_cost,
	   (((((coalesce(sum(csale.premium_without_tax_amt),0))*0.12)/1.03)/520000)*3000) as cmi_nominee_cost,
	   
	   
	   (sum(sale.fairdee_commission_amt) - 
	   case when sale.product_type_name = 'cmi_solo'
	        then sum(coalesce(cf.commission,0))
	        else sum(coalesce(sale.expected_affiliate_commission_amt, 0)) end -
	   sum(sale.incentives_amt) -
	   sum(coalesce(sale.referral_bonus_amt,0)) -
	   sum(coalesce(sale.managment_fee_amt,0))  
	   ) revenue
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_affiliate affiliate on affiliate.id = sale.affiliate_id
join eligible_users users on users.id = affiliate.user_id
left join ao on ao.affiliate_id = affiliate.id
left join th_datawarehouse.dd_cmi_solo_sale csale on csale.sale_id = sale.id
left join vouch_db.utils_compulsoryinsuranceform cf on cf.id = sale.id
where sale.sale_status = 'is_sold'
and extract(year from policy_sold_on_at::date) = {{ year }}
-- and ao.affiliate_id is null
group by 1, 2, sale.product_type_name
order by 2, 1
),

combined as (
select 'all' as policy_type, 
case 
    when account_type = 'direct_agent then' then 'FD'
    when account_type = 'mlm_agent' then 'MLM'
    when account_type = 'inspection_garage' then 'IG'
    when account_type = 'at_broker' then 'IG'
    when account_type = 'at_agentoffice' then 'AO' else account_type end as account_type,
sum(premium_without_tax_amt) as gwp, 
sum(revenue) as margin_amount
from main
group by 1,2
)

select sum(margin_amount) as margin_amount, 
sum(gwp) as gwp,
sum(margin_amount)*100/sum(gwp) as margin_perc
from combined
where account_type in ({{agent_type}})



Title: Chatwoot resolution time for labels
SQL: with cte_tags as (
  Select
    *
  from
    chatwoot.tags
  where
    name not in ('rm_chat', 'r_chat')
),
cte_msg as (
  select
    conversation_id conv_id,
    max(
      case when content like '%resolved by%' then created_at end
    ) resolved_time,
    min(created_at) created_at
  from
    chatwoot.messages
  group by
    conversation_id
),
cte_taggings as (
  select
    t.taggable_id conv_id,
    tag_id,
    name tag_name,
    t.created_at tag_created_at,
    lead(t.created_at) over(
      partition by taggable_id
      order by
        t.created_at
    ) next_tag_time,
    rank() over(
      partition by taggable_id
      order by
        t.created_at
    ) rn,
    rank() over(
      partition by taggable_id
      order by
        t.created_at desc
    ) reverse_rn,
    conv.created_at,
    resolved_time
  from
    chatwoot.taggings t
    join cte_tags tags on tags.id = t.tag_id
    join cte_msg conv on conv.conv_id = t.taggable_id
  where
    t.taggable_type = 'Conversation'
    and t.context = 'labels'
),
tags as(
  select
    conv_id,
    tag_name,
    case when rn = 1 then created_at else tag_created_at end tag_created_at,
    case when reverse_rn = 1 then resolved_time else next_tag_time end next_tag_time
  from
    cte_taggings
),
reassigned as(
  select
    conversation_id conv_id,
    count(distinct sender_id) number_of_users
  from
    chatwoot.messages
  where
    sender_type = 'User'
  group by
    conversation_id
  having
    count(distinct sender_id) > 1
),
conv as (
  select
    conv.id,
    conv.assignee_id,
    conv.contact_id,
    (
      case when (
        m.content like '%self-assigned%'
        or m.content like '%Assigned to%'
      )
      and m.content not like '%by Akshay%' then 1 else 0 end
    ) as not_monitored,
    conv.created_at at time zone 'utc' at time zone 'ict' as created_at,
    m.id message_id,
    (
      case when m.content like '%Conversation was reopened by%' then m.id end
    ) as reopened,
    m.created_at at time zone 'utc' at time zone 'ict' message_time,
    case when content like '%resolved by%' then m.created_at at time zone 'utc' at time zone 'ict' end resolved_time,
    message_type,
    case when content like '%reopened%'
    or content like '%snoozed%' then m.updated_at at time zone 'utc' at time zone 'ict' end reopen_snooze_time,
    case when content like '%reopened%'
    or content like '%resolved%' then m.updated_at at time zone 'utc' at time zone 'ict' end reopen_resolve_time,
    case when content like '%reopened%' then m.updated_at at time zone 'utc' at time zone 'ict' end reopen_time,
    case when content like '%snoozed%' then m.updated_at at time zone 'utc' at time zone 'ict' end snooze_time,
    coalesce(tag_name, 'No Label') tag_name,
    next_tag_time at time zone 'utc' at time zone 'ict' next_tag_time,
    coalesce(tag_created_at, m.created_at) at time zone 'utc' at time zone 'ict' tag_created_at
  from
    chatwoot.conversations conv
    join chatwoot.messages m on m.conversation_id = conv.id
    left join tags on conv.id = tags.conv_id
    and m.created_at >= tags.tag_created_at
    and m.created_at < coalesce(tags.next_tag_time, current_date)
  where
    date(conv.created_at) not in (
      '1/3/22',
      '2/16/22',
      '4/6/22',
      '4/13/22',
      '4/14/22',
      '4/15/22',
      '5/16/22',
      '5/2/22',
      '5/4/22',
      '5/16/22',
      '6/3/22',
      '7/13/22',
      '7/28/22',
      '7/29/22',
      '8/12/22',
      '10/13/22',
      '10/14/22',
      '10/24/22',
      '12/5/22',
      '12/12/22',
      '05/01/21',
      '05/03/21',
      '05/04/21',
      '05/26/21',
      '06/03/21',
      '07/24/21',
      '07/26/21',
      '07/29/21',
      '08/12/21',
      '09/24/21',
      '10/13/21',
      '10/22/21',
      '10/23/21',
      '10/25/21',
      '12/06/21',
      '12/10/21',
      '12/31/21'
    )
    and date_part('dayofweek', conv.created_at) != 0
),
cte_resolved as (
  select
    conv.id conversation_id,
    max(resolved_time) resolved_time,
    tag_name,
    min(resolved_time) first_resolved_time
  from
    conv
  group by
    conv.id,
    conv.tag_name
),
cte_conv_start as (
  select
    conv.id conversation_id,
    tag_name,
    min(message_time) start_time
  from
    conv
  group by
    conv.id,
    tag_name
),
cte_r as (
  select
    conv.id as conv_id,
    users."name" as Staff_name,
    users.email,
    conv.created_at as actual_created_at,
    coalesce(resolved.resolved_time, next_tag_time) resolved_time,
    conv.tag_name,
    resolved.first_resolved_time,
    start_time,
    next_tag_time,
    min(message_time) as first_response,
    LEAD(message_time, 1) OVER(
      partition by conv.id
      Order by
        message_time
    ) as second_response,
    LEAD(message_time, 2) OVER(
      partition by conv.id
      Order by
        message_time
    ) as third_response,
    case when users.name in ('(Team B) - Poo')
    and cast ((conv.created_at) :: timestamp as time) >= '17:00:00'
    and date_part('dayofweek', conv.created_at) != 6 then (
      date(date(conv.created_at) + INTERVAL '1 day') || ' ' || '08:00:00'
    ) :: timestamp when users.name in ('(Team B) - Poo')
    and cast ((conv.created_at) :: timestamp as time) >= '17:00:00'
    and date_part('dayofweek', conv.created_at) = 6 then (
      date(date(conv.created_at) + INTERVAL '2 day') || ' ' || '08:00:00'
    ) :: timestamp when users.name in ('(Team B) - Poo')
    and cast ((conv.created_at) :: timestamp as time) < '08:00:00' then (date(conv.created_at) || ' ' || '08:00:00') :: timestamp when users.name in ('(Team B) - Samat', '(Team B) - Ice')
    and cast ((conv.created_at) :: timestamp as time) >= '19:00:00'
    and date_part('dayofweek', conv.created_at) != 6 then (
      date(date(conv.created_at) + INTERVAL '1 day') || ' ' || '10:00:00'
    ) :: timestamp when users.name in ('(Team B) - Samat', '(Team B) - Ice')
    and cast ((conv.created_at) :: timestamp as time) >= '19:00:00'
    and date_part('dayofweek', conv.created_at) = 6 then (
      date(date(conv.created_at) + INTERVAL '2 day') || ' ' || '10:00:00'
    ) :: timestamp when users.name in ('(Team B) - Samat', '(Team B) - Ice')
    and cast ((conv.created_at) :: timestamp as time) < '10:00:00' then (date(conv.created_at) || ' ' || '10:00:00') :: timestamp when users.name not in (
      '(Team B) - Samat',
      '(Team B) - Ice',
      '(Team B) - Poo'
    )
    and cast ((conv.created_at) :: timestamp as time) >= '18:00:00'
    and date_part('dayofweek', conv.created_at) != 6 then (
      date(date(conv.created_at) + INTERVAL '1 day') || ' ' || '09:00:00'
    ) :: timestamp when users.name not in (
      '(Team B) - Samat',
      '(Team B) - Ice',
      '(Team B) - Poo'
    )
    and cast ((conv.created_at) :: timestamp as time) >= '18:00:00'
    and date_part('dayofweek', conv.created_at) = 6 then (
      date(date(conv.created_at) + INTERVAL '2 day') || ' ' || '09:00:00'
    ) :: timestamp when users.name not in (
      '(Team B) - Samat',
      '(Team B) - Ice',
      '(Team B) - Poo'
    )
    and cast ((conv.created_at) :: timestamp as time) < '09:00:00' then (date(conv.created_at) || ' ' || '09:00:00') :: timestamp else conv.created_at end as conv_initiated,
    18
  from
    conv
    join chatwoot.contacts c on c.id = conv.contact_id
    join chatwoot.users on users.id = conv.assignee_id
    join cte_resolved resolved on resolved.conversation_id = conv.id
    and conv.tag_name = resolved.tag_name
    join cte_conv_start conv_start on conv_start.conversation_id = conv.id
    and conv.tag_name = conv_start.tag_name
  where
    conv.not_monitored = 0
    and c.email not like '%fairdee.co%'
    and c.email not like '%vouchinsurance.sg%'
    and conv.message_type = 1
  group by
    (
      conv.id,
      users."name",
      users.email,
      conv.created_at,
      coalesce(resolved.resolved_time, next_tag_time),
      conv.tag_name,
      resolved.first_resolved_time,
      start_time,
      next_tag_time,
      conv.message_time
    )
),
time as(
  select
    actual_created_at,
    conv_id,
    staff_name,
    email,
    conv_initiated,
    max(resolved_time) resolved_time,
    min(resolved_time) first_resolved_time,
    tag_name,
    min(start_time) start_time,
    case when min(first_response) < conv_initiated
    and date(min(first_response)) > date(actual_created_at) then 3 when min(first_response) < conv_initiated then (
      extract(
        epoch
        from
          min(first_response) - actual_created_at
      ) :: int / 60
    ) else (
      extract(
        epoch
        from
          min(first_response) - conv_initiated
      ) :: int / 60
    ) end as first_response_time,
    case when min(second_response) < conv_initiated
    and date(min(second_response)) > date(actual_created_at) then 3.5 when min(second_response) < conv_initiated then (
      extract(
        epoch
        from
          min(second_response) - actual_created_at
      ) :: int / 60
    ) else (
      extract(
        epoch
        from
          min(second_response) - conv_initiated
      ) :: int / 60
    ) end as second_response_time,
    case when min(third_response) < conv_initiated
    and date(min(third_response)) > date(actual_created_at) then 4 when min(third_response) < conv_initiated then (
      extract(
        epoch
        from
          min(third_response) - actual_created_at
      ) :: int / 60
    ) else (
      extract(
        epoch
        from
          min(third_response) - conv_initiated
      ) :: int / 60
    ) end as third_response_time,
    case when min(start_time) != conv_initiated then (
      extract(
        epoch
        from
          max(resolved_time) - min(start_time)
      ) :: int / 60
    ) when coalesce(max(resolved_time), max(next_tag_time)) <= conv_initiated then (
      extract(
        epoch
        from
          coalesce(max(resolved_time), max(next_tag_time)) - actual_created_at
      ) :: int / 60
    ) else extract(
      epoch
      from
        coalesce(max(resolved_time), max(next_tag_time)) - conv_initiated
    ) :: int / 60 end as last_resolution_time
  from
    cte_r R
  group by
    conv_id,
    staff_name,
    email,
    conv_initiated,
    actual_created_at,
    tag_name
),
conv_metric as (
  select
    conv.id conv_id,
    sum(not_monitored) not_monitored,
    count(message_id) total_messages,
    count(distinct reopened) reopened,
    tag_name
  from
    conv
  group by
    conv_id,
    tag_name
),
cte_s as (
  select
    snooze_time snooze_time,
    lead(reopen_snooze_time) over(
      partition by conv.id
      order by
        reopen_snooze_time
    ) reopen_time,
    conv.id conv_id,
    conv.tag_name
  from
    conv
    join time resolve_time on conv_id = conv.id
    and resolve_time.tag_name = conv.tag_name
  where
    reopen_snooze_time is not null
    and resolve_time.resolved_time >= reopen_snooze_time
),
snooze as(
  select
    conv_id,
    sum(
      extract(
        epoch
        from
          reopen_time - snooze_time
      ) :: int / 60
    ) snooze_time,
    tag_name
  from
    cte_s S
  where
    snooze_time is not null
  group by
    conv_id,
    tag_name
),
cte_a as (
  select
    conv.resolved_time,
    reopen_resolve_time,
    conv.id conv_id,
    lead(reopen_resolve_time) over(
      partition by conv.id,
      conv.tag_name
      order by
        reopen_resolve_time
    ) reopen_time,
    resolve_time.resolved_time as last_resolve_time,
    conv.tag_name
  from
    conv
    join time resolve_time on conv_id = conv.id
    and resolve_time.tag_name = conv.tag_name
  where
    reopen_resolve_time is not null
    and resolve_time.resolved_time >= reopen_resolve_time
),
reopen as(
  select
    conv_id,
    sum(
      extract(
        epoch
        from
          reopen_time - resolved_time
      ) :: int / 60
    ) reopen_time,
    tag_name
  from
    cte_a A
  where
    resolved_time is not null
  group by
    conv_id,
    tag_name
),
p99 as (
  select
    metrics.staff_name,
    percentile_cont(0.99) within group(
      order by
        metrics.first_response_time
    ) as p_1
  from
    time metrics
    left join reopen using(conv_id)
  where
    metrics.first_response_time >= 0
    and first_response_time < 700
  group by
    staff_name
)
select
  conv_metric.conv_id,
  time.actual_created_at,
  conv_metric.not_monitored,
  conv_metric.total_messages,
  conv_metric.reopened,
  time.tag_name,
  time.staff_name,
  email,
  time.conv_initiated,
  time.first_response_time,
  time.second_response_time,
  time.third_response_time,
  time.last_resolution_time resolution_time,
  COALESCE(snooze_time, 0) snooze_time,
  COALESCE(reopen_time, 0) reopen_time,
  resolved_time,
  time.last_resolution_time - COALESCE(snooze_time, 0) - COALESCE(reopen_time, 0) resolution_time_excluding_snooze_reopen,
  start_time,
  case when number_of_users > 1 then 'Yes' else 'No' end Reassigned
  from conv_metric
  join time using(conv_id, tag_name)
  left join snooze using(conv_id, tag_name)
  left join reopen using(conv_id, tag_name)
  left join reassigned using (conv_id)
where
  first_response_time < 700
  and last_resolution_time > coalesce(reopen_time, 0)

Title: Line Chatwoot Analysis
SQL: with reassigned as(
  select
    conversation_id conv_id,
    count(distinct sender_id) number_of_users
  from
    chatwoot.messages
  where
    sender_type = 'User'
--    and created_at  <'20230101'::date
  group by
    conversation_id
  having
    count(distinct sender_id) > 1
),
conv as(
  select
    conv.id,
    conv.assignee_id,
    conv.contact_id,
    (
      case
        when (
          m.content like '%self-assigned%'
          or m.content like '%Assigned to%'
        )
        and m.content not like '%by Akshay%' then 1
        else 0
      end
    ) as not_monitored,
    conv.created_at at time zone 'utc' at time zone 'ict' as created_at,
    m.id message_id,
    (
      case
        when m.content like '%Conversation was reopened by%' then m.id
      end
    ) as reopened,
    m.created_at at time zone 'utc' at time zone 'ict' message_time,
    message_type
  from
    chatwoot.conversations conv
    join chatwoot.messages m on m.conversation_id = conv.id -- left join taggings t on t.taggable_id = conv.id and t.taggable_type = 'Conversation'and t.context = 'labels'
  where
    date(conv.created_at) not in (
      '1/3/22',
      '2/16/22',
      '4/6/22',
      '4/13/22',
      '4/14/22',
      '4/15/22',
      '5/16/22',
      '5/2/22',
      '5/4/22',
      '5/16/22',
      '6/3/22',
      '7/13/22',
      '7/28/22',
      '7/29/22',
      '8/12/22',
      '10/13/22',
      '10/14/22',
      '10/24/22',
      '12/5/22',
      '12/12/22',
      '05/01/21',
      '05/03/21',
      '05/04/21',
      '05/26/21',
      '06/03/21',
      '07/24/21',
      '07/26/21',
      '07/29/21',
      '08/12/21',
      '09/24/21',
      '10/13/21',
      '10/22/21',
      '10/23/21',
      '10/25/21',
      '12/06/21',
      '12/10/21',
      '12/31/21'
    )
    and date_part(
      'dayofweek',conv.created_at
    ) != 0
      and conv.created_at >= add_months(conv.created_at, -9)
)
,r_cte as (select
        conv.id as conv_id
        ,users.name as staff_name
        ,users.email
       	,conv.created_at as actual_created_at --    resolved.resolved_time,resolved.first_resolved_time
        ,min(message_time) as first_response
        ,LEAD(message_time, 1) OVER(
          partition by conv.id
          Order by
            message_time
        ) as second_response
        ,LEAD(message_time, 2) OVER(
          partition by conv.id
          Order by
            message_time
        ) as third_response
        ,case
          when users.name in ('(Team B) - Poo')
          and cast ((conv.created_at) :: timestamp as time) >= '17:00:00'
          and date_part(
            'dayofweek',(conv.created_at)
          ) != 6 then (
            date(date(conv.created_at) + INTERVAL '1 day') || ' ' || '08:00:00'
          ) :: timestamp
          when users.name in ('(Team B) - Poo')
          and cast ((conv.created_at) :: timestamp as time) >= '17:00:00'
          and date_part(
            'dayofweek',(conv.created_at)
          ) = 6 then (
            date(date(conv.created_at) + INTERVAL '2 day') || ' ' || '08:00:00'
          ) :: timestamp
          when users.name in ('(Team B) - Poo')
          and cast ((conv.created_at) :: timestamp as time) < '08:00:00' then (date(conv.created_at) || ' ' || '08:00:00') :: timestamp ---
          when users.name in ('(Team B) - Samat', '(Team B) - Ice')
          and cast ((conv.created_at) :: timestamp as time) >= '19:00:00'
          and date_part(
            'dayofweek',(conv.created_at)
          ) != 6 then (
            date(date(conv.created_at) + INTERVAL '1 day') || ' ' || '10:00:00'
          ) :: timestamp
          when users.name in ('(Team B) - Samat', '(Team B) - Ice')
          and cast ((conv.created_at) :: timestamp as time) >= '19:00:00'
          and date_part(
            'dayofweek',(conv.created_at)
          ) = 6 then (
            date(date(conv.created_at) + INTERVAL '2 day') || ' ' || '10:00:00'
          ) :: timestamp
          when users.name in ('(Team B) - Samat', '(Team B) - Ice')
          and cast ((conv.created_at) :: timestamp as time) < '10:00:00' then (date(conv.created_at) || ' ' || '10:00:00') :: timestamp ----
          when users.name not in (
            '(Team B) - Samat',
            '(Team B) - Ice',
            '(Team B) - Poo'
          )
          and cast ((conv.created_at) :: timestamp as time) >= '18:00:00'
          and date_part(
            'dayofweek',(conv.created_at)
          ) != 6 then (
            date(date(conv.created_at) + INTERVAL '1 day') || ' ' || '09:00:00'
          ) :: timestamp
          when users.name not in (
            '(Team B) - Samat',
            '(Team B) - Ice',
            '(Team B) - Poo'
          )
          and cast ((conv.created_at) :: timestamp as time) >= '18:00:00'
          and date_part(
            'dayofweek',(conv.created_at)
          ) = 6 then (
            date(date(conv.created_at) + INTERVAL '2 day') || ' ' || '09:00:00'
          ) :: timestamp
          when users.name not in (
            '(Team B) - Samat',
            '(Team B) - Ice',
            '(Team B) - Poo'
          )
          and cast ((conv.created_at) :: timestamp as time) < '09:00:00' then (date(conv.created_at) || ' ' || '09:00:00') :: timestamp
          else conv.created_at
        end as conv_initiated
      from
        conv
        join chatwoot.contacts c on c.id = conv.contact_id
        join chatwoot.users on users.id = conv.assignee_id
      where
        conv.not_monitored = 0
        and c.email not like '%fairdee.co%'
        and c.email not like '%vouchinsurance.sg%'
        and conv.message_type = 1
        group by (1,2,3,4,conv.message_time)
),
time as(
  select
    conv_id,
    staff_name,
    email,
    conv_initiated,
    -- max(resolved_time)resolved_time,min(first_resolved_time) first_resolved_time, -- min(first_response) fr,actual_created_at ct,
    case
      when min(first_response) < conv_initiated and date(min(first_response)) > date(actual_created_at) then 3::numeric(19,2)
      when min(first_response) < conv_initiated then ( extract(epoch from min(first_response) - actual_created_at) :: int / 60)::numeric(19,2)
      else (extract(epoch from min(first_response) - conv_initiated) :: int / 60)::numeric(19,2)
    end as first_response_time,
    case
      when min(second_response) < conv_initiated
      and date(min(second_response)) > date(actual_created_at) then 3.5::numeric(19,2)
      when min(second_response) < conv_initiated then (
        extract(
          epoch
          from
            min(second_response) - actual_created_at
        ) :: int / 60
      )::numeric(19,2)
      else (
        extract(
          epoch
          from
            min(second_response) - conv_initiated
        ) :: int / 60
      )::numeric(19,2)
    end as second_response_time,
    case
      when min(third_response) < conv_initiated
      and date(min(third_response)) > date(actual_created_at) then 4
      when min(third_response) < conv_initiated then (
        extract(
          epoch
          from
            min(third_response) - actual_created_at
        ) :: int / 60
      )::numeric(19,2)
      else (
        extract(
          epoch
          from
            min(third_response) - conv_initiated
        ) :: int / 60
      )::numeric(19,2)
    end as third_response_time
  from
    r_cte
  group by
    conv_id,
    staff_name,
    email,
    conv_initiated,
    actual_created_at
),
conv_metric as (
  select
    conv.id conv_id,
    sum(not_monitored) not_monitored,
    count(message_id) total_messages,
    count(distinct reopened) reopened
  from
    conv
  group by
    conv_id
),
p99 as (
  select
    metrics.staff_name,
    percentile_cont(0.99) within group(
      order by
        metrics.first_response_time
    ) as p_1
  from
    time metrics -- left join reopen using(conv_id)
  where
    metrics.first_response_time >= 0
    and first_response_time < 700 -- and last_resolution_time>coalesce(reopen_time,0)
  group by
    staff_name
),
tags as (
  select
    conv.id conv_id,
    count(distinct tag_id) Labels
  from
    conv
    join chatwoot.taggings t on t.taggable_id = conv.id
    and t.taggable_type = 'Conversation'
    and t.context = 'labels'
    join chatwoot.tags on tags.id = t.tag_id
  group by
    conv.id
)
select
  conv_metric.conv_id,
  conv_metric.not_monitored,
  conv_metric.total_messages,
  conv_metric.reopened,
  tags.Labels,
  time.staff_name,
  email,
  time.conv_initiated,
  time.first_response_time,
  time.second_response_time,
  time.third_response_time,
  case
    when number_of_users > 1 then 'Yes'
    else 'No'
  end Reassigned
from
  conv_metric
  join time using(conv_id)
   left join tags using(conv_id)
  join p99 on time.first_response_time < p_1
  and p99.staff_name = time.staff_name
  left join reassigned using (conv_id)
where
  first_response_time < 700 -- and last_resolution_time>coalesce(reopen_time,0)

Title: Quartely analysis - Number of agent selling, by agent first sale quarter cohort
SQL: With activity as
(
 SELECT sale.sold_on,
           affiliate.id,
           case when month(first_sale.sold_on) in (1,2,3) then DATE_FORMAT(first_sale.sold_on, '%Y-01-01')
           when month(first_sale.sold_on) in (4,5,6) then DATE_FORMAT(first_sale.sold_on, '%Y-02-01')
            when month(first_sale.sold_on) in (7,8,9) then DATE_FORMAT(first_sale.sold_on, '%Y-03-01')
             when month(first_sale.sold_on) in (10,11,12) then DATE_FORMAT(first_sale.sold_on, '%Y-04-01')
           end as cohort_quarter
        --   Concat( Year(first_sale.sold_on), '-',Quarter(first_sale.sold_on), '-', '01') as cohort_quarter
        --   DATE_FORMAT(first_sale.sold_on, '%Y-%m-01') AS cohort_month
   FROM policy_fairdeesale sale
   JOIN profiles_affiliate affiliate ON affiliate.id = sale.affiliate_id
   JOIN profiles_user user ON affiliate.user_id = user.id
   JOIN policy_fairdeesale first_sale ON first_sale.id =
     (SELECT id
      FROM policy_fairdeesale sale
      WHERE sale.affiliate_id = affiliate.id
        AND sale.is_cancelled = FALSE
        AND sale.policy_status NOT LIKE '%rejected'
        AND ((sale.payment_status IN ("payment_verified",
                                  "commission_transferred")
          OR sale.policy_status IN ("policy_sent_to_user",
                                    "policy_delivered_to_user",
                                    "policy_uploaded"))
          OR (sale.sale_type = "instalment"
              AND EXISTS
                ( SELECT 1
                 FROM billing_invoice invoice
                 JOIN policy_fairdeesaleinvoice sale_invoice_map ON invoice.id = sale_invoice_map.invoice_id
                 WHERE sale_invoice_map.fairdee_sale_id = sale.id
                   AND invoice.payee = 'fairdee'
                   AND invoice.payer = 'customer'
                   AND invoice.payment_status != 'unpaid' )))
      ORDER BY sold_on
      LIMIT 1)
   WHERE first_sale.sold_on >= '{{ start_month }}'
     AND sale.sold_on >= '{{ start_month }}'
     AND user.is_test = FALSE
     AND sale.is_cancelled = FALSE
     AND affiliate.has_broker_license = TRUE
     AND affiliate.is_oic_data_verified = TRUE
     AND sale.policy_status NOT LIKE '%rejected'
     AND ((sale.payment_status IN ("payment_verified",
                                  "commission_transferred")
          OR sale.policy_status IN ("policy_sent_to_user",
                                    "policy_delivered_to_user",
                                    "policy_uploaded"))
          OR (sale.sale_type = "instalment"
              AND EXISTS
                ( SELECT 1
                 FROM billing_invoice invoice
                 JOIN policy_fairdeesaleinvoice sale_invoice_map ON invoice.id = sale_invoice_map.invoice_id
                 WHERE sale_invoice_map.fairdee_sale_id = sale.id
                   AND invoice.payee = 'fairdee'
                   AND invoice.payer = 'customer'
                   AND invoice.payment_status != 'unpaid' )))
 ),
 
 population_agg as (
  SELECT case when month(first_sale.sold_on) in (1,2,3) then DATE_FORMAT(first_sale.sold_on, '%Y-01-01')
           when month(first_sale.sold_on) in (4,5,6) then DATE_FORMAT(first_sale.sold_on, '%Y-02-01')
            when month(first_sale.sold_on) in (7,8,9) then DATE_FORMAT(first_sale.sold_on, '%Y-03-01')
             when month(first_sale.sold_on) in (10,11,12) then DATE_FORMAT(first_sale.sold_on, '%Y-04-01')
           end as cohort_quarter,
--   Concat( Year(first_sale.sold_on), '-',Quarter(first_sale.sold_on), '-', '01') as cohort_quarter,
--   DATE_FORMAT(first_sale.sold_on, '%Y-%m-01') AS cohort_month,
           COUNT(DISTINCT affiliate.id) AS total
   FROM profiles_affiliate affiliate
   JOIN profiles_user user ON affiliate.user_id = user.id
   JOIN policy_fairdeesale first_sale ON first_sale.id =
     (SELECT id
      FROM policy_fairdeesale sale
      WHERE sale.affiliate_id = affiliate.id
        AND sale.is_cancelled = FALSE
        AND sale.policy_status NOT LIKE '%rejected'
        AND ((sale.payment_status IN ("payment_verified",
                                  "commission_transferred")
          OR sale.policy_status IN ("policy_sent_to_user",
                                    "policy_delivered_to_user",
                                    "policy_uploaded"))
          OR (sale.sale_type = "instalment"
              AND EXISTS
                ( SELECT 1
                 FROM billing_invoice invoice
                 JOIN policy_fairdeesaleinvoice sale_invoice_map ON invoice.id = sale_invoice_map.invoice_id
                 WHERE sale_invoice_map.fairdee_sale_id = sale.id
                   AND invoice.payee = 'fairdee'
                   AND invoice.payer = 'customer'
                   AND invoice.payment_status != 'unpaid' )))
      ORDER BY sold_on
      LIMIT 1)
   WHERE first_sale.sold_on >= '{{ start_month }}'
     AND user.is_test = FALSE
     AND affiliate.has_broker_license = TRUE
     AND affiliate.is_oic_data_verified = TRUE
   GROUP BY cohort_quarter)
   
   SELECT activity.cohort_quarter AS date,
-- DATE_FORMAT(sold_on, '%Y%m'), DATE_FORMAT('{{ start_month }}', '%Y%m'),
(year(sold_on) - year('{{ start_month }}'))*4 + quarter(sold_on) - quarter('{{ start_month }}')  as day_number,
-- DATEDIFF(QQ, '{{ start_month }}', sold_on) as month_number,
    --   PERIOD_DIFF(DATE_FORMAT(sold_on, '%Y%m'), DATE_FORMAT('{{ start_month }}', '%Y%m')) AS month_number, -- DATE_FORMAT(sold_on, '%Y%m') as month_number,
 -- activity.cohort_month AS month_number,
 COUNT(DISTINCT activity.id) AS value,
 total 
 from activity
 join population_agg ON activity.cohort_quarter = population_agg.cohort_quarter
 GROUP BY date, day_number,
               total

Title: Number of agent selling, by agent first sale month cohort - per category
SQL: 




with Agent_start as
(select min(sold_on) first_sale, affiliate_id,source from vmi_policy_sold_successfully sale
join profiles_affiliate aff on aff.id=sale.affiliate_id  GROUP BY affiliate_id),
cohort as
(select distinct date_format(sold_on,'%Y-%m-01') sold_on, date_format(first_sale,'%Y-%m-01') cohort_month,sale.affiliate_id
from vmi_policy_sold_successfully sale
join Agent_start on sale.affiliate_id=Agent_start.affiliate_id

where first_sale>"{{ Start Month }}"
AND affiliate_broker_license = TRUE
     AND affiliate_oic_data_verified= TRUE
     AND source IN ({{ category }})
     and (case 
     when "{{agent_type}}"="All" then 1=1
            when "{{agent_type}}" = 'mlm_agent' then account_type = 'mlm_agent'
            when "{{agent_type}}" = 'direct_agent' then  account_type="Direct Agent"
        end))


select sold_on,monthly.cohort_month,value,total,
       PERIOD_DIFF(DATE_FORMAT(sold_on, '%Y%m'), DATE_FORMAT("{{ Start Month }}", '%Y%m')) AS month_number -- DATE_FORMAT(sold_on, '%Y%m') as month_number,
from
(select sold_on,cohort_month, count(distinct affiliate_id) value from cohort group by sold_on,cohort_month)monthly
left join
(select cohort_month,count(distinct affiliate_id)total from cohort group by cohort_month) joining
on monthly.cohort_month=joining.cohort_month


Title: Chatwoot Categorisation with the help of GPT
SQL: SELECT
  *,
  CONCAT(
    'https://chat.fairdee.co.th/app/accounts/1/inbox/1/conversations/',
    conversation_id
  ) AS chatwoot
FROM
  chatwoot_conversation_analysis;


Title: Payment create by breakdown
SQL: WITH payment_summary AS (
  SELECT
    t.detail_type,
    user_type,
    COUNT(*) AS user_count
  FROM
    (
      SELECT distinct 
        pay.id AS payment_id,
        pay.created_by_id,
        invd.detail_type,
        CASE
          WHEN pay.created_by_id = 128884 THEN 'ai'
          ELSE 'manual'
        END AS user_type,
        rank() over(PARTITION by invd.invoice_id order by invd.detail_type asc) as rnk
      FROM
        billing_payment AS pay
        JOIN billing_payment_invoices AS bpi ON bpi.payment_id = pay.id
        JOIN billing_invoicedetail AS invd ON invd.invoice_id = bpi.invoice_id
        JOIN billing_paymentfile AS pf ON pf.payment_id = pay.id
        JOIN utils_file AS file ON file.id = pf.file_id
      WHERE
        DATE(CONVERT_TZ(pay.created_at, '+00:00', '+07:00')) > '2023-04-21'
        and DATE(CONVERT_TZ(file.created_at, '+00:00', '+07:00')) > '2023-04-21'
            and detail_type not in ('compulsory_insurance', "qoala_promotion")
    ) AS t where rnk = 1
  GROUP BY
    t.detail_type, user_type
)

SELECT
  detail_type,
  user_type,
  user_count,
  CONCAT(ROUND(
    (user_count * 100.0) / SUM(user_count) OVER (PARTITION BY detail_type),
    2
  ), '%') AS percentage_of_total,
  SUM(user_count) OVER (PARTITION BY detail_type) AS total_count
FROM
  payment_summary
ORDER BY
  detail_type, user_type;



Title: Successful Extractions from AI
SQL: select uploader as "Uploaded by", count(uploader) as successful from (select
  pay.id, min(r.name) as uploader
from
  billing_payment as pay
  join billing_paymentfile as pf on pf.payment_id = pay.id
  join utils_file as file on file.id = pf.file_id
  join profiles_user as user on user.id = file.created_by_id
  join profiles_userrole as role on role.user_id = user.id
  join profiles_role as r on r.id = role.role_id
where
  pay.created_by_id = 128884
group by pay.id) as t 
group by uploader;




Title: Instalment Invoices Bug
SQL: SELECT
  `policy_fairdeesale`.`quotation_id`,
  `policy_fairdeesale`.`created_at`,
  `policy_fairdeesale`.`created_by_id`,
  `utils_fairdeequotationquery`.`is_lead_generated`,
  (
    SELECT
      COUNT(U0.`id`) AS `c`
    FROM
      `billing_invoice` U0
      INNER JOIN `policy_fairdeesaleinvoice` U1 ON (U0.`id` = U1.`invoice_id`)
      INNER JOIN `billing_invoicedetail` U3 ON (U0.`id` = U3.`invoice_id`)
    WHERE
      (
        NOT U0.`is_deleted`
        AND U1.`fairdee_sale_id` = (`policy_fairdeesale`.`id`)
        AND U3.`detail_type` = "voluntary_insurance"
        AND U0.`payee` = "fairdee"
        AND U0.`payer` = "customer"
      )
    GROUP BY
      U1.`fairdee_sale_id`
    ORDER BY
      NULL
  ) AS `instalment_invoice_formed`,
  COUNT(`billing_instalmentbreakup`.`id`) AS `instalment_invoices`
FROM
  `policy_fairdeesale`
  INNER JOIN `utils_fairdeequotation` ON (
    `policy_fairdeesale`.`quotation_id` = `utils_fairdeequotation`.`id`
  )
  INNER JOIN `utils_fairdeequotationquery` ON (
    `utils_fairdeequotation`.`quotation_query_id` = `utils_fairdeequotationquery`.`id`
  )
  INNER JOIN `billing_instalmenttype` ON (
    `utils_fairdeequotationquery`.`instalment_type_id` = `billing_instalmenttype`.`id`
  )
  LEFT OUTER JOIN `billing_instalmentbreakup` ON (
    `billing_instalmenttype`.`id` = `billing_instalmentbreakup`.`instalment_type_id`
  )
WHERE
  (
    `utils_fairdeequotationquery`.`instalment_type_id` IS NOT NULL
    AND `policy_fairdeesale`.`sale_type` = "instalment"
    
  )
GROUP BY
  `policy_fairdeesale`.`id`
HAVING
  (
    SELECT
      COUNT(U0.`id`) AS `c`
    FROM
      `billing_invoice` U0
      INNER JOIN `policy_fairdeesaleinvoice` U1 ON (U0.`id` = U1.`invoice_id`)
      INNER JOIN `billing_invoicedetail` U3 ON (U0.`id` = U3.`invoice_id`)
    WHERE
      (
        NOT U0.`is_deleted`
        AND U1.`fairdee_sale_id` = (`policy_fairdeesale`.`id`)
        AND U3.`detail_type` = "voluntary_insurance"
        AND U0.`payee` = "fairdee"
        AND U0.`payer` = "customer"
      )
    GROUP BY
      U1.`fairdee_sale_id`
    ORDER BY
      NULL
  ) != (COUNT(`billing_instalmentbreakup`.`id`))
ORDER BY
  NULL


Title: IG agent codes
SQL: select * from
((select "Select All" as agent_code)
union (select agent_code from profiles_affiliate
where account_type = "inspection_garage")) as t;




Title: Level Upgrade requests
SQL: select
  lr.id,
  lr.created_at as 'Request created At',
  sale_paid_after,
  sale_paid_before,
  level_name,
  aff.agent_code as 'Agent Code',
  usr.email,
  usr.fullname as 'Request user name'
from
  profiles_levelupgraderequest lr
  join profiles_affiliate aff on aff.id = lr.affiliate_id
  join profiles_user usr on usr.id = lr.created_by_id
  order by id desc;


Title: bm_misc
SQL: select distinct affiliate_id, bm_name
from bm_list
where bm_name = 'bm_yos'
order by affiliate_id


Title: OCR Error Type Count
SQL: select  distinct date_format(created_at, '%Y-%M-01') month, 
        json_extract(vendor_response, '$.error_msg') error, 
        count(id)  ocr
from utils_ocrdata
where is_deleted = 0
and json_extract(vendor_response, '$.error_msg') is not null 
group by 1, 2


Title: OCR Usage by Document
SQL: select  date_format(created_at, '%Y-%M-01') month,
        file_type, 
        count(id) ocr
from utils_ocrdata
where is_deleted = 0
group by 1, 2


Title: OCR Aggregate
SQL: select  distinct date_format(created_at, '%Y-%M-01') month, 
        count(id) over(partition by date_format(created_at, '%Y-%M-01')) total_ocr, 
        sum(case when json_extract(vendor_response, '$.error_msg') is not null then 1 
                 else 0 end) over(partition by date_format(created_at, '%Y-%M-01')) failed_ocr, 
        sum(case when json_extract(vendor_response, '$.error_msg') is null then 1 
                 else 0 end) over(partition by date_format(created_at, '%Y-%M-01')) successful_ocr
from utils_ocrdata
where is_deleted = 0


Title: Affiliates Address
SQL: SELECT        @fullname := affiliate.oic_data->>'$.fullname', @title := REGEXP_SUBSTR(@fullname, '(ว่าที่ร้อยตรีหญิง|ว่าที่ร้อยตรี|นาวาโท|นางสาว|นาย|นาง)') AS "Agent Title", @firstname := REPLACE(SUBSTRING_INDEX(@fullname, ' ', 1), @title, '') AS "Agent First Name", TRIM(REPLACE(REPLACE(@fullname, @title, ''), @firstname, '')) AS "Agent Last Name",
affiliate.agent_code, address.first_line, address.subdistrict, address.district, address.province, address.postal_code, affiliate.national_id, affiliate.has_broker_license
    FROM profiles_affiliate affiliate
    JOIN profiles_user user on affiliate.user_id = user.id
    JOIN utils_address address on 
    -- coalesce(affiliate.address_id,affiliate.address_nid_id) 
    affiliate.address_id
    = address.id
    WHERE user.is_test = false 
    and affiliate.national_id is not null


Title: all Luxury makemodels
SQL: select
  masterdata_make.id as MakeID,
  masterdata_makemodel.id as MakeModelID,
  masterdata_make.name as ModelName,
  masterdata_makemodel.name as MakeModelName,
  masterdata_makemodel.is_luxury,
  masterdata_make.value,
  masterdata_make.has_2W,
  masterdata_make.has_4W
from
  masterdata_makemodel
  inner join masterdata_make on masterdata_makemodel.make_id = masterdata_make.id
where
  is_luxury = 1;


Title: Premium and NOP- per month
SQL: /*with motor as
(
SELECT 
      "motor",
      ue.sold_on,
      CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
      sum(premium_without_tax) AS total_premiums,
      sum(insurer_incentive_received) AS incentives_received,
      sum(insurer_commission_received) AS commissions_received,
      count(distinct sale.id) Policies_sold
FROM utils_uniteconomics ue
JOIN policy_fairdeesale_unit_economics fsue ON fsue.uniteconomics_id = ue.id
JOIN policy_fairdeesale sale ON sale.id = fsue.fairdeesale_id
JOIN utils_fairdeequotation quotation ON quotation.id = sale.quotation_id
JOIN profiles_affiliate affiliate ON affiliate.id = sale.affiliate_id
JOIN profiles_user user ON affiliate.user_id = user.id
where
    sale.is_cancelled = FALSE
    AND sale.policy_status NOT LIKE '%rejected'
    and (sale.payment_status IN ("payment_verified",
                              "commission_transferred","credit_approved")
      OR sale.policy_status IN ("policy_sent_to_user",
                                 "policy_delivered_to_user","policy_uploaded") 
      OR EXISTS
        (SELECT 1
        FROM billing_invoice invoice
        JOIN policy_fairdeesaleinvoice sale_invoice_map ON invoice.id = sale_invoice_map.invoice_id
        WHERE sale_invoice_map.fairdee_sale_id = sale.id
            AND invoice.payee = 'fairdee'
            AND invoice.payer = 'customer'
            AND invoice.payment_status != 'unpaid'))
    AND user.is_test = FALSE
    and ue.is_valid=True
    and (affiliate.account_type is null)
     and ue.sold_on > STR_TO_DATE('2019-08-01','%Y-%m-%d')
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
ORDER BY (ue.sold_on) 
),
bm as
(
SELECT 
      "bm",
      ue.sold_on,
      CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
      sum(premium_without_tax) AS total_premiums,
      sum(insurer_incentive_received) AS incentives_received,
      sum(insurer_commission_received) AS commissions_received,
      count(distinct sale.id) Policies_sold
FROM utils_uniteconomics ue
JOIN policy_fairdeesale_unit_economics fsue ON fsue.uniteconomics_id = ue.id
JOIN policy_fairdeesale sale ON sale.id = fsue.fairdeesale_id
JOIN utils_fairdeequotation quotation ON quotation.id = sale.quotation_id
JOIN profiles_affiliate affiliate ON affiliate.id = sale.affiliate_id
JOIN profiles_user user ON affiliate.user_id = user.id
where
    sale.is_cancelled = FALSE
    AND sale.policy_status NOT LIKE '%rejected'
    and (sale.payment_status IN ("payment_verified",
                              "commission_transferred","credit_approved")
      OR sale.policy_status IN ("policy_sent_to_user",
                                 "policy_delivered_to_user","policy_uploaded") 
      OR EXISTS
        (SELECT 1
        FROM billing_invoice invoice
        JOIN policy_fairdeesaleinvoice sale_invoice_map ON invoice.id = sale_invoice_map.invoice_id
        WHERE sale_invoice_map.fairdee_sale_id = sale.id
            AND invoice.payee = 'fairdee'
            AND invoice.payer = 'customer'
            AND invoice.payment_status != 'unpaid'))
    AND user.is_test = FALSE
    and ue.is_valid=True
    and (affiliate.account_type = 'business_manager')
     and ue.sold_on > STR_TO_DATE('2019-08-01','%Y-%m-%d')
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
ORDER BY (ue.sold_on) 
),
motor_ig as
(
SELECT 
      "motor_ig",
      ue.sold_on,
      CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
      sum(premium_without_tax) AS total_premiums,
      sum(insurer_incentive_received) AS incentives_received,
      sum(insurer_commission_received) AS commissions_received,
      count(distinct sale.id) Policies_sold
FROM utils_uniteconomics ue
JOIN policy_fairdeesale_unit_economics fsue ON fsue.uniteconomics_id = ue.id
JOIN policy_fairdeesale sale ON sale.id = fsue.fairdeesale_id
JOIN utils_fairdeequotation quotation ON quotation.id = sale.quotation_id
join masterdata_pricelist pl on quotation.price_list_id = pl.id
join masterdata_insurer insurer on insurer.id = pl.insurer_id
JOIN profiles_affiliate affiliate ON affiliate.id = sale.affiliate_id
JOIN profiles_user user ON affiliate.user_id = user.id
where
    sale.is_cancelled = FALSE
    -- and sale.sale_type = 'credit'
    AND sale.policy_status NOT LIKE '%rejected'
    and (sale.payment_status IN ("payment_verified",
                              "commission_transferred","credit_approved")
      OR sale.policy_status IN ("policy_sent_to_user",
                                 "policy_delivered_to_user","policy_uploaded") 
      OR EXISTS
        (SELECT 1
        FROM billing_invoice invoice
        JOIN policy_fairdeesaleinvoice sale_invoice_map ON invoice.id = sale_invoice_map.invoice_id
        WHERE sale_invoice_map.fairdee_sale_id = sale.id
            AND invoice.payee = 'fairdee'
            AND invoice.payer = 'customer'
            AND invoice.payment_status != 'unpaid')
            )
    and (affiliate.account_type in ('subagent', 'inspection_garage'))
    AND user.is_test = FALSE
    and ue.is_valid=True
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
ORDER BY (ue.sold_on) 
),
motor_mlm as
(

SELECT 
      "motor_mlm",
      ue.sold_on,
      CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
      sum(premium_without_tax) AS total_premiums,
      sum(insurer_incentive_received) AS incentives_received,
      sum(insurer_commission_received) AS commissions_received,
      count(distinct sale.id) Policies_sold
FROM utils_uniteconomics ue
JOIN policy_fairdeesale_unit_economics fsue ON fsue.uniteconomics_id = ue.id
JOIN policy_fairdeesale sale ON sale.id = fsue.fairdeesale_id
JOIN utils_fairdeequotation quotation ON quotation.id = sale.quotation_id
JOIN profiles_affiliate affiliate ON affiliate.id = sale.affiliate_id
JOIN profiles_user user ON affiliate.user_id = user.id
where
    sale.is_cancelled = FALSE
    AND sale.policy_status NOT LIKE '%rejected'
    and (sale.payment_status IN ("payment_verified",
                              "commission_transferred","credit_approved")
      OR sale.policy_status IN ("policy_sent_to_user",
                                 "policy_delivered_to_user","policy_uploaded") 
      OR EXISTS
        (SELECT 1
        FROM billing_invoice invoice
        JOIN policy_fairdeesaleinvoice sale_invoice_map ON invoice.id = sale_invoice_map.invoice_id
        WHERE sale_invoice_map.fairdee_sale_id = sale.id
            AND invoice.payee = 'fairdee'
            AND invoice.payer = 'customer'
            AND invoice.payment_status != 'unpaid'))
    AND user.is_test = FALSE
    and ue.is_valid=True
    and (affiliate.account_type = 'mlm_agent')
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
ORDER BY (ue.sold_on) 
),
covid as(
select
    "covid",
     CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
    sum(premium_without_tax) AS total_premiums,
    sum(insurer_incentive_received) AS incentives_received,
    sum(insurer_commission_received) AS commissions_received,
    count(distinct cf.id) Policies_sold
FROM utils_uniteconomics ue
join utils_covidform cf ON cf.unit_economics_id = ue.id
JOIN billing_invoicedetail idco on idco.id = cf.invoice_detail_id
JOIN billing_invoice invco on invco.id = idco.invoice_id
JOIN profiles_affiliate cfaffiliate ON cfaffiliate.id = cf.affiliate_id
JOIN profiles_user cfuser ON cfaffiliate.user_id = cfuser.id
where invco.payment_status in ("fully_paid", "overpaid")
  AND cf.policy_status != 'docs_rejected' 
  and cf.is_cancelled=False
  AND cfuser.is_test = FALSE
  and ue.is_valid=True
  GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
) 
,
dengue as(
select  
    "dengue",
     CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
    sum(premium_without_tax) AS total_premiums,
    sum(insurer_incentive_received) AS incentives_received,
    sum(insurer_commission_received) AS commissions_received,
    count(distinct df.id) Policies_sold
FROM utils_uniteconomics ue
join utils_dengueform df ON df.unit_economics_id = ue.id
JOIN billing_invoicedetail id on id.id = df.invoice_detail_id
JOIN billing_invoice inv on inv.id = id.invoice_id
JOIN profiles_affiliate dfaffiliate ON dfaffiliate.id = df.affiliate_id
JOIN profiles_user dfuser ON dfaffiliate.user_id = dfuser.id
where inv.payment_status in ("fully_paid", "overpaid")
  AND df.policy_status != 'docs_rejected' 
  and df.is_cancelled=False
  AND dfuser.is_test = FALSE
  and ue.is_valid=True
 GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
) 
,
pa as(
select  
    "pa",
     CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
    sum(premium_without_tax) AS total_premiums,
    sum(insurer_incentive_received) AS incentives_received,
    sum(insurer_commission_received) AS commissions_received,
    count(distinct pa.id) Policies_sold
FROM utils_uniteconomics ue
join utils_paform pa ON pa.unit_economics_id = ue.id
JOIN billing_invoicedetail id on id.id = pa.invoice_detail_id
JOIN billing_invoice inv on inv.id = id.invoice_id
JOIN profiles_affiliate paaffiliate ON paaffiliate.id = pa.affiliate_id
JOIN profiles_user pauser ON paaffiliate.user_id = pauser.id
where inv.payment_status in ("fully_paid", "overpaid")
  AND pa.policy_status != 'docs_rejected' 
  and pa.is_cancelled=False
  AND pauser.is_test = FALSE
  and ue.is_valid=True
 GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
) 
,
cmi_solo as(
select 
    "cmi_solo",
     CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
    sum(premium_without_tax) AS total_premiums,
    sum(insurer_incentive_received) AS incentives_received,
    sum(insurer_commission_received) AS commissions_received,
    count(distinct cif.id) Policies_sold    
FROM utils_uniteconomics ue
JOIN utils_compulsoryinsuranceform cif ON ue.id=cif.unit_economics_id
JOIN masterdata_insurer insurer ON insurer.id=cif.insurer_id
JOIN profiles_affiliate caffiliate ON caffiliate.id = cif.affiliate_id
JOIN profiles_user cuser ON caffiliate.user_id = cuser.id
where cif.policy_bought = TRUE
    AND cif.is_cancelled = FALSE
    AND cuser.is_test = FALSE
    and ue.is_valid=True
    and caffiliate.account_type in ('inspection_garage', 'subagent')
    -- AND affiliate_commission_given_out > 0
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
)
,
cmi_solo_bm as
(
select 
    "cmi_solo",
     CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
    sum(premium_without_tax) AS total_premiums,
    sum(insurer_incentive_received) AS incentives_received,
    sum(insurer_commission_received) AS commissions_received,
    count(distinct cif.id) Policies_sold    
FROM utils_uniteconomics ue
JOIN utils_compulsoryinsuranceform cif ON ue.id=cif.unit_economics_id
JOIN masterdata_insurer insurer ON insurer.id=cif.insurer_id
JOIN profiles_affiliate caffiliate ON caffiliate.id = cif.affiliate_id
JOIN profiles_user cuser ON caffiliate.user_id = cuser.id
where cif.policy_bought = TRUE
    AND cif.is_cancelled = FALSE
    AND cuser.is_test = FALSE
    and ue.is_valid=True
    and caffiliate.account_type = 'business_manager'
 --   AND affiliate_commission_given_out > 0
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
)
,
cmi_solo_mlm as 
(
select 
    "cmi_solo",
     CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
    sum(premium_without_tax) AS total_premiums,
    sum(insurer_incentive_received) AS incentives_received,
    sum(insurer_commission_received) AS commissions_received,
    count(distinct cif.id) Policies_sold    
FROM utils_uniteconomics ue
JOIN utils_compulsoryinsuranceform cif ON ue.id=cif.unit_economics_id
JOIN masterdata_insurer insurer ON insurer.id=cif.insurer_id
JOIN profiles_affiliate caffiliate ON caffiliate.id = cif.affiliate_id
JOIN profiles_user cuser ON caffiliate.user_id = cuser.id
where cif.policy_bought = TRUE
    AND cif.is_cancelled = FALSE
    AND cuser.is_test = FALSE
    and ue.is_valid=True
    and caffiliate.account_type = 'mlm_agent'
--    AND affiliate_commission_given_out > 0
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
)


select 
    motor.dates,
    coalesce(motor.total_premiums,0) 'FD-motor',
    coalesce(bm.total_premiums,0) 'BM-motor',
    coalesce(motor_ig.total_premiums,0) 'IG-motor',
    coalesce(motor_mlm.total_premiums,0) 'MLM-motor',
    coalesce(covid.total_premiums,0)+coalesce(dengue.total_premiums,0)+coalesce(pa.total_premiums,0) 'non-motor',
    -- coalesce(dengue.total_premiums,0) dengue,
    -- coalesce(pa.total_premiums,0) pa,
    coalesce(cmi_solo.total_premiums,0) 'IG-CMI_solo',
    coalesce(cmi_solo_bm.total_premiums,0) 'BM-CMI_solo',
    coalesce(cmi_solo_mlm.total_premiums,0) 'MLM-CMI_solo',
    
    coalesce(motor.total_premiums,0)+coalesce(bm.total_premiums,0)+coalesce(motor_ig.total_premiums,0)+coalesce(motor_mlm.total_premiums,0)+coalesce(covid.total_premiums,0)+coalesce(dengue.total_premiums,0)+coalesce(pa.total_premiums,0)+coalesce(cmi_solo.total_premiums,0)+coalesce(cmi_solo_mlm.total_premiums,0)+coalesce(cmi_solo_bm.total_premiums,0)  as overall_premium
from motor
left join motor_ig on motor_ig.dates = motor.dates
left join bm on bm.dates = motor.dates
left join covid on covid.dates=motor.dates
left join dengue on dengue.dates=motor.dates
left join pa on pa.dates=motor.dates
left join cmi_solo on cmi_solo.dates=motor.dates
left join cmi_solo_bm on cmi_solo_bm.dates=motor.dates
left join cmi_solo_mlm on cmi_solo_mlm.dates=motor.dates
left join motor_mlm on motor_mlm.dates = motor.dates
order by motor.sold_on

*/
select count(distinct sale_id,policy_type) policy_sold_count,
  sum(ue.premium_without_tax)premium_without_tax,
  sum(ue.premium_after_tax)premium_after_tax,
  sum(coalesce(ue.bonus, 0) + coalesce(ue.referral_bonus, 0)) agent_promotions,
  sum(coalesce(ue.insurer_commission_received, 0) + coalesce(ue.insurer_incentive_received, 0)) commissions_earned,
  sum(coalesce(ue.affiliate_commission_given_out, 0) + coalesce(ue.subsidy, 0)) affiliate_commission,
  date_format(ue.sold_on,'%Y-%m') months
from
(select 'Motor' policy_type, sale_id,
case 
   when  sale.account_type='Direct Agent' then "FD"
            when  sale.account_type = 'mlm_agent' then "MLM"
            when sale.account_type in ('inspection_garage', 'subagent') then "IG"
            when sale.account_type in ('business_manager') then "BM"
            else sale.account_type end   account_type,
 uniteconomics_id
from vmi_policy_sold_successfully sale
join policy_fairdeesale_unit_economics fue on fue.fairdeesale_id = sale.sale_id
union All
select
 policy_type, sale_id,
  case 
   when  sale.account_type='Direct Agent' then "FD"
            when  sale.account_type = 'mlm_agent' then "MLM"
            when sale.account_type in ('inspection_garage', 'subagent') then "IG"
            when sale.account_type in ('business_manager') then "BM"
            else sale.account_type end   account_type,
 unit_economics_id
 from cmi_solo_policy_sold_successfully sale
   union All
select
 'Non-Motor' policy_type, sale_id,
  case 
   when  sale.account_type='Direct Agent' then "FD"
            when  sale.account_type = 'mlm_agent' then "MLM"
            when sale.account_type in ('inspection_garage', 'subagent') then "IG"
            when sale.account_type in ('business_manager') then "BM"
            else sale.account_type end   account_type,
 unit_economics_id
 from
  pa_policy_sold_successfully sale
   union All
select
 'Non-Motor' policy_type,
sale.id sale_id,
case when  sale.account_type='Direct Agent' then "FD"
            when  sale.account_type = 'mlm_agent' then "MLM"
            when sale.account_type in ('inspection_garage', 'subagent') then "IG"
            when sale.account_type in ('business_manager') then "BM"
            else sale.account_type end   account_type,
 unit_economics_id
 from covid_policy_sold_successfully sale
   union All
select 'Non-Motor' policy_type, sale.id,
 case 
   when  sale.account_type='Direct Agent' then "FD"
            when  sale.account_type = 'mlm_agent' then "MLM"
            when sale.account_type in ('inspection_garage', 'subagent') then "IG"
            when sale.account_type in ('business_manager') then "BM"
            else sale.account_type end   account_type,
 unit_economics_id
 from dengue_policy_sold_successfull sale
  union All
   select 'Non-Standard' policy_type, sale.id,
 case 
   when  aff.account_type='Direct Agent' then "Direct Agent"
            when  aff.account_type = 'mlm_agent' then "MLM"
            when aff.account_type in ('inspection_garage', 'subagent') then "IG"
            when aff.account_type in ('business_manager') then "BM"
            else aff.account_type end   account_type,
 unit_economics_id
 from policy_nonstandardinsuranceproductsaledata sale
  join profiles_affiliate aff on aff.id=sale.affiliate_id
  )s
    join utils_uniteconomics ue on ue.id = s.uniteconomics_id
  where
  ue.is_valid = true
           -- and policy_type="cmi_solo"
           --  and  sale.account_type is null
group by date_format(ue.sold_on,'%Y-%m')


Title: Loan on installment
SQL: 

select sold_on_month,sum(amount_payable)Total_loan,number_of_installment from
(

select sale.sale_id,
invoice.id invoice_id,
amount_payable,
date_format(sale.sold_on,"%y-%m") sold_on_month,
rank()over (partition by sale.sale_id order by invoice.id) rn,
count(invoice.id)over (partition by sale.sale_id) number_of_installment

from vmi_policy_sold_successfully sale
join policy_fairdeesaleinvoice fsi on((fsi.fairdee_sale_id = sale.sale_id))
join billing_invoice invoice on invoice.id=fsi.invoice_id
where sale_type="instalment"
and  invoice.payee = "fairdee"
        AND invoice.payer = "customer"
        AND invoice.is_deleted = FALSE 
        
        
        ) A
where rn>1 
group by sold_on_month,number_of_installment
order by 1 desc, 3 desc




Title: Current date CMI IG (per insurer)
SQL: SELECT  ins.code as 'insurer',
        count(cf.id) as Count,
        sum(cf.premium) as Premium 
FROM utils_compulsoryinsuranceform cf
join profiles_affiliate aff on aff.id=cf.affiliate_id 
join profiles_user user on user.id=aff.user_id
-- join utils_uniteconomics ue on ue.id = cf.unit_economics_id
join masterdata_insurer ins on ins.id=cf.insurer_id
WHERE policy_bought = TRUE
  AND cf.policy_number is not NULL
  AND is_cancelled = FALSE
  and user.is_test=false
--   and ins.code in ("asia", "SEI")
--   AND affiliate_commission_given_out > 0
--   and ue.is_valid = TRUE
  and aff.account_type in ('inspection_garage', 'subagent')
  and date(convert_tz(cf.created_at,"UTC","+07:00"))= curdate()
  group by ins.code


Title: OIC Verified Direct Agents Cumulative Growth
SQL: SET
  @t_agents := 0;

select
  dates,
  cnt,
  @t_agents:= @t_agents + affiliates.cnt as Total_agents
from
  (
SELECT 
   
    date_format(affiliate.created_at,"%y-%m") dates,
    
    count(distinct affiliate.broker_license_number) AS cnt
FROM profiles_affiliate affiliate
join profiles_user user on user.id=affiliate.user_id
join profiles_userrole urole on urole.user_id=user.id
join profiles_role role on role.id = urole.role_id
WHERE affiliate.has_broker_license=TRUE
AND affiliate.is_oic_data_verified=TRUE
and affiliate.docs_verification_status="verified"
and user.is_test =False
and role.name!="admin"
and user.email not like "%fairdee.co.th%"
and user.email not like "%vouch%"
and affiliate.account_type is null
group by date_format(affiliate.created_at,"%y-%m")
-- order by affiliate.created_at
) as affiliates


Title: VMI - IG monthly performance
SQL: With vmi_ig as 
(select CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates, 
sale.id,
sum(ue.premium_without_tax) as net_prem,
aff.id as aff_id,
MONTH(ue.sold_on) AS a, YEAR(ue.sold_on) as b
from profiles_affiliate aff
join profiles_user user on user.id=aff.user_id
join policy_fairdeesale sale on sale.affiliate_id = aff.id
join utils_fairdeequotation quotation on quotation.id = sale.quotation_id
join masterdata_pricelist pl on quotation.price_list_id = pl.id
join policy_fairdeesale_unit_economics fsue on fsue.fairdeesale_id = sale.id
join utils_uniteconomics ue on ue.id = fsue.uniteconomics_id
join masterdata_insurer insurer on insurer.id = pl.insurer_id
left join (select distinct atag.affiliate_id, tag.name
            from profiles_affiliatetag atag
            join profiles_tag tag on tag.id = atag.tag_id
            where tag.name = 'at_agentoffice') tag on tag.affiliate_id = aff.id
where sale.sale_type = 'credit'
    AND sale.policy_status NOT LIKE '%rejected'
    and (sale.payment_status in ("payment_verified","commission_transferred","credit_approved") 
    or
        sale.policy_status in ("policy_sent_to_user",
                                 "policy_delivered_to_user",
                                 "policy_uploaded")
    OR (sale.sale_type = "instalment" 
        and EXISTS(
            SELECT 1
            FROM billing_invoice invoice
            JOIN policy_fairdeesaleinvoice sale_invoice_map ON invoice.id = sale_invoice_map.invoice_id
            WHERE sale_invoice_map.fairdee_sale_id = sale.id 
                AND invoice.payee = 'fairdee' 
                AND invoice.payer = 'customer'
                AND invoice.payment_status != 'unpaid'
  )))
and aff.account_type in ('inspection_garage', 'subagent')
and tag.affiliate_id is null
and user.is_test = False 
and ue.is_valid = 1
group by sale.id, aff.id
order by sale.sold_on)

select dates,
count(distinct aff_id),
count(id) as policies_count,
sum(net_prem) as net_premium,
sum(net_prem)/count(id) as 'AOV',
count(id)/count(distinct aff_id) as 'OF'
from vmi_ig
group by dates
order by b,a



Title: Conversations without ops reply yet
SQL: with first_res_team as
(select 
    conv.id conv_id,
    c.name as agent_name,
    users.id staff_id,
    users.name as staff_name,
    conv.created_at at time zone 'utc' at time zone 'ict' as conv_initiated1, 
    case    
        when users.name in ('(Team B) - Poo') and 
        cast ((conv.created_at at time zone 'utc' at time zone 'ict') ::timestamp as time) >= '17:00:00' 
            and extract(isodow from (conv.created_at at time zone 'utc' at time zone 'ict'))!= 6
                then (date(date(conv.created_at at time zone 'utc' at time zone 'ict')+ INTERVAL '1 day')||' '||'08:00:00')::timestamp
        
        when users.name in ('(Team B) - Poo') and
            cast ((conv.created_at at time zone 'utc' at time zone 'ict') ::timestamp as time) >= '17:00:00' 
            and extract(isodow from (conv.created_at at time zone 'utc' at time zone 'ict'))= 6
                then (date(date(conv.created_at at time zone 'utc' at time zone 'ict')+ INTERVAL '2 day')||' '||'08:00:00')::timestamp
    
        when users.name in ('(Team B) - Poo') and
            cast ((conv.created_at at time zone 'utc' at time zone 'ict') ::timestamp as time) < '08:00:00' 
                then (date(conv.created_at at time zone 'utc' at time zone 'ict')||' '||'08:00:00')::timestamp
        ---
        when users.name in ('(Team B) - Samat','(Team B) - Ice') and 
        cast ((conv.created_at at time zone 'utc' at time zone 'ict') ::timestamp as time) >= '19:00:00' 
            and extract(isodow from (conv.created_at at time zone 'utc' at time zone 'ict'))!= 6
                then (date(date(conv.created_at at time zone 'utc' at time zone 'ict')+ INTERVAL '1 day')||' '||'10:00:00')::timestamp
        
        when users.name in ('(Team B) - Samat','(Team B) - Ice') and
            cast ((conv.created_at at time zone 'utc' at time zone 'ict') ::timestamp as time) >= '19:00:00' 
            and extract(isodow from (conv.created_at at time zone 'utc' at time zone 'ict'))= 6
                then (date(date(conv.created_at at time zone 'utc' at time zone 'ict')+ INTERVAL '2 day')||' '||'10:00:00')::timestamp
    
        when users.name in ('(Team B) - Samat','(Team B) - Ice') and
            cast ((conv.created_at at time zone 'utc' at time zone 'ict') ::timestamp as time) < '10:00:00' 
                then (date(conv.created_at at time zone 'utc' at time zone 'ict')||' '||'10:00:00')::timestamp
        ----
        when users.name not in ('(Team B) - Samat','(Team B) - Ice','(Team B) - Poo') and 
        cast ((conv.created_at at time zone 'utc' at time zone 'ict') ::timestamp as time) >= '18:00:00' 
            and extract(isodow from (conv.created_at at time zone 'utc' at time zone 'ict'))!= 6
                then (date(date(conv.created_at at time zone 'utc' at time zone 'ict')+ INTERVAL '1 day')||' '||'09:00:00')::timestamp
        
        when users.name not in ('(Team B) - Samat','(Team B) - Ice','(Team B) - Poo') and
            cast ((conv.created_at at time zone 'utc' at time zone 'ict') ::timestamp as time) >= '18:00:00' 
            and extract(isodow from (conv.created_at at time zone 'utc' at time zone 'ict'))= 6
                then (date(date(conv.created_at at time zone 'utc' at time zone 'ict')+ INTERVAL '2 day')||' '||'09:00:00')::timestamp
    
        when users.name not in ('(Team B) - Samat','(Team B) - Ice','(Team B) - Poo') and
            cast ((conv.created_at at time zone 'utc' at time zone 'ict') ::timestamp as time) < '09:00:00' 
                then (date(conv.created_at at time zone 'utc' at time zone 'ict')||' '||'09:00:00')::timestamp   
        
        else conv.created_at at time zone 'utc' at time zone 'ict'
        end as conv_initiated,
    sum(case when m.message_type = 1 then 1 else 0 end) as ops_to_agent_m,
    sum(case when m.message_type = 0 then 1 else 0 end) as agent_to_ops_m,
    sum(case when m.message_type = 2 then 1 else 0 end) as system_m,
    concat('https://chat.fairdee.co.th/app/accounts/1/conversations/',conv.id) as conversation_link
from conversations conv
join contacts c on c.id=conv.contact_id
join messages m on m.conversation_id=conv.id
join inboxes i on i.id = conv.inbox_id
left join users on users.id=conv.assignee_id

where
 c.email  not like '%fairdee.co%' and c.email not  like '%vouchinsurance.sg%'
 and i.id !=3
  and conv.id in (select
    conv.id
from conversations conv
join messages m on m.conversation_id=conv.id
join 
        (select max(m.id) as maxid from messages m
        join conversations conv on m.conversation_id=conv.id
        group by conv.id) as b on
        m.id = b.maxid
        where content not like '%Conversation was marked resolved by%')
     and conv.status != 1
        -- all conv where latest message is not like "resolved by"
group by conv.id,c.name,users.id,users.name
having extract(isodow from (conv.created_at at time zone 'utc' at time zone 'ict'))!= 7
    and date(conv.created_at at time zone 'utc' at time zone 'ict') not in 
            ('05/01/21','05/03/21','05/04/21','05/26/21','06/03/21','07/24/21','07/26/21','07/29/21','08/12/21','09/24/21','10/13/21'
            ,'10/22/21','10/25/21','12/06/21','12/10/21','12/31/21')
order by conv.id desc),

first_res as (select 
conv_id,
    agent_name,
    staff_id,
    staff_name,
    conv_initiated1 as conv_created_at, -- conversation created_at
    -- conv_initiated, -- shift hours considered
    case    
        when staff_name in ('(Team B) - Poo')
        and( (extract(hour from (conv_initiated) ) = 11 and extract(minute from (conv_initiated) ) >= 30)
            or (extract(hour from (conv_initiated) ) = 12 and extract(minute from (conv_initiated) ) < 30) )
            then (date(conv_initiated) ||' '||'12:30:00')::timestamp
        
        when staff_name in ('(Team B) - Samat','(Team B) - Ice')
        and (extract(hour from (conv_initiated) ) = 14 )
            then (date(conv_initiated) ||' '||'15:00:00')::timestamp
            
        when staff_name not in ('(Team B) - Samat','(Team B) - Ice','(Team B) - Poo')
        and staff_name like '%Team A%'
        and( (extract(hour from (conv_initiated) ) = 11 and extract(minute from (conv_initiated) ) >= 30)
            or (extract(hour from (conv_initiated) ) = 12 and extract(minute from (conv_initiated) ) < 30) )
            then (date(conv_initiated) ||' '||'12:30:00')::timestamp
            
        when staff_name not in ('(Team B) - Samat','(Team B) - Ice','(Team B) - Poo')
        and staff_name like '%Team B%'
        and( (extract(hour from (conv_initiated) ) = 12 and extract(minute from (conv_initiated) ) >= 30)
            or (extract(hour from (conv_initiated) ) = 13 and extract(minute from (conv_initiated) ) < 30) )
            then (date(conv_initiated) ||' '||'13:30:00')::timestamp
            
        else conv_initiated 
    end as new_initiated, -- shift hours and lunch break considered
    ops_to_agent_m,
    agent_to_ops_m,
    conversation_link
    from first_res_team)
select 
    agent_name,
    staff_name,
    ops_to_agent_m,
    conv_created_at,
    -- new_initiated,
    now() AT TIME ZONE 'ICT' as current,
    new_initiated + (10 ||' minutes')::interval as new_initiated10,
    age(now() AT TIME ZONE 'ICT', new_initiated + (10 ||' minutes')::interval ) as ageing,
    -- (now() AT TIME ZONE 'ICT') <= (new_initiated + (10 ||' minutes')::interval) as cndn,
    conversation_link
from first_res
where 
    ops_to_agent_m = 0
    and age(now() AT TIME ZONE 'ICT', new_initiated + (10 ||' minutes')::interval ) >= '10 minutes'
    and age(now() AT TIME ZONE 'ICT', new_initiated + (10 ||' minutes')::interval ) > '0 minutes'
    and date(new_initiated) not in (
      '1/3/22',
      '2/16/22',
      '4/6/22',
      '4/13/22',
      '4/14/22',
      '4/15/22',
      '5/16/22',
      '5/2/22',
      '5/4/22',
      '5/16/22',
      '6/3/22',
      '7/13/22',
      '7/28/22',
      '7/29/22',
      '8/12/22',
      '10/13/22',
      '10/14/22',
      '10/24/22',
      '12/5/22',
      '12/12/22',
      '05/01/21',
      '05/03/21',
      '05/04/21',
      '05/26/21',
      '06/03/21',
      '07/24/21',
      '07/26/21',
      '07/29/21',
      '08/12/21',
      '09/24/21',
      '10/13/21',
      '10/22/21',
      '10/23/21',
      '10/25/21',
      '12/06/21',
      '12/10/21',
      '12/31/21'
    )
-- order by system_m desc





Title: Agent codes for Chatwoot search
SQL:  SELECT distinct contacts.custom_attributes->>'agent_code' as agent_code FROM contacts WHERE contacts.custom_attributes->>'agent_code' IS NOT NULL


Title: Make/model data
SQL: SELECT
  masterdata_make.name AS make,
  masterdata_makemodel.name AS model,
  masterdata_cc.name AS cc,
  masterdata_modeldescription.name AS submodel,
  masterdata_makemodel.vehicle_category as vehicle_category,
  masterdata_modeldescription.min_year as 'min_year',
  masterdata_modeldescription.max_year as 'max_year'
--   concat(masterdata_make.name, " ", masterdata_makemodel.name, " ", masterdata_cc.name) car_name,
--   masterdata_make.id AS make_id,
--   masterdata_makemodel.id AS makemodel_id,
--   masterdata_cc.id AS cc_id,
--   masterdata_modeldescription.id AS modeldescription_id
FROM
  masterdata_modeldescription
  JOIN masterdata_cc ON masterdata_cc.id = masterdata_modeldescription.cc_id
  JOIN masterdata_makemodel ON masterdata_makemodel.id = masterdata_cc.make_model_id
  JOIN masterdata_make ON masterdata_make.id = masterdata_makemodel.make_id
  JOIN masterdata_country ON masterdata_country.id = masterdata_make.country_id
WHERE
  masterdata_makemodel.is_deleted = false
  AND masterdata_makemodel.is_motorcycle = false
  AND masterdata_country.code = 'th'
ORDER BY
  masterdata_make.name,
  masterdata_makemodel.name,
  masterdata_cc.name


Title: Current date CMI IG
SQL: SELECT count(cf.id) as Count,
    sum(cf.premium) as Premium 
FROM utils_compulsoryinsuranceform cf
join profiles_affiliate aff on aff.id=cf.affiliate_id 
join profiles_user user on user.id=aff.user_id
-- join utils_uniteconomics ue on ue.id = cf.unit_economics_id
join masterdata_insurer ins on ins.id=cf.insurer_id
WHERE policy_bought = TRUE
  AND cf.policy_number is not NULL
  AND is_cancelled = FALSE
  and user.is_test=false
--   and ins.code in ("asia", "SEI")
--   AND affiliate_commission_given_out > 0
--   and ue.is_valid = TRUE
  and aff.account_type in ('inspection_garage', 'subagent')
  and date(convert_tz(cf.created_at,"UTC","+07:00"))= curdate()


Title: CMI IG monthly performance
SQL: select selling.*, total.total_igs
from 
(select 
   date_format(cf_created_at,"%Y-%m") as month,
    sum(ue.premium_without_tax) Premium,
    count(sale.sale_id) Count,
    count(distinct affiliate_code) as IG
FROM cmi_solo_policy_sold_successfully sale
join utils_uniteconomics ue on sale.unit_economics_id=ue.id
left join (select distinct atag.affiliate_id
from profiles_affiliatetag atag
join profiles_tag tag on tag.id = atag.tag_id
where tag.name in  ('at_agentoffice', 'at_broker')) tag on tag.affiliate_id = sale.affiliate_id
where account_type in ('inspection_garage', 'subagent')
and tag.affiliate_id is null
group by date_format(cf_created_at,"%Y-%m")) selling
left join ( select date_format(month, '%Y-%m') month, 
                    total_igs
            from 
            (select str_to_date(date_format(aff.created_at, '1-%m-%Y'), '%d-%m-%Y') month, 
                    count(aff.affiliate_id), 
                    sum(count(aff.affiliate_id)) 
                        over(order by str_to_date(date_format(aff.created_at, '1-%m-%Y'), '%d-%m-%Y')) total_igs
            from (select distinct * from agent_grouping) aff 
            left join (select distinct atag.affiliate_id
                        from profiles_affiliatetag atag
                        join profiles_tag tag on tag.id = atag.tag_id
                        where tag.name in  ('at_agentoffice', 'at_broker')) tag on tag.affiliate_id = aff.affiliate_id
            where aff.account_type = 'inspection_garage'
            and tag.affiliate_id is null
            group by 1) total ) total on total.month = selling.month



Title: admin names
SQL: select distinct usr.fullname AS created_by_name, count(fqq.id)
FROM utils_fairdeequotationquery fqq
JOIN profiles_affiliate affiliate ON affiliate.id=fqq.affiliate_id
LEFT JOIN profiles_user user ON user.id = affiliate.user_id -- created for
LEFT JOIN profiles_user usr ON usr.id=fqq.created_by_id -- created by
join profiles_userrole urole on urole.user_id=user.id
join profiles_role role on role.id = urole.role_id

WHERE date(fqq.created_at)>=STR_TO_DATE("2021,01,01", "%Y,%m,%d") 
  AND user.is_test = FALSE
and affiliate.user_id != fqq.created_by_id -- made by admin only
and role.name != "admin" -- not created for admin
and user.email not like '%fairdee.co.th' or '%vouch%'
group by usr.id
order by count(fqq.id) desc


Title: CMI payments
SQL: select 
    distinct pv.id,
    CONVERT_TZ(pv.created_at,'UTC', '+07:00') payment_created_at, 
    pv.amount_paid,
    caffiliate.agent_code,
    -- pv.bank_transaction_id,
    pv.vendor_name,
    pv.is_reconciled,
    bt.reference_id bank_transaction_reference_id
    -- p.bank_transaction_id,
    -- p.vendor_name, 
    -- p.vendor_transaction_id, 
    -- p.is_reconciled
from utils_compulsoryinsuranceform cif
join profiles_affiliate aff on aff.id = cif.affiliate_id
JOIN profiles_affiliate caffiliate ON caffiliate.id = cif.affiliate_id
JOIN profiles_user cuser ON caffiliate.user_id = cuser.id
JOIN billing_invoicedetail id ON id.id = cif.invoice_detail_id
JOIN billing_invoice inv ON inv.id = id.invoice_id 
JOIN masterdata_insurer ins ON ins.id=cif.insurer_id
JOIN billing_payment_invoices pi ON pi.invoice_id = inv.id
join billing_payment p on p.id=pi.payment_id
join billing_payment pv on pv.id= p.vendor_transaction_id
left join billing_banktransaction bt ON bt.id = pv.bank_transaction_id
-- AND inv.payment_status != "unpaid"
-- join  billing_combinedinvoice_invoices cinv on cinv.invoice_id=inv.id
-- join billing_combinedinvoice ci on ci.combined_invoice_id=cinv.i
-- join billing_banktransaction bt on bt.id=p.vendor_transaction_id
-- join  billing_thaiqrrequest_invoices tqrin on tqrin.invoice_id=inv.id
-- join billing_thaiqrrequest tqr on tqr.id=tqrin.thaiqrrequest_id
where cuser.is_test = FALSE
    AND cif.policy_bought = TRUE
    AND cif.is_cancelled = FALSE
    -- AND ins.code="asia"
order by pv.created_at desc



Title: Monthly premiums(Motor,Covid,Dengue,PA,CMI solo) by payment created
SQL: /*with motor as
(
SELECT 
      "motor",
      ue.sold_on,
      CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
      sum(premium_without_tax) AS total_premiums,
      sum(insurer_incentive_received) AS incentives_received,
      sum(insurer_commission_received) AS commissions_received,
      count(distinct sale.id) Policies_sold
FROM utils_uniteconomics ue
JOIN policy_fairdeesale_unit_economics fsue ON fsue.uniteconomics_id = ue.id
JOIN policy_fairdeesale sale ON sale.id = fsue.fairdeesale_id
JOIN utils_fairdeequotation quotation ON quotation.id = sale.quotation_id
JOIN profiles_affiliate affiliate ON affiliate.id = sale.affiliate_id
JOIN profiles_user user ON affiliate.user_id = user.id
where
    sale.is_cancelled = FALSE
    AND sale.policy_status NOT LIKE '%rejected'
    and (sale.payment_status IN ("payment_verified",
                              "commission_transferred","credit_approved")
      OR sale.policy_status IN ("policy_sent_to_user",
                                 "policy_delivered_to_user","policy_uploaded") 
      OR EXISTS
        (SELECT 1
        FROM billing_invoice invoice
        JOIN policy_fairdeesaleinvoice sale_invoice_map ON invoice.id = sale_invoice_map.invoice_id
        WHERE sale_invoice_map.fairdee_sale_id = sale.id
            AND invoice.payee = 'fairdee'
            AND invoice.payer = 'customer'
            AND invoice.payment_status != 'unpaid'))
    AND user.is_test = FALSE
    and ue.is_valid=True
    and (affiliate.account_type is null)
     and ue.sold_on > STR_TO_DATE('2019-08-01','%Y-%m-%d')
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
ORDER BY (ue.sold_on) 
),
bm as
(
SELECT 
      "bm",
      ue.sold_on,
      CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
      sum(premium_without_tax) AS total_premiums,
      sum(insurer_incentive_received) AS incentives_received,
      sum(insurer_commission_received) AS commissions_received,
      count(distinct sale.id) Policies_sold
FROM utils_uniteconomics ue
JOIN policy_fairdeesale_unit_economics fsue ON fsue.uniteconomics_id = ue.id
JOIN policy_fairdeesale sale ON sale.id = fsue.fairdeesale_id
JOIN utils_fairdeequotation quotation ON quotation.id = sale.quotation_id
JOIN profiles_affiliate affiliate ON affiliate.id = sale.affiliate_id
JOIN profiles_user user ON affiliate.user_id = user.id
where
    sale.is_cancelled = FALSE
    AND sale.policy_status NOT LIKE '%rejected'
    and (sale.payment_status IN ("payment_verified",
                              "commission_transferred","credit_approved")
      OR sale.policy_status IN ("policy_sent_to_user",
                                 "policy_delivered_to_user","policy_uploaded") 
      OR EXISTS
        (SELECT 1
        FROM billing_invoice invoice
        JOIN policy_fairdeesaleinvoice sale_invoice_map ON invoice.id = sale_invoice_map.invoice_id
        WHERE sale_invoice_map.fairdee_sale_id = sale.id
            AND invoice.payee = 'fairdee'
            AND invoice.payer = 'customer'
            AND invoice.payment_status != 'unpaid'))
    AND user.is_test = FALSE
    and ue.is_valid=True
    and (affiliate.account_type = 'business_manager')
     and ue.sold_on > STR_TO_DATE('2019-08-01','%Y-%m-%d')
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
ORDER BY (ue.sold_on) 
),
motor_ig as
(
SELECT 
      "motor_ig",
      ue.sold_on,
      CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
      sum(premium_without_tax) AS total_premiums,
      sum(insurer_incentive_received) AS incentives_received,
      sum(insurer_commission_received) AS commissions_received,
      count(distinct sale.id) Policies_sold
FROM utils_uniteconomics ue
JOIN policy_fairdeesale_unit_economics fsue ON fsue.uniteconomics_id = ue.id
JOIN policy_fairdeesale sale ON sale.id = fsue.fairdeesale_id
JOIN utils_fairdeequotation quotation ON quotation.id = sale.quotation_id
join masterdata_pricelist pl on quotation.price_list_id = pl.id
join masterdata_insurer insurer on insurer.id = pl.insurer_id
JOIN profiles_affiliate affiliate ON affiliate.id = sale.affiliate_id
JOIN profiles_user user ON affiliate.user_id = user.id
where
    sale.is_cancelled = FALSE
    -- and sale.sale_type = 'credit'
    AND sale.policy_status NOT LIKE '%rejected'
    and (sale.payment_status IN ("payment_verified",
                              "commission_transferred","credit_approved")
      OR sale.policy_status IN ("policy_sent_to_user",
                                 "policy_delivered_to_user","policy_uploaded") 
      OR EXISTS
        (SELECT 1
        FROM billing_invoice invoice
        JOIN policy_fairdeesaleinvoice sale_invoice_map ON invoice.id = sale_invoice_map.invoice_id
        WHERE sale_invoice_map.fairdee_sale_id = sale.id
            AND invoice.payee = 'fairdee'
            AND invoice.payer = 'customer'
            AND invoice.payment_status != 'unpaid')
            )
    and (affiliate.account_type in ('subagent', 'inspection_garage'))
    AND user.is_test = FALSE
    and ue.is_valid=True
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
ORDER BY (ue.sold_on) 
),
motor_mlm as
(

SELECT 
      "motor_mlm",
      ue.sold_on,
      CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
      sum(premium_without_tax) AS total_premiums,
      sum(insurer_incentive_received) AS incentives_received,
      sum(insurer_commission_received) AS commissions_received,
      count(distinct sale.id) Policies_sold
FROM utils_uniteconomics ue
JOIN policy_fairdeesale_unit_economics fsue ON fsue.uniteconomics_id = ue.id
JOIN policy_fairdeesale sale ON sale.id = fsue.fairdeesale_id
JOIN utils_fairdeequotation quotation ON quotation.id = sale.quotation_id
JOIN profiles_affiliate affiliate ON affiliate.id = sale.affiliate_id
JOIN profiles_user user ON affiliate.user_id = user.id
where
    sale.is_cancelled = FALSE
    AND sale.policy_status NOT LIKE '%rejected'
    and (sale.payment_status IN ("payment_verified",
                              "commission_transferred","credit_approved")
      OR sale.policy_status IN ("policy_sent_to_user",
                                 "policy_delivered_to_user","policy_uploaded") 
      OR EXISTS
        (SELECT 1
        FROM billing_invoice invoice
        JOIN policy_fairdeesaleinvoice sale_invoice_map ON invoice.id = sale_invoice_map.invoice_id
        WHERE sale_invoice_map.fairdee_sale_id = sale.id
            AND invoice.payee = 'fairdee'
            AND invoice.payer = 'customer'
            AND invoice.payment_status != 'unpaid'))
    AND user.is_test = FALSE
    and ue.is_valid=True
    and (affiliate.account_type = 'mlm_agent')
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
ORDER BY (ue.sold_on) 
),
covid as(
select
    "covid",
     CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
    sum(premium_without_tax) AS total_premiums,
    sum(insurer_incentive_received) AS incentives_received,
    sum(insurer_commission_received) AS commissions_received,
    count(distinct cf.id) Policies_sold
FROM utils_uniteconomics ue
join utils_covidform cf ON cf.unit_economics_id = ue.id
JOIN billing_invoicedetail idco on idco.id = cf.invoice_detail_id
JOIN billing_invoice invco on invco.id = idco.invoice_id
JOIN profiles_affiliate cfaffiliate ON cfaffiliate.id = cf.affiliate_id
JOIN profiles_user cfuser ON cfaffiliate.user_id = cfuser.id
where invco.payment_status in ("fully_paid", "overpaid")
  AND cf.policy_status != 'docs_rejected' 
  and cf.is_cancelled=False
  AND cfuser.is_test = FALSE
  and ue.is_valid=True
  GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
) 
,
dengue as(
select  
    "dengue",
     CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
    sum(premium_without_tax) AS total_premiums,
    sum(insurer_incentive_received) AS incentives_received,
    sum(insurer_commission_received) AS commissions_received,
    count(distinct df.id) Policies_sold
FROM utils_uniteconomics ue
join utils_dengueform df ON df.unit_economics_id = ue.id
JOIN billing_invoicedetail id on id.id = df.invoice_detail_id
JOIN billing_invoice inv on inv.id = id.invoice_id
JOIN profiles_affiliate dfaffiliate ON dfaffiliate.id = df.affiliate_id
JOIN profiles_user dfuser ON dfaffiliate.user_id = dfuser.id
where inv.payment_status in ("fully_paid", "overpaid")
  AND df.policy_status != 'docs_rejected' 
  and df.is_cancelled=False
  AND dfuser.is_test = FALSE
  and ue.is_valid=True
 GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
) 
,
pa as(
select  
    "pa",
     CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
    sum(premium_without_tax) AS total_premiums,
    sum(insurer_incentive_received) AS incentives_received,
    sum(insurer_commission_received) AS commissions_received,
    count(distinct pa.id) Policies_sold
FROM utils_uniteconomics ue
join utils_paform pa ON pa.unit_economics_id = ue.id
JOIN billing_invoicedetail id on id.id = pa.invoice_detail_id
JOIN billing_invoice inv on inv.id = id.invoice_id
JOIN profiles_affiliate paaffiliate ON paaffiliate.id = pa.affiliate_id
JOIN profiles_user pauser ON paaffiliate.user_id = pauser.id
where inv.payment_status in ("fully_paid", "overpaid")
  AND pa.policy_status != 'docs_rejected' 
  and pa.is_cancelled=False
  AND pauser.is_test = FALSE
  and ue.is_valid=True
 GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
) 
,
cmi_solo as(
select 
    "cmi_solo",
     CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
    sum(premium_without_tax) AS total_premiums,
    sum(insurer_incentive_received) AS incentives_received,
    sum(insurer_commission_received) AS commissions_received,
    count(distinct cif.id) Policies_sold    
FROM utils_uniteconomics ue
JOIN utils_compulsoryinsuranceform cif ON ue.id=cif.unit_economics_id
JOIN masterdata_insurer insurer ON insurer.id=cif.insurer_id
JOIN profiles_affiliate caffiliate ON caffiliate.id = cif.affiliate_id
JOIN profiles_user cuser ON caffiliate.user_id = cuser.id
where cif.policy_bought = TRUE
    AND cif.is_cancelled = FALSE
    AND cuser.is_test = FALSE
    and ue.is_valid=True
    and caffiliate.account_type in ('inspection_garage', 'subagent')
    -- AND affiliate_commission_given_out > 0
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
)
,
cmi_solo_bm as
(
select 
    "cmi_solo",
     CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
    sum(premium_without_tax) AS total_premiums,
    sum(insurer_incentive_received) AS incentives_received,
    sum(insurer_commission_received) AS commissions_received,
    count(distinct cif.id) Policies_sold    
FROM utils_uniteconomics ue
JOIN utils_compulsoryinsuranceform cif ON ue.id=cif.unit_economics_id
JOIN masterdata_insurer insurer ON insurer.id=cif.insurer_id
JOIN profiles_affiliate caffiliate ON caffiliate.id = cif.affiliate_id
JOIN profiles_user cuser ON caffiliate.user_id = cuser.id
where cif.policy_bought = TRUE
    AND cif.is_cancelled = FALSE
    AND cuser.is_test = FALSE
    and ue.is_valid=True
    and caffiliate.account_type = 'business_manager'
 --   AND affiliate_commission_given_out > 0
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
)
,
cmi_solo_mlm as 
(
select 
    "cmi_solo",
     CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
    sum(premium_without_tax) AS total_premiums,
    sum(insurer_incentive_received) AS incentives_received,
    sum(insurer_commission_received) AS commissions_received,
    count(distinct cif.id) Policies_sold    
FROM utils_uniteconomics ue
JOIN utils_compulsoryinsuranceform cif ON ue.id=cif.unit_economics_id
JOIN masterdata_insurer insurer ON insurer.id=cif.insurer_id
JOIN profiles_affiliate caffiliate ON caffiliate.id = cif.affiliate_id
JOIN profiles_user cuser ON caffiliate.user_id = cuser.id
where cif.policy_bought = TRUE
    AND cif.is_cancelled = FALSE
    AND cuser.is_test = FALSE
    and ue.is_valid=True
    and caffiliate.account_type = 'mlm_agent'
--    AND affiliate_commission_given_out > 0
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
)


select 
    motor.dates,
    coalesce(motor.total_premiums,0) 'FD-motor',
    coalesce(bm.total_premiums,0) 'BM-motor',
    coalesce(motor_ig.total_premiums,0) 'IG-motor',
    coalesce(motor_mlm.total_premiums,0) 'MLM-motor',
    coalesce(covid.total_premiums,0)+coalesce(dengue.total_premiums,0)+coalesce(pa.total_premiums,0) 'non-motor',
    -- coalesce(dengue.total_premiums,0) dengue,
    -- coalesce(pa.total_premiums,0) pa,
    coalesce(cmi_solo.total_premiums,0) 'IG-CMI_solo',
    coalesce(cmi_solo_bm.total_premiums,0) 'BM-CMI_solo',
    coalesce(cmi_solo_mlm.total_premiums,0) 'MLM-CMI_solo',
    
    coalesce(motor.total_premiums,0)+coalesce(bm.total_premiums,0)+coalesce(motor_ig.total_premiums,0)+coalesce(motor_mlm.total_premiums,0)+coalesce(covid.total_premiums,0)+coalesce(dengue.total_premiums,0)+coalesce(pa.total_premiums,0)+coalesce(cmi_solo.total_premiums,0)+coalesce(cmi_solo_mlm.total_premiums,0)+coalesce(cmi_solo_bm.total_premiums,0)  as overall_premium
from motor
left join motor_ig on motor_ig.dates = motor.dates
left join bm on bm.dates = motor.dates
left join covid on covid.dates=motor.dates
left join dengue on dengue.dates=motor.dates
left join pa on pa.dates=motor.dates
left join cmi_solo on cmi_solo.dates=motor.dates
left join cmi_solo_bm on cmi_solo_bm.dates=motor.dates
left join cmi_solo_mlm on cmi_solo_mlm.dates=motor.dates
left join motor_mlm on motor_mlm.dates = motor.dates
order by motor.sold_on

*/
select
  concat(account_type, "-", policy_type) grouped,
  count(distinct sale_id, policy_type) policy_sold_count,
  sum(ue.premium_without_tax) premium_without_tax,
  sum(ue.premium_after_tax) premium_after_tax,
  sum(
    coalesce(ue.bonus, 0) + coalesce(ue.referral_bonus, 0)
  ) agent_promotions,
  sum(
    coalesce(ue.insurer_commission_received, 0) + coalesce(ue.insurer_incentive_received, 0)
  ) commissions_earned,
  sum(
    coalesce(ue.affiliate_commission_given_out, 0) + coalesce(ue.subsidy, 0)
  ) affiliate_commission,
  date_format(ue.sold_on, '%Y-%m') months
from
  (
    select
      'Motor' policy_type,
      sale_id,
      case
        when sale.account_type = 'Direct Agent'
        and tag.affiliate_id is null then "FD"
        when sale.account_type = 'mlm_agent'
        and tag.affiliate_id is null then "MLM"
        when sale.account_type in ('inspection_garage', 'subagent')
        and tag.affiliate_id is null then "IG"
        when tag.affiliate_id is not null
        and (
          sale.account_type = 'Direct Agent'
          or sale.account_type in ('inspection_garage', 'subagent')
        ) and tag.name = 'at_agentoffice' then 'AO'
        when tag.affiliate_id is not null 
        and sale.account_type = 'inspection_garage' 
        and tag.name = 'at_broker' then 'broker'
        else sale.account_type
      end account_type,
      uniteconomics_id
    from
      vmi_policy_sold_successfully sale
      left join (
        select
          distinct atag.affiliate_id, tag.name
        from
          profiles_affiliatetag atag
          join profiles_tag tag on tag.id = atag.tag_id
        where
          tag.name in ('at_agentoffice', 'at_broker')
      ) tag on tag.affiliate_id = sale.affiliate_id
      join policy_fairdeesale_unit_economics fue on fue.fairdeesale_id = sale.sale_id
    union All
    select
      policy_type,
      sale_id,
      case
        when sale.account_type = 'Direct Agent'
        and tag.affiliate_id is null then "FD"
        when sale.account_type = 'mlm_agent'
        and tag.affiliate_id is null then "MLM"
        when sale.account_type in ('inspection_garage', 'subagent')
        and tag.affiliate_id is null then "IG"
        when tag.affiliate_id is not null
        and (
          sale.account_type = 'Direct Agent'
          or sale.account_type in ('inspection_garage', 'subagent')
        ) and tag.name = 'at_agentoffice' then 'AO'
        when tag.affiliate_id is not null 
        and sale.account_type in ('inspection_garage', 'subagent')
        and tag.name = 'at_broker' then 'broker'
        else sale.account_type
      end account_type,
      unit_economics_id
    from
      cmi_solo_policy_sold_successfully sale
      left join (
        select
          distinct atag.affiliate_id, tag.name
        from
          profiles_affiliatetag atag
          join profiles_tag tag on tag.id = atag.tag_id
        where
          tag.name in ('at_agentoffice', 'at_broker')
      ) tag on tag.affiliate_id = sale.affiliate_id
    union All
    select
      'Non-Motor' policy_type,
      sale_id,
      case
        when sale.account_type = 'Direct Agent'
        and tag.affiliate_id is null then "FD"
        when sale.account_type = 'mlm_agent'
        and tag.affiliate_id is null then "MLM"
        when sale.account_type in ('inspection_garage', 'subagent')
        and tag.affiliate_id is null then "IG"
        when tag.affiliate_id is not null
        and (
          sale.account_type = 'Direct Agent'
          or sale.account_type in ('inspection_garage', 'subagent')
        ) and tag.name = 'at_agentoffice' then 'AO'
        when tag.affiliate_id is not null 
        and sale.account_type in ('inspection_garage' 'subagent')
        and tag.name = 'at_broker' then 'broker'
        else sale.account_type
      end account_type,
      unit_economics_id
    from
      pa_policy_sold_successfully sale
      left join (
        select
          distinct atag.affiliate_id, tag.name
        from
          profiles_affiliatetag atag
          join profiles_tag tag on tag.id = atag.tag_id
        where
          tag.name in ('at_agentoffice', 'at_broker')
      ) tag on tag.affiliate_id = sale.affiliate_id
    union All
    select
      'Non-Motor' policy_type,
      sale.id sale_id,
      case
        when sale.account_type = 'Direct Agent'
        and tag.affiliate_id is null then "FD"
        when sale.account_type = 'mlm_agent'
        and tag.affiliate_id is null then "MLM"
        when sale.account_type in ('inspection_garage', 'subagent')
        and tag.affiliate_id is null then "IG"
        when tag.affiliate_id is not null
        and (
          sale.account_type = 'Direct Agent'
          or sale.account_type in ('inspection_garage', 'subagent')
        ) and tag.name = 'at_agentoffice' then 'AO'
        when tag.affiliate_id is not null 
        and sale.account_type in ('inspection_garage', 'subagent')
        and tag.name = 'at_broker' then 'broker'
        else sale.account_type
      end account_type,
      unit_economics_id
    from
      covid_policy_sold_successfully sale
      left join (
        select
          distinct atag.affiliate_id, tag.name
        from
          profiles_affiliatetag atag
          join profiles_tag tag on tag.id = atag.tag_id
        where
          tag.name in ('at_agentoffice', 'at_broker')
      ) tag on tag.affiliate_id = sale.affiliate_id
    union All
    select
      'Non-Motor' policy_type,
      sale.id,
      case
        when sale.account_type = 'Direct Agent'
        and tag.affiliate_id is null then "FD"
        when sale.account_type = 'mlm_agent'
        and tag.affiliate_id is null then "MLM"
        when sale.account_type in ('inspection_garage', 'subagent')
        and tag.affiliate_id is null then "IG"
        when tag.affiliate_id is not null
        and (
          sale.account_type = 'Direct Agent'
          or sale.account_type in ('inspection_garage', 'subagent')
        ) and tag.name = 'at_agentoffice' then 'AO'
        when tag.affiliate_id is not null 
        and sale.account_type in ('inspection_garage', 'subagent')
        and tag.name = 'at_broker' then 'broker'
        else sale.account_type
      end account_type,
      unit_economics_id
    from
      dengue_policy_sold_successfull sale
      left join (
        select
          distinct atag.affiliate_id, tag.name
        from
          profiles_affiliatetag atag
          join profiles_tag tag on tag.id = atag.tag_id
        where
          tag.name in ('at_agentoffice', 'at_broker')
      ) tag on tag.affiliate_id = sale.affiliate_id
    union All
    select
      'Non-Standard' policy_type,
      sale.id,
      case
        when aff.account_type is null
        and tag.affiliate_id is null then "FD"
        when aff.account_type = 'mlm_agent'
        and tag.affiliate_id is null then "MLM"
        when aff.account_type in ('inspection_garage', 'subagent')
        and tag.affiliate_id is null then "IG"
        when tag.affiliate_id is not null
        and (
          aff.account_type is null
          or aff.account_type in ('inspection_garage', 'subagent')
        ) and tag.name = 'at_agentoffice' then 'AO'
        when tag.affiliate_id is not null 
        and aff.account_type in ('inspection_garage', 'subagent')
        and tag.name = 'at_broker' then 'broker'
        else aff.account_type
      end account_type,
      unit_economics_id
    from
      policy_nonstandardinsuranceproductsaledata sale
      join profiles_affiliate aff on aff.id = sale.affiliate_id
      left join (
        select
          distinct atag.affiliate_id, tag.name
        from
          profiles_affiliatetag atag
          join profiles_tag tag on tag.id = atag.tag_id
        where
          tag.name in ('at_agentoffice', 'at_broker')
      ) tag on tag.affiliate_id = aff.id
  ) s
  join utils_uniteconomics ue on ue.id = s.uniteconomics_id
where
  ue.is_valid = true -- and policy_type="cmi_solo"
  --  and  sale.account_type is null
group by
  date_format(ue.sold_on, '%Y-%m'),
  policy_type,
  account_type
order by
  concat(account_type, "-", policy_type)


Title: Affiliates with vat enabled
SQL: SELECT agent_code, u.email, u.fullname, aff.national_id, aff.vat_enabled,vat_enabled_date,aff.id
FROM profiles_affiliate aff
JOIN profiles_user u ON u.id = aff.user_id
left join (select min(modified_at)vat_enabled_date,id from profiles_affiliate_historical where vat_enabled=true group by id ) vat on vat.id=aff.id
WHERE vat_enabled=TRUE
and u.is_test=False 




Title: ASIA COVID Issues
SQL: SELECT CONCAT("https://www.fairdee.co.th/corona-wizard?id=", cf.id), address.district, address.province, address.postal_code, cf.policy_start_date, JSON_EXTRACT(cf.scrapy_response_payload, '$.errors') AS "Errors"
,affiliate.agent_code, user.fullname, bd.ac_holder_name, bd.ac_number, bd.bank_name,cf.policy_status,cf.payment_status
FROM utils_covidform cf
left join profiles_affiliate affiliate on cf.affiliate_id= affiliate.id
left join profiles_user user on user.id=user_id
left join profiles_userbankdetail bd on bd.affiliate_id=affiliate.id
JOIN masterdata_covidplan plan ON plan.id = cf.plan_id
JOIN masterdata_insurer insurer ON insurer.id = plan.insurer_id
JOIN utils_address address ON cf.client_address_id = address.id
WHERE insurer.code = 'asia'
AND JSON_LENGTH(cf.scrapy_response_payload, '$.errors') > 0
and cf.payment_status not like "%refunded%"


Title: Fairdee Financial Report
SQL: SET @v_agents = 0;

with ver_agents as(
select
    dates,Verified_agents as m_agents,
    @v_agents := @v_agents + agents.Verified_agents as verified_agents
from
(
SELECT 
    affiliate.created_at,
    CONCAT(MONTH(affiliate.created_at),"/",YEAR(affiliate.created_at)) dates,
    count(distinct affiliate.id) AS "Verified_agents"
FROM profiles_affiliate affiliate
join profiles_user user on user.id=affiliate.user_id
join profiles_userrole urole on urole.user_id=user.id
join profiles_role role on role.id = urole.role_id
WHERE affiliate.has_broker_license=TRUE
AND affiliate.is_oic_data_verified=TRUE
and affiliate.docs_verification_status="verified"
and user.is_test =False
and role.name!="admin"
and user.email not like "%fairdee.co.th%"
and user.email not like "%vouch%"
group by CONCAT(MONTH(affiliate.created_at),"/",YEAR(affiliate.created_at))
order by affiliate.created_at
) as agents
order by created_at),


main as
(SELECT CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) AS month_sold_on, ue.sold_on,
       sum(CASE
               WHEN (cf.id IS NOT NULL  and cfuser.id is not NULL AND invco.payment_status in ("fully_paid", "overpaid"))
                    or (pa.id IS NOT NULL  and pauser.id is not NULL AND invpa.payment_status in ("fully_paid", "overpaid"))
                    or (df.id IS NOT NULL  and dfuser.id is not NULL AND invdf.payment_status in ("fully_paid", "overpaid"))
                    OR (sale.id IS NOT NULL and user.id is not NULL)
                    OR (cif.id IS NOT NULL and cuser.id is not NULL) THEN premium_without_tax
           END) AS total_premiums,
        sum(CASE
                WHEN (unit_type != 'compulsory_car_insurance'
                and sale.id is not null and user.id is not null and affiliate.account_type = 'inspection_garage' and sale.sale_type = 'credit') THEN premium_without_tax
            END) as vmi_ig_total_premium,
       sum(CASE
               WHEN (cf.id IS NOT NULL  and cfuser.id is not NULL 
                AND invco.payment_status in ("fully_paid", "overpaid")) THEN premium_without_tax
           END) AS covid_premiums,
       sum(CASE
               WHEN (pa.id IS NOT NULL  and pauser.id is not NULL 
                AND invpa.payment_status in ("fully_paid", "overpaid")) THEN premium_without_tax
           END) AS pa_premiums,
       sum(CASE
               WHEN (df.id IS NOT NULL  and dfuser.id is not NULL 
                AND invdf.payment_status in ("fully_paid", "overpaid")) THEN premium_without_tax
           END) AS dengue_premiums,
       sum(CASE
               WHEN unit_type != 'compulsory_car_insurance'
                    AND sale.id IS NOT NULL and user.id is not NULL THEN premium_without_tax
           END) AS total_voluntary_motor_premiums,
       sum(CASE
               WHEN unit_type != 'compulsory_car_insurance'
                    AND (sale.id IS NOT NULL and user.id is not NULL)
                    AND sale.sale_type != "instalment" THEN premium_without_tax
           END) AS voluntary_premiums_without_instalment,
       sum(CASE
               WHEN unit_type != 'compulsory_car_insurance'
                    AND (sale.id IS NOT NULL and user.id is not NULL)
                    AND sale.sale_type = "instalment" THEN premium_without_tax
           END) AS voluntary_premiums_with_instalment,
       sum(CASE
               WHEN unit_type = 'compulsory_car_insurance'
                    AND ((sale.id IS NOT NULL and user.id is not NULL)
                         OR (cif.id IS NOT NULL  and cuser.id is not NULL)) THEN premium_without_tax
           END) AS total_cmi_premiums,
       sum(CASE
               WHEN unit_type = 'compulsory_car_insurance'
                    AND sale.id IS NOT NULL  and user.id is not NULL THEN premium_without_tax
           END) AS cmi_premiums_sale,
       sum(CASE
               WHEN unit_type = 'compulsory_car_insurance'
                    AND cif.id IS NOT NULL and cuser.id is not NULL
                    THEN premium_without_tax
           END) AS cmi_only_premiums,
       sum(CASE
               WHEN (cf.id IS NOT NULL  and cfuser.id is not NULL AND invco.payment_status in ("fully_paid", "overpaid"))
                    or (pa.id IS NOT NULL  and pauser.id is not NULL AND invpa.payment_status in ("fully_paid", "overpaid"))
                    or (df.id IS NOT NULL  and dfuser.id is not NULL AND invdf.payment_status in ("fully_paid", "overpaid"))
                    OR (sale.id IS NOT NULL and user.id is not NULL)
                    OR (cif.id IS NOT NULL and cuser.id is not NULL) THEN insurer_commission_received + insurer_incentive_received
           END) AS total_commissions_earned,
        sum(CASE
                WHEN (cf.id IS NOT NULL  and cfuser.id is not NULL AND invco.payment_status in ("fully_paid", "overpaid") and cfaffiliate.account_type is null)
                    or (pa.id IS NOT NULL  and pauser.id is not NULL AND invpa.payment_status in ("fully_paid", "overpaid") and paaffiliate.account_type is null)
                    or (df.id IS NOT NULL  and dfuser.id is not NULL AND invdf.payment_status in ("fully_paid", "overpaid") and dfaffiliate.account_type is null)
                    OR (sale.id IS NOT NULL and user.id is not NULL and affiliate.account_type is null)
                    OR (cif.id IS NOT NULL and cuser.id is not NULL and caffiliate.account_type is null)then insurer_commission_received + insurer_incentive_received
            end) as Direct_agents_commissions_earned,
        sum(CASE
                WHEN (cf.id IS NOT NULL  and cfuser.id is not NULL AND invco.payment_status in ("fully_paid", "overpaid") and cfaffiliate.account_type = 'mlm_agent')
                    or (pa.id IS NOT NULL  and pauser.id is not NULL AND invpa.payment_status in ("fully_paid", "overpaid") and paaffiliate.account_type = 'mlm_agent')
                    or (df.id IS NOT NULL  and dfuser.id is not NULL AND invdf.payment_status in ("fully_paid", "overpaid") and dfaffiliate.account_type = 'mlm_agent')
                    OR (sale.id IS NOT NULL and user.id is not NULL and affiliate.account_type = 'mlm_agent')
                    OR (cif.id IS NOT NULL and cuser.id is not NULL and caffiliate.account_type = 'mlm_agent')then insurer_commission_received + insurer_incentive_received
            end) as MLM_agents_commissions_earned,
        sum(CASE
                WHEN (cf.id IS NOT NULL  and cfuser.id is not NULL AND invco.payment_status in ("fully_paid", "overpaid") and cfaffiliate.account_type = 'business_manager')
                    or (pa.id IS NOT NULL  and pauser.id is not NULL AND invpa.payment_status in ("fully_paid", "overpaid") and paaffiliate.account_type = 'business_manager')
                    or (df.id IS NOT NULL  and dfuser.id is not NULL AND invdf.payment_status in ("fully_paid", "overpaid") and dfaffiliate.account_type = 'business_manager')
                    OR (sale.id IS NOT NULL and user.id is not NULL and affiliate.account_type = 'business_manager')
                    OR (cif.id IS NOT NULL and cuser.id is not NULL and caffiliate.account_type = 'business_manager')then insurer_commission_received + insurer_incentive_received
            end) as BM_agents_commissions_earned,
        sum(CASE
                WHEN (cf.id IS NOT NULL  and cfuser.id is not NULL AND invco.payment_status in ("fully_paid", "overpaid"))
                    or (pa.id IS NOT NULL  and pauser.id is not NULL AND invpa.payment_status in ("fully_paid", "overpaid"))
                    or (df.id IS NOT NULL  and dfuser.id is not NULL AND invdf.payment_status in ("fully_paid", "overpaid")) then insurer_commission_received + insurer_incentive_received
            end) as Non_motor_sales_commissions_earned,
        sum(CASE
                when cif.id IS NOT NULL and cuser.id is not NULL and caffiliate.account_type in ('inspection_garage', 'subagent') then insurer_commission_received + insurer_incentive_received
            end) as CMI_IG_commission_earned,
       sum(CASE
                when (cf.id IS NOT NULL  and cfuser.id is not NULL AND invco.payment_status in ("fully_paid", "overpaid"))
                    or (pa.id IS NOT NULL  and pauser.id is not NULL AND invpa.payment_status in ("fully_paid", "overpaid"))
                    or (df.id IS NOT NULL  and dfuser.id is not NULL AND invdf.payment_status in ("fully_paid", "overpaid"))
                    OR (sale.id IS NOT NULL and user.id is not NULL)
                    OR (cif.id IS NOT NULL and cuser.id is not NULL) THEN affiliate_commission_given_out + subsidy
           END) AS agent_commission,
        sum(CASE
                WHEN (cf.id IS NOT NULL  and cfuser.id is not NULL AND invco.payment_status in ("fully_paid", "overpaid") and cfaffiliate.account_type is null)
                    or (pa.id IS NOT NULL  and pauser.id is not NULL AND invpa.payment_status in ("fully_paid", "overpaid") and paaffiliate.account_type is null)
                    or (df.id IS NOT NULL  and dfuser.id is not NULL AND invdf.payment_status in ("fully_paid", "overpaid") and dfaffiliate.account_type is null)
                    OR (sale.id IS NOT NULL and user.id is not NULL and affiliate.account_type is null)
                    OR (cif.id IS NOT NULL and cuser.id is not NULL and caffiliate.account_type is null) then affiliate_commission_given_out + subsidy
            end) as Direct_agent_commissions_given_out,
        sum(CASE
                WHEN (cf.id IS NOT NULL  and cfuser.id is not NULL AND invco.payment_status in ("fully_paid", "overpaid") and cfaffiliate.account_type = 'mlm_agent')
                    or (pa.id IS NOT NULL  and pauser.id is not NULL AND invpa.payment_status in ("fully_paid", "overpaid") and paaffiliate.account_type = 'mlm_agent')
                    or (df.id IS NOT NULL  and dfuser.id is not NULL AND invdf.payment_status in ("fully_paid", "overpaid") and dfaffiliate.account_type = 'mlm_agent')
                    OR (sale.id IS NOT NULL and user.id is not NULL and affiliate.account_type = 'mlm_agent')
                    OR (cif.id IS NOT NULL and cuser.id is not NULL and caffiliate.account_type = 'mlm_agent')then affiliate_commission_given_out + subsidy
            end) as MLM_agents_commissions_given_out,
        sum(CASE
                WHEN (cf.id IS NOT NULL  and cfuser.id is not NULL AND invco.payment_status in ("fully_paid", "overpaid") and cfaffiliate.account_type = 'business_manager')
                    or (pa.id IS NOT NULL  and pauser.id is not NULL AND invpa.payment_status in ("fully_paid", "overpaid") and paaffiliate.account_type = 'business_manager')
                    or (df.id IS NOT NULL  and dfuser.id is not NULL AND invdf.payment_status in ("fully_paid", "overpaid") and dfaffiliate.account_type = 'business_manager')
                    OR (sale.id IS NOT NULL and user.id is not NULL and affiliate.account_type = 'business_manager')
                    OR (cif.id IS NOT NULL and cuser.id is not NULL and caffiliate.account_type = 'business_manager') then affiliate_commission_given_out + subsidy
            end) as BM_agents_commissions_given_out,
        sum(CASE
                when cif.id IS NOT NULL and cuser.id is not NULL and caffiliate.account_type in ('inspection_garage', 'subagent') then affiliate_commission_given_out + subsidy
            end) as CMI_IG_commission_given_out,
        sum(CASE
                WHEN (cf.id IS NOT NULL  and cfuser.id is not NULL AND invco.payment_status in ("fully_paid", "overpaid"))
                    or (pa.id IS NOT NULL  and pauser.id is not NULL AND invpa.payment_status in ("fully_paid", "overpaid"))
                    or (df.id IS NOT NULL  and dfuser.id is not NULL AND invdf.payment_status in ("fully_paid", "overpaid")) then affiliate_commission_given_out + subsidy
            end) as Non_motor_sales_commissions_given_out,
       sum(CASE
               WHEN (cf.id IS NOT NULL  and cfuser.id is not NULL AND invco.payment_status in ("fully_paid", "overpaid"))
                    OR (sale.id IS NOT NULL and user.id is not NULL)
                    OR (cif.id IS NOT NULL and cuser.id is not NULL) THEN coalesce(bonus, 0) + coalesce(referral_bonus,0)
           END) AS agent_promotions,
       count(DISTINCT CASE
                          WHEN (cf.id IS NOT NULL  and cfuser.id is not NULL AND invco.payment_status in ("fully_paid", "overpaid"))
                    OR (sale.id IS NOT NULL and user.id is not NULL)
                    OR (cif.id IS NOT NULL and cuser.id is not NULL) THEN ue.id
                      END) AS policies_sold,
       count(CASE
                 WHEN unit_type != 'compulsory_car_insurance'
                    AND sale.id IS NOT NULL and user.id is not NULL THEN 1
             END) AS voluntary_motor_policies_sold,
       sum(CASE
               WHEN unit_type != 'compulsory_car_insurance'
                    AND sale.id IS NOT NULL and user.id is not NULL  THEN insurer_commission_received + insurer_incentive_received
           END) AS voluntary_motor_commissions_earned,
       sum(CASE
               WHEN unit_type != 'compulsory_car_insurance'
                    AND sale.id IS NOT NULL and user.id is not NULL  THEN affiliate_commission_given_out + subsidy
           END) AS voluntary_motor_affiliate_commission,
       sum(CASE
               WHEN unit_type != 'compulsory_car_insurance'
                    AND sale.id IS NOT NULL and user.id is not NULL THEN coalesce(bonus, 0) + coalesce(referral_bonus,0)
           END) AS voluntary_motor_affiliate_promotions,
        count(CASE
                WHEN unit_type != 'compulsory_car_insurance'
                    and sale.id is not null and user.id is not null and affiliate.account_type = 'inspection_garage' and sale.sale_type = 'credit' then 1
            END) as vmi_ig_policies_sold,
        sum(CASE
                WHEN unit_type != 'compulsory_car_insurance'
                    and sale.id is not null and user.id is not null and affiliate.account_type = 'inspection_garage' and sale.sale_type = 'credit' then insurer_commission_received + insurer_incentive_received
            END) as vmi_ig_commission_earned,
        sum(CASE
                WHEN unit_type != 'compulsory_car_insurance'
                    and sale.id is not null and user.id is not null and affiliate.account_type = 'inspection_garage' and sale.sale_type = 'credit' then affiliate_commission_given_out + subsidy
            END) as vmi_ig_affiliate_commission,
       count(CASE
                 WHEN unit_type = 'compulsory_car_insurance'
                    AND ((sale.id IS NOT NULL and user.id is not NULL)
                         OR (cif.id IS NOT NULL and cuser.id is not NULL)) THEN 1
             END) AS cmi_policies_sold,
       sum(CASE
               WHEN unit_type = 'compulsory_car_insurance'
                    AND ((sale.id IS NOT NULL and user.id is not NULL)
                         OR (cif.id IS NOT NULL and cuser.id is not NULL)) THEN insurer_commission_received + insurer_incentive_received
           END) AS cmi_commissions_earned,
       sum(CASE
               WHEN unit_type = 'compulsory_car_insurance'
                    AND ((sale.id IS NOT NULL and user.id is not NULL)
                         OR (cif.id IS NOT NULL and cuser.id is not NULL)) THEN affiliate_commission_given_out + subsidy
           END) AS cmi_affiliate_commission,
       sum(CASE
               WHEN unit_type = 'compulsory_car_insurance'
                    AND ((sale.id IS NOT NULL and user.id is not NULL)
                         OR (cif.id IS NOT NULL and cuser.id is not NULL)) THEN coalesce(bonus, 0) + coalesce(referral_bonus,0)
           END) AS cmi_affiliate_promotions,
        --   count(distinct CASE
        --       WHEN  user.id is not NULL THEN affiliate.id
        --   END  ) as Selling_agents
        count(distinct CASE
               WHEN (cf.id IS NOT NULL  and cfuser.id is not NULL AND invco.payment_status in ("fully_paid", "overpaid"))
                    OR (sale.id IS NOT NULL and user.id is not NULL)
                    OR (cif.id IS NOT NULL and cuser.id is not NULL)
                     or (pa.id IS NOT NULL  and pauser.id is not NULL AND invpa.payment_status in ("fully_paid", "overpaid"))
                    or (df.id IS NOT NULL  and dfuser.id is not NULL AND invdf.payment_status in ("fully_paid", "overpaid"))
                    THEN ue.affiliate_id
           END) AS Selling_agents
FROM utils_uniteconomics ue
left join profiles_affiliate affiliate on affiliate.id = ue.affiliate_id
left join profiles_user user on user.id=affiliate.user_id
and user.is_test=False
LEFT JOIN policy_fairdeesale_unit_economics fsue ON fsue.uniteconomics_id = ue.id
LEFT JOIN policy_fairdeesale sale ON sale.id = fsue.fairdeesale_id
AND sale.is_cancelled = FALSE
AND sale.policy_status NOT LIKE '%rejected'
AND (sale.payment_status IN ("payment_verified",
                             "commission_transferred","credit_approved")
     OR sale.policy_status IN ("policy_sent_to_user",
                               "policy_delivered_to_user",
                               "policy_uploaded")
     OR (sale.sale_type = "instalment"
         AND EXISTS
           ( SELECT 1
            FROM billing_invoice invoice
            JOIN policy_fairdeesaleinvoice sale_invoice_map ON invoice.id = sale_invoice_map.invoice_id
            WHERE sale_invoice_map.fairdee_sale_id = sale.id
              AND invoice.payee = 'fairdee'
              AND invoice.payer = 'customer'
              AND invoice.payment_status != 'unpaid' )))
LEFT JOIN utils_covidform cf ON cf.unit_economics_id = ue.id
LEFT JOIN profiles_affiliate cfaffiliate ON cfaffiliate.id = cf.affiliate_id
LEFT JOIN profiles_user cfuser ON cfaffiliate.user_id = cfuser.id
AND cfuser.is_test = FALSE
left JOIN billing_invoicedetail idco on idco.id = cf.invoice_detail_id
left JOIN billing_invoice invco on invco.id = idco.invoice_id
  and invco.payment_status in ("fully_paid", "overpaid")
  AND cf.policy_status != 'docs_rejected' 
  and cf.is_cancelled=False
LEFT JOIN utils_paform pa ON pa.unit_economics_id = ue.id
LEFT JOIN profiles_affiliate paaffiliate ON paaffiliate.id = pa.affiliate_id
LEFT JOIN profiles_user pauser ON paaffiliate.user_id = pauser.id
AND pauser.is_test = FALSE
left JOIN billing_invoicedetail idpa on idpa.id = pa.invoice_detail_id
left JOIN billing_invoice invpa on invpa.id = idpa.invoice_id
  and invpa.payment_status in ("fully_paid", "overpaid")
  AND pa.policy_status != 'docs_rejected' 
  and pa.is_cancelled=False
  LEFT JOIN utils_dengueform df ON df.unit_economics_id = ue.id
LEFT JOIN profiles_affiliate dfaffiliate ON dfaffiliate.id = df.affiliate_id
LEFT JOIN profiles_user dfuser ON dfaffiliate.user_id = dfuser.id
AND dfuser.is_test = FALSE
left JOIN billing_invoicedetail iddf on iddf.id = df.invoice_detail_id
left JOIN billing_invoice invdf on invdf.id = iddf.invoice_id
  and invdf.payment_status in ("fully_paid", "overpaid")
  AND df.policy_status != 'docs_rejected' 
  and df.is_cancelled=False
LEFT JOIN utils_compulsoryinsuranceform cif ON ue.id=cif.unit_economics_id
AND cif.policy_bought = TRUE
AND cif.is_cancelled = FALSE
LEFT JOIN profiles_affiliate caffiliate ON caffiliate.id = cif.affiliate_id
LEFT JOIN profiles_user cuser ON caffiliate.user_id = cuser.id
AND cuser.is_test = FALSE
LEFT JOIN billing_invoicedetail id ON id.id = cif.invoice_detail_id
LEFT JOIN billing_invoice inv ON inv.id = id.invoice_id
LEFT JOIN masterdata_insurer ins ON ins.id=cif.insurer_id
WHERE ue.is_valid = TRUE
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
ORDER BY (ue.sold_on) 
)
select 
    main.*,
    ver_agents.verified_agents
from main
left join ver_agents on ver_agents.dates = main.month_sold_on
order by main.sold_on


Title: Total Agents Selling - By payment created
SQL: SELECT count(distinct affiliate.id) AS "Total Affiliates"
FROM policy_fairdeesale sale
JOIN utils_fairdeequotation quotation ON sale.quotation_id = quotation.id
JOIN profiles_affiliate affiliate ON affiliate.id = sale.affiliate_id
JOIN profiles_user user ON affiliate.user_id = user.id
join profiles_userrole urole on urole.user_id=user.id
join profiles_role role on role.id = urole.role_id
WHERE
 user.is_test = FALSE
--  and affiliate.has_broker_license = True
--  and role.name!="admin"
--  and user.email not like "%fairdee.co.th%"
--  and user.email not like "%vouch%"
 AND sale.is_cancelled = FALSE
 AND sale.policy_status NOT LIKE '%rejected'
  and (sale.payment_status IN ("payment_verified",
                              "commission_transferred","credit_approved")
      OR sale.policy_status IN ("policy_sent_to_user",
                                 "policy_delivered_to_user","policy_uploaded") 
      OR EXISTS
        (SELECT 1
        FROM billing_invoice invoice
        JOIN policy_fairdeesaleinvoice sale_invoice_map ON invoice.id = sale_invoice_map.invoice_id
        WHERE sale_invoice_map.fairdee_sale_id = sale.id
            AND invoice.payee = 'fairdee'
            AND invoice.payer = 'customer'
            AND invoice.payment_status != 'unpaid')
        )
  and (affiliate.account_type is null)


Title: Khun Nid's Total Voluntary Premiums per Month
SQL: SELECT concat(month(sale.sold_on), "/", year(sale.sold_on)) as "Month Sold One" , count(sale.id) as "Total Sale", sum(pl.gross_premium) as "Total Premium"
    FROM policy_fairdeesale sale
    JOIN utils_fairdeequotation quotation on sale.quotation_id = quotation.id
    JOIN utils_fairdeequotationquery qq ON qq.id = quotation.quotation_query_id
   LEFT JOIN masterdata_pricelist pl ON pl.id = quotation.price_list_id
    JOIN profiles_affiliate affiliate ON affiliate.id = sale.affiliate_id
    JOIN profiles_user user on affiliate.user_id = user.id
    JOIN profiles_usertag usertag ON usertag.user_id = user.id
JOIN profiles_tag tag ON usertag.tag_id = tag.id
    WHERE user.is_test = false and sale.is_cancelled = false
    and sale.policy_status not like '%rejected' and tag.name like 'ae-nid'
    group by concat(month(sale.sold_on), "/", year(sale.sold_on))
    order by concat(month(sale.sold_on), "/", year(sale.sold_on)) desc


Title: Khun Nid's Affiliate Details
SQL: SELECT aff.agent_code,
       aff.fullname,
       aff.phone,
       sales.sale_count,
       quotes.quote_count,
       quotes.pdf_count,
       sales.total_premiums,
       sales.average_premiums
FROM (
SELECT affiliate.agent_code,
       user.fullname,
       user.phone
FROM profiles_affiliate affiliate
JOIN profiles_user user ON user.id = affiliate.user_id
LEFT JOIN profiles_usertag usertag ON usertag.user_id = user.id
LEFT JOIN profiles_tag tag ON usertag.tag_id = tag.id
LEFT JOIN profiles_affiliate ref_aff ON ref_aff.id = affiliate.referrer_id
WHERE user.is_test = FALSE
  AND tag.name LIKE 'ae-nid') as aff
  JOIN
    (SELECT affiliate.agent_code,
            count(CASE
                      WHEN sale.id THEN 1
                  END) AS sale_count,
            sum(pl.gross_premium) AS total_premiums, avg(pl.gross_premium) as average_premiums
     FROM profiles_affiliate affiliate
     LEFT JOIN policy_fairdeesale sale ON affiliate.id = sale.affiliate_id
     AND sale.is_cancelled = FALSE
     AND sale.policy_status NOT LIKE '%rejected'
     AND MONTH(sale.sold_on) = MONTH(CURRENT_DATE())
     AND YEAR(sale.sold_on) = YEAR(CURRENT_DATE())
     LEFT JOIN utils_fairdeequotation quotation ON sale.quotation_id = quotation.id
     LEFT JOIN utils_fairdeequotationquery qq ON qq.id = quotation.quotation_query_id
     LEFT JOIN masterdata_pricelist pl ON pl.id = quotation.price_list_id
     GROUP BY affiliate.agent_code
     ORDER BY sale_count) AS sales ON aff.agent_code = sales.agent_code
  JOIN
    (SELECT affiliate.agent_code,
            count(qq.id) AS quote_count,
            count(CASE
                      WHEN qq.download_count > 0 THEN 1
                  END) AS pdf_count
     FROM profiles_affiliate affiliate
     LEFT JOIN utils_fairdeequotationquery qq ON affiliate.id = qq.affiliate_id
     AND month(qq.created_at) = MONTH(CURRENT_DATE())
     AND year(qq.created_at) = year(CURRENT_DATE())
     GROUP BY affiliate.agent_code
     ORDER BY quote_count) AS quotes ON quotes.agent_code = aff.agent_code
GROUP BY aff.agent_code
ORDER BY sales.sale_count DESC,
         quotes.quote_count DESC,
         quotes.pdf_count DESC


Title: Fairdee Affiliate Tags
SQL: SELECT "ALL AFFILIATES" AS name
UNION ALL
SELECT "OFFLINE AFFILIATES" AS name
UNION ALL
SELECT "ONLINE AFFILIATES" AS name
UNION ALL
SELECT DISTINCT tag.name AS name
FROM profiles_tag tag
JOIN profiles_usertag ut ON ut.tag_id = tag.id
JOIN profiles_user usr ON ut.user_id = usr.id
JOIN profiles_affiliate aff ON aff.user_id = usr.id



