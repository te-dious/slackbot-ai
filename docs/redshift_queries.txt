Title: All agents info [Chana]
SQL: Select
  usr.fullname,
  json_extract_path_text( aff.oic_data, 'fullname') oic_fullname, 
  aff.agent_code,
  aff.broker_license_number,
  aff.account_type, 
  aff.oic_data
from
  vouch_db.profiles_affiliate AS aff
  join vouch_db.profiles_user usr on aff.user_id = usr.id
  join vouch_db.profiles_affiliate pf on aff.user_id = pf.id
where
  aff.is_oic_data_verified = 1
  and aff.has_broker_license = 1
  and usr.email not like '%fairdee.co.th%'
--  and aff.is_blocked = 0
  and usr.is_banned = 0


Title: MLM Missing Sale Analysis
SQL: select  sale.id, sale.sale_status, sale.policy_status, sale.payment_status, sale.sale_type, sale.policy_sold_on_at::date, 
        concat('https://www.fairdee.co.th/fairdee-wizard?id=', s.quotation_id) wizard
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.policy_fairdeesale s on s.id = sale.id 
where sale.product_type_name = 'vmi'
and sale.id in 
(92923,
92926,
92927,
92931,
92936,
92951,
92953,
92960,
92962,
92963,
92965,
92971,
92986,
92988,
92990,
92993,
92998,
93003,
93006,
93007,
93008,
93017,
93026,
93029,
93030,
93032,
93035,
93038,
93040,
93043,
93046,
93050,
93054,
93056,
93057,
93059,
93062,
93063,
93064,
93067,
93069,
93070,
93072,
93073,
93075,
93084,
93088,
93098,
93101,
93103,
93106,
93107,
93109,
93112,
93116,
93118,
93120,
93121,
93123,
93125,
93128,
93134,
93141,
93143,
93145,
93146,
93150,
93281,
94235,
94742,
95212,
95244,
95260,
95963,
96076,
96362,
96429,
96547,
97114,
97155,
97332,
97359,
97656,
97820,
97845,
98125,
98131,
98138,
98139,
98196,
98371,
98427,
98460,
98540,
98561,
98594,
98681,
98742,
98806,
98808,
98809,
98810,
98817,
98819,
98824,
98826,
98830,
98832,
98837,
98839,
98841,
98845,
98848,
98852,
98855,
98861,
98862,
98863,
98865,
98868,
98869,
98870,
98871,
98876,
98880,
98884,
98885,
98886,
98893,
98894,
98900,
98901,
98902,
98904,
98907,
98909,
98910,
98911,
98916,
98919,
98921,
98925,
98927,
98932,
98933,
98939,
98940,
98943,
98947,
98948,
98952,
98953,
98955,
98956,
99189,
99233)
order by sale.policy_sold_on_at::date 


Title: VMI IG Sales
SQL: with prayot as(
select distinct atag.affiliate_id 
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
where tags.name like '%prayot%' 
),
ao as(
select distinct atag.affiliate_id
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
where tags.name in ('at_agentoffice', 'at_broker', 'at_agentoffline')
),
vmi as 
(
select  sale.id, 
		sale.vehicle_number, 
		sale.policy_sold_on_at::date sold_on, 
		sale.sale_type, 
		sale.policy_status, 
		sale.payment_status, 
		sale.premium_without_tax_amt, 
		sale.fairdee_commission_amt, 
		case 
			when prayot.affiliate_id is not null then sale.expected_affiliate_commission_amt + 0.01*sale.premium_without_tax_amt 
			else sale.expected_affiliate_commission_amt
		end affiliate_commission_amt, 
		((case 
			when prayot.affiliate_id is not null then sale.expected_affiliate_commission_amt + 0.01*sale.premium_without_tax_amt 
			else sale.expected_affiliate_commission_amt
		end - sale.premium_without_tax_amt*0.18 )/1.03)*0.03 wht_cost, 
		((((case 
			when prayot.affiliate_id is not null then sale.expected_affiliate_commission_amt + 0.01*sale.premium_without_tax_amt 
			else sale.expected_affiliate_commission_amt
		end - sale.premium_without_tax_amt*0.18))/1.03)/520000)*3000 nominee_cost
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_affiliate aff on aff.id = sale.affiliate_id 
left join prayot on prayot.affiliate_id = aff.id
left join ao on ao.affiliate_id = aff.id
where aff.account_type = 'inspection_garage'
and sale.product_type_name = 'vmi'
and sale.sale_status = 'is_sold'
and to_date(policy_sold_on_at::date, 'YYYY-01-01') = '2023-01-01' 
and ao.affiliate_id is null
)
select to_char(sold_on, 'YYYY-MM') sale_month, 
		count(id) total_sale, 
		sum(premium_without_tax_amt) total_premium, 
		sum(fairdee_commission_amt) commission_earned, 
		sum(affiliate_commission_amt) commission_given, 
		sum(wht_cost) + sum(nominee_cost) tax_absorption,
		sum(fairdee_commission_amt) - 
		(sum(affiliate_commission_amt) + sum(wht_cost) + sum(nominee_cost)) net_revenue, 
		(sum(fairdee_commission_amt) - 
		(sum(affiliate_commission_amt) + sum(wht_cost) + sum(nominee_cost)))*100/sum(premium_without_tax_amt) margin
from vmi
group by 1
order by 1



Title: VMI IG aggregate Margin
SQL: with prayot as(
select distinct atag.affiliate_id 
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
where tags.name like '%prayot%' 
),
ao as(
select distinct atag.affiliate_id
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
where tags.name in ('at_agentoffice', 'at_broker', 'at_agentoffline')
),
vmi as 
(
select  sale.id, 
		sale.vehicle_number, 
		sale.policy_sold_on_at::date sold_on, 
		sale.sale_type, 
		sale.policy_status, 
		sale.payment_status, 
		sale.premium_without_tax_amt, 
		sale.fairdee_commission_amt, 
		case 
			when prayot.affiliate_id is not null then sale.expected_affiliate_commission_amt + 0.01*sale.premium_without_tax_amt 
			else sale.expected_affiliate_commission_amt
		end affiliate_commission_amt, 
		((case 
			when prayot.affiliate_id is not null then sale.expected_affiliate_commission_amt + 0.01*sale.premium_without_tax_amt 
			else sale.expected_affiliate_commission_amt
		end - sale.premium_without_tax_amt*0.18 )/1.03)*0.03 wht_cost, 
		((((case 
			when prayot.affiliate_id is not null then sale.expected_affiliate_commission_amt + 0.01*sale.premium_without_tax_amt 
			else sale.expected_affiliate_commission_amt
		end - sale.premium_without_tax_amt*0.18))/1.03)/520000)*3000 nominee_cost
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_affiliate aff on aff.id = sale.affiliate_id 
left join prayot on prayot.affiliate_id = aff.id
left join ao on ao.affiliate_id = aff.id
where aff.account_type = 'inspection_garage'
and sale.product_type_name = 'vmi'
and sale.sale_status = 'is_sold'
and to_date(policy_sold_on_at::date, 'YYYY-01-01') = '2023-01-01' 
and ao.affiliate_id is null
)
select to_char(sold_on, 'YYYY-MM') sale_month, 
		count(id) total_sale, 
		sum(premium_without_tax_amt) total_premium, 
		sum(fairdee_commission_amt) commission_earned, 
		sum(affiliate_commission_amt) commission_given, 
		sum(wht_cost) + sum(nominee_cost) tax_absorption,
		sum(fairdee_commission_amt) - 
		(sum(affiliate_commission_amt) + sum(wht_cost) + sum(nominee_cost)) net_revenue, 
		(sum(fairdee_commission_amt) - 
		(sum(affiliate_commission_amt) + sum(wht_cost) + sum(nominee_cost)))*100/sum(premium_without_tax_amt) margin
from vmi
group by 1
order by 1



Title: Diff Salelevel Settings and Sale Incentive
SQL: with payment as(
select  bpi.invoice_id, 
		sum(p.amount_paid) total_paid, 
		min(p.paid_at) first_paid, 
		max(p.paid_at) last_paid
from vouch_db.billing_payment_invoices bpi 
join vouch_db.billing_payment p on p.id = bpi.payment_id 
where p.is_deleted = 0 
group by 1
), 
sale_setting as(
select  aff.agent_code selling_affiliate,
		aff.id selling_affiliate_id, 
		iaff.agent_code incentive_affiliate,
		iaff.id incentive_affiliate_id, 
		sale.id sale_id, 
		sale.vehicle_number, 
		ss.incentive_rate, 
		ss.reason 
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_salelevelsettings ss on ss.sale_id = sale.id 
join vouch_db.profiles_affiliate aff on aff.id = sale.affiliate_id 
join vouch_db.profiles_affiliate iaff on iaff.id = ss.affiliate_id 
where sale.product_type_name = 'vmi'
and sale.sale_status = 'is_sold'
and ss.is_eligible_for_gwp = 1
and ss.incentive_rate >= 0
--and sale.policy_sold_on_at::date <= '2023/02/28'
--and sale.policy_sold_on_at::date >= '2023/02/01'
), 
invoice as(
select  aff.agent_code, 
		iaff.agent_code incentive_agent,
		iaff.id incentive_affiliate_id, 
		sale.id sale_id, 
		invd.detail_type, 
		inv.amount, 
		inv.withholding_tax, 
		inv.tax, 
		inv.amount_payable, 
		p.total_paid, 
		p.first_paid, 
		p.last_paid
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.policy_fairdeesaleincentive inc on inc.fairdee_sale_id = sale.id 
join vouch_db.billing_invoicedetail invd on invd.id = inc.invoice_detail_id 
join vouch_db.billing_invoice inv on inv.id = invd.invoice_id
join vouch_db.profiles_affiliate aff on aff.id = sale.affiliate_id
join vouch_db.profiles_affiliate iaff on iaff.id = inc.affiliate_id 
left join payment p on p.invoice_id = inv.id 
where sale.product_type_name = 'vmi'
and sale.sale_status = 'is_sold'
and inv.is_deleted = 0
and inc.reason in ('referred_sale', 'management_fee')
--and sale.policy_sold_on_at::date <= '2023/02/28'
--and sale.policy_sold_on_at::date >= '2023/02/01'
)
select  a.sale_id setting_id, a.a setting_count, 
		b.sale_id inc_id, b.b invoice_count, 
		sale.policy_status, 
		concat('https://www.fairdee.co.th/fairdee-wizard?id=', sale.quotation_id) sale_link
from ( 
		select sale_id, 
				count(*) a
		from sale_setting
		group by 1
) a
join (
			select sale_id, 
					count(*) b
			from invoice 
			group by 1
) b on b.sale_id = a.sale_id and a.a!=b.b
join vouch_db.policy_fairdeesale sale on sale.id = a.sale_id
join vouch_db.utils_fairdeequotation fq on fq.id = sale.quotation_id







Title: MLM referral and management fee VMI
SQL: with payment as(
select  bpi.invoice_id, 
		sum(p.amount_paid) total_paid, 
		min(p.paid_at) first_paid, 
		max(p.paid_at) last_paid
from vouch_db.billing_payment_invoices bpi 
join vouch_db.billing_payment p on p.id = bpi.payment_id 
where p.is_deleted = 0 
group by 1
), 
sale_setting as(
select  aff.agent_code selling_affiliate,
		aff.id selling_affiliate_id, 
		iaff.agent_code incentive_agent,
		iaff.id incentive_affiliate_id, 
		sale.id sale_id, 
		sale.vehicle_number, 
		sale.sale_type,
		sale.payment_status, 
		ss.incentive_rate,
		ss.incentive_rate*sale.premium_without_tax_amt incentive_amount, 
		ss.reason 
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_salelevelsettings ss on ss.sale_id = sale.id 
join vouch_db.profiles_affiliate aff on aff.id = sale.affiliate_id 
join vouch_db.profiles_affiliate iaff on iaff.id = ss.affiliate_id 
where sale.product_type_name = 'vmi'
and sale.sale_status = 'is_sold'
and ss.is_eligible_for_gwp = 1
and ss.incentive_rate >= 0
and sale.policy_sold_on_at::date <= '2023/02/28'
and sale.policy_sold_on_at::date >= '2023/02/01'
), 
invoice as(
select  aff.agent_code, 
		iaff.agent_code incentive_agent,
		iaff.id incentive_affiliate_id, 
		sale.id sale_id, 
		invd.detail_type, 
		inv.amount, 
		inv.withholding_tax, 
		inv.tax, 
		inv.amount_payable, 
		inv.payment_status, 
		inc.reason,
		p.total_paid, 
		p.first_paid, 
		p.last_paid
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.policy_fairdeesaleincentive inc on inc.fairdee_sale_id = sale.id 
join vouch_db.billing_invoicedetail invd on invd.id = inc.invoice_detail_id 
join vouch_db.billing_invoice inv on inv.id = invd.invoice_id
join vouch_db.profiles_affiliate aff on aff.id = sale.affiliate_id
join vouch_db.profiles_affiliate iaff on iaff.id = inc.affiliate_id 
left join payment p on p.invoice_id = inv.id 
where sale.product_type_name = 'vmi'
and sale.sale_status = 'is_sold'
and inv.is_deleted = 0
and inc.reason in ('referred_sale', 'management_fee')
and sale.policy_sold_on_at::date <= '2023/02/28'
and sale.policy_sold_on_at::date >= '2023/02/01'
)
select  ss.sale_id,
        ss.vehicle_number,
        ss.sale_type, 
        ss.selling_affiliate, 
        ss.incentive_agent, 
        ss.incentive_rate, 
        ss.incentive_amount expected_incentive_amount, 
        ss.reason, 
        inv.amount invoice_amount, 
        inv.withholding_tax invoice_wth, 
        inv.tax invoice_tax, 
        inv.amount_payable invoice_amount_payable, 
        inv.payment_status invoice_payment_status, 
        inv.total_paid, 
        inv.first_paid, 
        inv.last_paid
from sale_setting ss 
left join invoice inv on inv.sale_id = ss.sale_id 
                      and inv.incentive_affiliate_id = ss.incentive_affiliate_id 
                      and inv.reason = ss.reason







Title: Managment Fee Sale incentive table and sale_level_settings
SQL: with mf as(
select sale.id, sum(ss.incentive_rate*sale.premium_without_tax_amt) fee
from vouch_db.profiles_salelevelsettings ss 
join th_datawarehouse.fd_sale_all_product_unified_view sale on sale.id = ss.sale_id 
where sale.product_type_name = 'vmi'
and sale.sale_status = 'is_sold'
and reason = 'management_fee'
and ss.is_eligible_for_gwp = true
group by 1
)
select to_char(sale.policy_sold_on_at::date, 'YYYY/MM') sold_on_month,
        sum(managment_fee_amt) managment_fee_amt_saleincentive, 
        sum(mf.fee) managment_fee_sale_level_setting
from th_datawarehouse.fd_sale_all_product_unified_view sale
left join mf on mf.id = sale.id
where sale.product_type_name = 'vmi'
and sale.sale_status = 'is_sold'
and sale.policy_sold_on_at::date >= '2023-01-01'
group by 1
order by 1




Title: All conversations with Tag self_serve
SQL:       select con.name, tags.name tags, 
      concat('https://chat.fairdee.co.th/app/accounts/1/conversations/', conv.id) conversation_link
  from
    chatwoot.conversations conv 
    join chatwoot.taggings t on t.taggable_id = conv.id
    join chatwoot.tags on tags.id = t.tag_id
    join chatwoot.contacts con on con.id = conv.contact_id
    where t.taggable_type = 'Conversation'
    and t.context = 'labels'
    and tags.name = 'selfserve'


Title: Cohorts Analysis [monthly][unified_view]
SQL: with ov as (
select  start_date::date start_date, 
		end_date::date end_date, 
		lower(insurance_partner_name) insurer_code, 
		case when ov_product_name = 'cmi' then 'cmi_solo'::varchar
		else ov_product_name
		end product_name, 
		ov.forcecast_ov_perc, 
		actual_ov_perc
from th_externals.fd_ov_estimation_collected  ov ),
affiliate as(
select affiliate.affiliate_id, 
	   min(to_date(sale.policy_sold_on_at::date, 'YYYY-MM-01')) cohort_month
from th_datawarehouse.dd_affiliate affiliate
join th_datawarehouse.fd_sale_all_product_unified_view sale on sale.affiliate_id = affiliate.affiliate_id 
where sale.policy_sold_on_at::date >= '2019-01-01'
group by 1
),
sale as
(
select  
		affiliate.affiliate_id,
		datediff(mon, '2019-01-01', to_date(sale.policy_sold_on_at::date, 'YYYY-MM-01') ) month_number,
		count(sale.id||'-'||sale.product_type_name) total_sales,
		sum(sale.premium_without_tax_amt) gwp, 
		((sum(sale.fairdee_commission_amt) + coalesce(sum(sale.premium_without_tax_amt*coalesce(ov.actual_ov_perc, ov.forcecast_ov_perc)), 0))
		- sum(sale.expected_affiliate_commission_amt)) revenue,
		sum(sale.fairdee_commission_amt) + coalesce(sum(sale.premium_without_tax_amt*coalesce(ov.actual_ov_perc, ov.forcecast_ov_perc)), 0)- (
		sum(sale.expected_affiliate_commission_amt) + 
		sum(sale.incentives_amt) + 
		sum(sale.referral_bonus_amt) + 
		sum(sale.managment_fee_amt)
		) revenue_with_marketing
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join affiliate on affiliate.affiliate_id = sale.affiliate_id
left join ov on (ov.insurer_code = sale.insurer_code) and 
		        (ov.product_name = sale.product_type_name) and 
		        (sale.policy_sold_on_at::date<= ov.end_date and sale.policy_sold_on_at::date >= ov.start_date)
where sale.sale_status = 'is_sold'
group by 1, 2
order by 1, 2
)
select  affiliate.cohort_month, 
        month_number,
        count(distinct sale.affiliate_id) selling_agents, 
        sum(total_sales) total_sales, 
        sum(gwp) gwp, 
        sum(revenue) revenue, 
        sum(revenue_with_marketing) revenue_with_marketing
from affiliate 
join sale on sale.affiliate_id = affiliate.affiliate_id
group by 1, 2
order by 1, 2 




Title: All agents in branch
SQL: with recursive agents(agent_code, upline_parent) as
(
select aff.agent_code agent_code, 
		paff.agent_code upline_code
from vouch_db.profiles_affiliate aff 
join vouch_db.profiles_mlmnode mlm on mlm.affiliate_id = aff.id
left join vouch_db.profiles_mlmnode pmlm on pmlm.id = mlm.parent_id 
left join vouch_db.profiles_affiliate paff on paff.id = pmlm.affiliate_id 
where aff.id = 16732	

union all 
select  aff.agent_code agent_code,
		paff.agent_code upline_parent
from vouch_db.profiles_affiliate aff 
join vouch_db.profiles_mlmnode mlm on mlm.affiliate_id  = aff.id 
join vouch_db.profiles_mlmnode pmlm on pmlm.id = mlm.parent_id 
join vouch_db.profiles_affiliate paff on paff.id = pmlm.affiliate_id
join agents a on a.agent_code = paff.agent_code 
)
select * from agents 


Title: Installment Policies with
SQL: select distinct insurance_class
from th_datawarehouse.fd_sale_all_product_unified_view
bail_bondnumber_of_branchesศษ




Title: Chatwoot Categorisation with the help of GPT
SQL: SELECT
  *,
  CONCAT(
    'https://chat.fairdee.co.th/app/accounts/1/inbox/1/conversations/',
    conversation_id
  ) AS chatwoot
FROM
  chatwoot_conversation_analysis;


Title: Payment create by breakdown
SQL: WITH payment_summary AS (
  SELECT
    t.detail_type,
    user_type,
    COUNT(*) AS user_count
  FROM
    (
      SELECT distinct 
        pay.id AS payment_id,
        pay.created_by_id,
        invd.detail_type,
        CASE
          WHEN pay.created_by_id = 128884 THEN 'ai'
          ELSE 'manual'
        END AS user_type,
        rank() over(PARTITION by invd.invoice_id order by invd.detail_type asc) as rnk
      FROM
        billing_payment AS pay
        JOIN billing_payment_invoices AS bpi ON bpi.payment_id = pay.id
        JOIN billing_invoicedetail AS invd ON invd.invoice_id = bpi.invoice_id
        JOIN billing_paymentfile AS pf ON pf.payment_id = pay.id
        JOIN utils_file AS file ON file.id = pf.file_id
      WHERE
        DATE(CONVERT_TZ(pay.created_at, '+00:00', '+07:00')) > '2023-04-21'
        and DATE(CONVERT_TZ(file.created_at, '+00:00', '+07:00')) > '2023-04-21'
            and detail_type not in ('compulsory_insurance', "qoala_promotion")
    ) AS t where rnk = 1
  GROUP BY
    t.detail_type, user_type
)

SELECT
  detail_type,
  user_type,
  user_count,
  CONCAT(ROUND(
    (user_count * 100.0) / SUM(user_count) OVER (PARTITION BY detail_type),
    2
  ), '%') AS percentage_of_total,
  SUM(user_count) OVER (PARTITION BY detail_type) AS total_count
FROM
  payment_summary
ORDER BY
  detail_type, user_type;



Title: Successful Extractions from AI
SQL: select uploader as "Uploaded by", count(uploader) as successful from (select
  pay.id, min(r.name) as uploader
from
  billing_payment as pay
  join billing_paymentfile as pf on pf.payment_id = pay.id
  join utils_file as file on file.id = pf.file_id
  join profiles_user as user on user.id = file.created_by_id
  join profiles_userrole as role on role.user_id = user.id
  join profiles_role as r on r.id = role.role_id
where
  pay.created_by_id = 128884
group by pay.id) as t 
group by uploader;




Title: Instalment Invoices Bug
SQL: SELECT
  `policy_fairdeesale`.`quotation_id`,
  `policy_fairdeesale`.`created_at`,
  `policy_fairdeesale`.`created_by_id`,
  `utils_fairdeequotationquery`.`is_lead_generated`,
  (
    SELECT
      COUNT(U0.`id`) AS `c`
    FROM
      `billing_invoice` U0
      INNER JOIN `policy_fairdeesaleinvoice` U1 ON (U0.`id` = U1.`invoice_id`)
      INNER JOIN `billing_invoicedetail` U3 ON (U0.`id` = U3.`invoice_id`)
    WHERE
      (
        NOT U0.`is_deleted`
        AND U1.`fairdee_sale_id` = (`policy_fairdeesale`.`id`)
        AND U3.`detail_type` = "voluntary_insurance"
        AND U0.`payee` = "fairdee"
        AND U0.`payer` = "customer"
      )
    GROUP BY
      U1.`fairdee_sale_id`
    ORDER BY
      NULL
  ) AS `instalment_invoice_formed`,
  COUNT(`billing_instalmentbreakup`.`id`) AS `instalment_invoices`
FROM
  `policy_fairdeesale`
  INNER JOIN `utils_fairdeequotation` ON (
    `policy_fairdeesale`.`quotation_id` = `utils_fairdeequotation`.`id`
  )
  INNER JOIN `utils_fairdeequotationquery` ON (
    `utils_fairdeequotation`.`quotation_query_id` = `utils_fairdeequotationquery`.`id`
  )
  INNER JOIN `billing_instalmenttype` ON (
    `utils_fairdeequotationquery`.`instalment_type_id` = `billing_instalmenttype`.`id`
  )
  LEFT OUTER JOIN `billing_instalmentbreakup` ON (
    `billing_instalmenttype`.`id` = `billing_instalmentbreakup`.`instalment_type_id`
  )
WHERE
  (
    `utils_fairdeequotationquery`.`instalment_type_id` IS NOT NULL
    AND `policy_fairdeesale`.`sale_type` = "instalment"
    
  )
GROUP BY
  `policy_fairdeesale`.`id`
HAVING
  (
    SELECT
      COUNT(U0.`id`) AS `c`
    FROM
      `billing_invoice` U0
      INNER JOIN `policy_fairdeesaleinvoice` U1 ON (U0.`id` = U1.`invoice_id`)
      INNER JOIN `billing_invoicedetail` U3 ON (U0.`id` = U3.`invoice_id`)
    WHERE
      (
        NOT U0.`is_deleted`
        AND U1.`fairdee_sale_id` = (`policy_fairdeesale`.`id`)
        AND U3.`detail_type` = "voluntary_insurance"
        AND U0.`payee` = "fairdee"
        AND U0.`payer` = "customer"
      )
    GROUP BY
      U1.`fairdee_sale_id`
    ORDER BY
      NULL
  ) != (COUNT(`billing_instalmentbreakup`.`id`))
ORDER BY
  NULL


Title: Chassis Number 2
SQL: -- SELECT 
-- sale.chassis_number, 
-- sale.policy_status,
-- serve.sale_link
-- FROM th_datawarehouse.fd_sale_unified_view sale
-- Join th_datawarehouse.fd_self_serve serve on sale.affiliate_id = serve.affiliate_id

SELECT 
    sale.chassis_number, 
    sale.policy_status,
    MAX(serve.sale_link) as sale_link
FROM 
    th_datawarehouse.fd_sale_unified_view sale
JOIN 
    th_datawarehouse.fd_self_serve serve ON sale.affiliate_id = serve.affiliate_id
GROUP BY
    sale.chassis_number,
    sale.policy_status
ORDER BY
    sale_link ;



Title: IG agent codes
SQL: select * from
((select "Select All" as agent_code)
union (select agent_code from profiles_affiliate
where account_type = "inspection_garage")) as t;




Title: Chassis Number
SQL: -- SELECT  chassis_number 
-- FROM th_datawarehouse.fd_sale_unified_view 
-- GROUP BY 1 
-- ORDER BY chassis_number DESC

SELECT LENGTH(chassis_number) AS char_length, MIN(chassis_number) AS sample_data
FROM th_datawarehouse.fd_sale_unified_view
GROUP BY LENGTH(chassis_number)
ORDER BY char_length DESC;


-- SELECT MIN(LENGTH(chassis_number)) AS min_chars, MAX(LENGTH(chassis_number)) AS max_chars
-- FROM th_datawarehouse.fd_sale_unified_view




Title: All Endorsement Types
SQL: Select distinct type_of_endorsement
from vouch_db.policy_fairdeepolicyendorsement endors
where type_of_endorsement is not null


Title: OTP SMS Status
SQL: SELECT
  date(CONVERT_TIMEZONE('Asia/Bangkok', created_at)) AS sent_time_th,
  COUNT(id) AS total,
  status,
  vendor
FROM
  vouch_db.communicator_usersms
WHERE
  sms_type = 'login_otp'
  AND CONVERT_TIMEZONE('Asia/Bangkok', created_at) > dateadd(day, -30, CONVERT_TIMEZONE('Asia/Bangkok', GETDATE()))
GROUP BY
  1,
  3,
  4
ORDER BY
  sent_time_th DESC;



Title: Agents Using Combined Payment
SQL: select  distinct to_char(sale.sold_on::date, 'YYYY-MM') sold_on_month,
        sale.sold_on,
        sale.id,
        aff.agent_code,
        affiliate.account_type,
        users.fullname, 
        concat('https://www.fairdee.co.th/fairdee-wizard?id=', fq.id) sale_link, 
        min(p.paid_at) first_payment, 
        max(p.paid_at) last_payment
from vouch_db.policy_fairdeesale sale
join vouch_db.utils_fairdeequotation fq on fq.id = sale.quotation_id
join vouch_db.policy_fairdeesaleinvoice fsi on fsi.fairdee_sale_id = sale.id
join vouch_db.billing_invoice inv on inv.id = fsi.invoice_id
join vouch_db.billing_payment_invoices bpi on bpi.invoice_id = inv.id
join vouch_db.billing_payment p on p.id = bpi.payment_id
join vouch_db.profiles_affiliate aff on aff.id = sale.affiliate_id
join th_datawarehouse.dd_affiliate affiliate on affiliate.affiliate_id = aff.id
join vouch_db.profiles_user users on users.id = aff.user_id
where p.vendor_name = 'billing.Payment'
and sale.sale_type = 'cbc_to_fairdee'
and inv.payee = 'fairdee'
and inv.payer = 'customer'
group by 1, 2, 3, 4, 5, 6, 7


Title: Agent with tags (account type Direct agents)
SQL: select affiliate.agent_code, 
        affiliate.account_type, affiliate.currently_assigned_to_bm, users.fullname
from th_datawarehouse.dd_affiliate affiliate
join vouch_db.profiles_user users on users.id = affiliate.user_id
join vouch_db.profiles_affiliate aff on aff.id = affiliate.affiliate_id
where affiliate.account_type in ('at_broker', 'at_agentoffice', 'at_offlineagent')
and aff.account_type is null 


Title: Agent with tags (account type IG)
SQL: select affiliate.agent_code, 
        affiliate.account_type, affiliate.currently_assigned_to_bm, users.fullname
from th_datawarehouse.dd_affiliate affiliate
join vouch_db.profiles_user users on users.id = affiliate.user_id
join vouch_db.profiles_affiliate aff on aff.id = affiliate.affiliate_id
where affiliate.account_type in ('at_broker', 'at_agentoffice', 'at_offlineagent')
and aff.account_type = 'inspection_garage'


Title: Only Direct Agents
SQL: select affiliate.agent_code, users.fullname
from th_datawarehouse.dd_affiliate affiliate
join vouch_db.profiles_user users on users.id = affiliate.user_id
where affiliate.account_type = 'direct_agent'


Title: Quotes Per Type of Manual Quote
SQL: with affiliate as(
select  affiliate_id, 
        case 
            when account_type = ' Work Shop 2 Ubonratchathani' then 'mlm_agent'
            else account_type 
        end account_type 
from th_datawarehouse.dd_affiliate affiliate
)
select  distinct to_char(metric.quote_created_at::date, 'YYYY-MM') quote_month,
        affiliate.account_type,
        metric.quote_created_by,
        -- metric.type_of_quote,
        metric.type_of_manual_quote, 
        count(metric.quotation_id) over(partition by to_char(metric.quote_created_at::date, 'YYYY-MM'), 
                                                     affiliate.account_type,
                                                     metric.quote_created_by, 
                                                     metric.type_of_manual_quote) total_quotes, 
        count(case 
                    when sale.sale_status = 'is_sold' then sale.id
              end) over(partition by to_char(metric.quote_created_at::date, 'YYYY-MM'),
                                     affiliate.account_type,
                                     metric.quote_created_by, 
                                     metric.type_of_manual_quote) sold_quotes
from th_datawarehouse.fd_self_serve metric 
join affiliate on affiliate.affiliate_id = metric.affiliate_id
join th_datawarehouse.fd_sale_all_product_unified_view sale on sale.id = metric.sale_id and sale.product_type_name = 'vmi'
where metric.quote_created_at::date >= '{{dt.start}}'
and metric.quote_created_at::date <= '{{dt.end}}'
and metric.type_of_quote = 'manual_quote'
order by 1, 2, 3




Title: Quotes Per Account Type [created_by]
SQL: with affiliate as(
select  affiliate_id, 
        case 
            when account_type = ' Work Shop 2 Ubonratchathani' then 'mlm_agent'
            else account_type 
        end account_type 
from th_datawarehouse.dd_affiliate affiliate
)
select  distinct to_char(metric.quote_created_at::date, 'YYYY-MM') quote_month,
        affiliate.account_type,
        metric.quote_created_by, 
        count(metric.quotation_id) over(partition by to_char(metric.quote_created_at::date, 'YYYY-MM'), 
                                                     affiliate.account_type,
                                                     metric.quote_created_by) total_quotes, 
        count(case 
                    when sale.sale_status = 'is_sold' then sale.id
              end) over(partition by to_char(metric.quote_created_at::date, 'YYYY-MM'),
                                     affiliate.account_type,
                                     metric.quote_created_by) sold_quotes
from th_datawarehouse.fd_self_serve metric 
join affiliate on affiliate.affiliate_id = metric.affiliate_id
join th_datawarehouse.fd_sale_all_product_unified_view sale on sale.id = metric.sale_id and sale.product_type_name = 'vmi'
where metric.quote_created_at::date >= '{{dt.start}}'
and metric.quote_created_at::date <= '{{dt.end}}'
order by 1, 2, 3




Title: Level Upgrade requests
SQL: select
  lr.id,
  lr.created_at as 'Request created At',
  sale_paid_after,
  sale_paid_before,
  level_name,
  aff.agent_code as 'Agent Code',
  usr.email,
  usr.fullname as 'Request user name'
from
  profiles_levelupgraderequest lr
  join profiles_affiliate aff on aff.id = lr.affiliate_id
  join profiles_user usr on usr.id = lr.created_by_id
  order by id desc;


Title: OIC Verified Direct Agents Cumulative Growth
SQL: SELECT 
  dates::DATE,
  cnt,
  SUM(cnt) OVER (ORDER BY dates ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS Total_agents
FROM (
  SELECT 
    to_date(affiliate.created_at::date, 'YYYY-MM-01') AS dates,
    count(DISTINCT affiliate.affiliate_id) AS cnt
  FROM th_datawarehouse.dd_affiliate affiliate
  WHERE affiliate.has_broker_license = 1
    AND affiliate.is_oic_data_verified = 1
     AND affiliate.doc_verified_date is not NULL
    AND affiliate.account_type = 'direct_agent'
  GROUP BY 1
) AS affiliates
ORDER BY dates;



Title: bm_misc
SQL: select distinct affiliate_id, bm_name
from bm_list
where bm_name = 'bm_yos'
order by affiliate_id


Title: OCR Error Type Count
SQL: select  distinct date_format(created_at, '%Y-%M-01') month, 
        json_extract(vendor_response, '$.error_msg') error, 
        count(id)  ocr
from utils_ocrdata
where is_deleted = 0
and json_extract(vendor_response, '$.error_msg') is not null 
group by 1, 2


Title: OCR Usage by Document
SQL: select  date_format(created_at, '%Y-%M-01') month,
        file_type, 
        count(id) ocr
from utils_ocrdata
where is_deleted = 0
group by 1, 2


Title: OCR Aggregate
SQL: select  distinct date_format(created_at, '%Y-%M-01') month, 
        count(id) over(partition by date_format(created_at, '%Y-%M-01')) total_ocr, 
        sum(case when json_extract(vendor_response, '$.error_msg') is not null then 1 
                 else 0 end) over(partition by date_format(created_at, '%Y-%M-01')) failed_ocr, 
        sum(case when json_extract(vendor_response, '$.error_msg') is null then 1 
                 else 0 end) over(partition by date_format(created_at, '%Y-%M-01')) successful_ocr
from utils_ocrdata
where is_deleted = 0


Title: Account type and sale info basic
SQL: --account_type:direct, MLM, IG(subagent)
vouch_db.utils_compulsoryinsuranceform --sold only via credit, credit selling account -> Ig (subagent)(postpaid), 
--MLM(prepaid)
vouch_db.policy_fairdeesale -- sold via cbc_to_fairdee+cbc_insurer(bank-transfer, QR), 
--instalment(bank-transfer, QR), credit, vmi can be sold by all account types 
--at_agentoffice, at_broker, at_agentoffline, --these tag name are in vouch_db.profiles_tag
--bm_name, {bm_YOS]

--fetching bm info
select aff.agent_code, aff.account_type, tags.name
from vouch_db.profiles_affiliate aff 
join vouch_db.profiles_affiliatetag atag on atag.affiliate_id = aff.id
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
order by 1


Title: VMI - IG monthly performance
SQL: with affiliates as (
    select affiliate_id, 
        case 
            when account_type in ('at_inspectiongarage', 'inspection_garage') then 'inspection_garage'
            when account_type in (' Work Shop 2 Ubonratchathani', 'at_mlm', 'mlm_agent') then 'mlm_agent'
            when account_type is null then 'direct_agent'
            else account_type 
        end as account_type_transformed
    from th_datawarehouse.dd_affiliate 
)
select 
    to_date(sale.policy_sold_on_at::date, 'YYYY/MM') sale_month, 
    count(distinct sale.affiliate_id) as agents,
    sum(premium_without_tax_amt) as total_premium,
    count(distinct sale.id) as total_sales,
    sum(premium_without_tax_amt) / count(distinct sale.id) as "Average order value",
    count(distinct sale.id) / count(distinct affiliates.affiliate_id) as "Order Freq"
from 
    th_datawarehouse.fd_sale_unified_view sale
    join affiliates on sale.affiliate_id = affiliates.affiliate_id
where 
        account_type_transformed = 'inspection_garage' 
    and product_type_name = 'vmi'
    and sale.policy_sold_on_at >= '2019-08-01'::date
    and sale.sale_status = 'is_sold'
group by 
    1



Title: Premium and NOP- per month
SQL: select 
to_date(sale.policy_sold_on_at::date, 'YYYY/MM') sale_month,count(distinct id) policy_sold_count,
  sum(premium_without_tax_amt)premium_without_tax,
  sum(premium_after_tax_amt)premium_after_tax,
  sum(coalesce(incentives_amt, 0) + coalesce(referral_bonus_amt, 0)) agent_promotions,
  sum(coalesce(fairdee_commission_amt, 0)) commissions_earned,
  sum(coalesce(expected_affiliate_commission_amt, 0)) affiliate_commission
from th_datawarehouse.fd_sale_all_product_unified_view sale
  join th_datawarehouse.dd_affiliate affiliate on sale.affiliate_id = affiliate.affiliate_id
 where sale.sale_status = 'is_sold'
  group by 1
  order by 1 desc


Title: Cohorts Analysis Yearly
SQL: with eligible_users as (
select distinct users.id 
from vouch_db.profiles_user users
join vouch_db.profiles_userrole urole on urole.user_id = users.id
join vouch_db.profiles_role role on role.id = urole.role_id
where users.email not like '%fairdee.co.th%'
or role.name != 'admin'
), 
tags as(
select distinct atag.affiliate_id, tags.name
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
 where tags.name like '%at_%'
 and tags.name != ' Work Shop 2 Ubonratchathani'
 and tags.name not in ('at_inspectiongarage', 'at_mlm')
), 
ov as (
select  start_date::date start_date, 
		end_date::date end_date, 
		lower(insurance_partner_name) insurer_code, 
		case when ov_product_name = 'cmi' then 'cmi_solo'::varchar
		else ov_product_name
		end product_name, 
		ov.forcecast_ov_perc, 
		actual_ov_perc
from th_externals.fd_ov_estimation_collected  ov ),
affiliate as(
select affiliate.id, 
	   min(to_date(sale.policy_sold_on_at::date, 'YYYY-01-01')) cohort_year
from vouch_db.profiles_affiliate affiliate 
join th_datawarehouse.fd_sale_all_product_unified_view sale on sale.affiliate_id = affiliate.id 
join eligible_users users on users.id = affiliate.user_id
where sale.policy_sold_on_at::date >= '2019-01-01'
and affiliate.account_type = 'mlm_agent'
group by 1
),
sale as
(
select  
		affiliate.id,
		datediff(y, '2019-01-01', to_date(sale.policy_sold_on_at::date, 'YYYY-01-01') ) year_number,
		count(sale.id||'-'||sale.product_type_name) total_sales,
		sum(sale.premium_without_tax_amt) gwp, 
		((sum(sale.fairdee_commission_amt) + coalesce(sum(sale.premium_without_tax_amt*coalesce(ov.actual_ov_perc, ov.forcecast_ov_perc)), 0))
		- sum(sale.expected_affiliate_commission_amt)) revenue,
		sum(sale.fairdee_commission_amt) + coalesce(sum(sale.premium_without_tax_amt*coalesce(ov.actual_ov_perc, ov.forcecast_ov_perc)), 0)- (
		sum(sale.expected_affiliate_commission_amt) + 
		sum(sale.incentives_amt) + 
		sum(sale.referral_bonus_amt) + 
		sum(sale.managment_fee_amt)
		) revenue_with_marketing
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_affiliate aff on aff.id = sale.affiliate_id
join affiliate on affiliate.id = aff.id
left join ov on (ov.insurer_code = sale.insurer_code) and 
		        (ov.product_name = sale.product_type_name) and 
		        (sale.policy_sold_on_at::date<= ov.end_date and sale.policy_sold_on_at::date >= ov.start_date)
where sale.sale_status = 'is_sold'
group by 1, 2
order by 1, 2
)
select  affiliate.cohort_year, 
        year_number,
        count(distinct sale.id) selling_agents, 
        sum(total_sales) total_sales, 
        sum(gwp)/31.88 gwp, 
        sum(revenue)/31.88 revenue, 
        sum(revenue_with_marketing)/31.88 revenue_with_marketing
from affiliate 
join sale on sale.id = affiliate.id
group by 1, 2
order by 1, 2 




Title: Cohorts Analysis [monthly]
SQL: with eligible_users as (
select distinct users.id 
from vouch_db.profiles_user users
join vouch_db.profiles_userrole urole on urole.user_id = users.id
join vouch_db.profiles_role role on role.id = urole.role_id
where users.email not like '%fairdee.co.th%'
or role.name != 'admin'
), 
tags as(
select distinct atag.affiliate_id, tags.name
from vouch_db.profiles_affiliatetag atag 
join vouch_db.profiles_tag tags on tags.id = atag.tag_id
 where tags.name like '%at_%'
 and tags.name != ' Work Shop 2 Ubonratchathani'
 and tags.name not in ('at_inspectiongarage', 'at_mlm')
), 
ov as (
select  start_date::date start_date, 
		end_date::date end_date, 
		lower(insurance_partner_name) insurer_code, 
		case when ov_product_name = 'cmi' then 'cmi_solo'::varchar
		else ov_product_name
		end product_name, 
		ov.forcecast_ov_perc, 
		actual_ov_perc
from th_externals.fd_ov_estimation_collected  ov ),
affiliate as(
select affiliate.id, 
	   min(to_date(sale.policy_sold_on_at::date, 'YYYY-MM-01')) cohort_month
from vouch_db.profiles_affiliate affiliate 
join th_datawarehouse.fd_sale_all_product_unified_view sale on sale.affiliate_id = affiliate.id 
join eligible_users users on users.id = affiliate.user_id
where sale.policy_sold_on_at::date >= '2019-01-01'
group by 1
),
sale as
(
select  
		affiliate.id,
		datediff(mon, '2019-01-01', to_date(sale.policy_sold_on_at::date, 'YYYY-MM-01') ) month_number,
		count(sale.id||'-'||sale.product_type_name) total_sales,
		sum(sale.premium_without_tax_amt) gwp, 
		((sum(sale.fairdee_commission_amt) + coalesce(sum(sale.premium_without_tax_amt*coalesce(ov.actual_ov_perc, ov.forcecast_ov_perc)), 0))
		- sum(sale.expected_affiliate_commission_amt)) revenue,
		sum(sale.fairdee_commission_amt) + coalesce(sum(sale.premium_without_tax_amt*coalesce(ov.actual_ov_perc, ov.forcecast_ov_perc)), 0)- (
		sum(sale.expected_affiliate_commission_amt) + 
		sum(sale.incentives_amt) + 
		sum(sale.referral_bonus_amt) + 
		sum(sale.managment_fee_amt)
		) revenue_with_marketing
from th_datawarehouse.fd_sale_all_product_unified_view sale 
join vouch_db.profiles_affiliate aff on aff.id = sale.affiliate_id
join affiliate on affiliate.id = aff.id
left join ov on (ov.insurer_code = sale.insurer_code) and 
		        (ov.product_name = sale.product_type_name) and 
		        (sale.policy_sold_on_at::date<= ov.end_date and sale.policy_sold_on_at::date >= ov.start_date)
where sale.sale_status = 'is_sold'
group by 1, 2
order by 1, 2
)
select  affiliate.cohort_month, 
        month_number,
        count(distinct sale.id) selling_agents, 
        sum(total_sales) total_sales, 
        sum(gwp) gwp, 
        sum(revenue) revenue, 
        sum(revenue_with_marketing) revenue_with_marketing
from affiliate 
join sale on sale.id = affiliate.id
group by 1, 2
order by 1, 2 




Title: Affiliates Address
SQL: SELECT        @fullname := affiliate.oic_data->>'$.fullname', @title := REGEXP_SUBSTR(@fullname, '(ว่าที่ร้อยตรีหญิง|ว่าที่ร้อยตรี|นาวาโท|นางสาว|นาย|นาง)') AS "Agent Title", @firstname := REPLACE(SUBSTRING_INDEX(@fullname, ' ', 1), @title, '') AS "Agent First Name", TRIM(REPLACE(REPLACE(@fullname, @title, ''), @firstname, '')) AS "Agent Last Name",
affiliate.agent_code, address.first_line, address.subdistrict, address.district, address.province, address.postal_code, affiliate.national_id, affiliate.has_broker_license
    FROM profiles_affiliate affiliate
    JOIN profiles_user user on affiliate.user_id = user.id
    JOIN utils_address address on 
    -- coalesce(affiliate.address_id,affiliate.address_nid_id) 
    affiliate.address_id
    = address.id
    WHERE user.is_test = false 
    and affiliate.national_id is not null


Title: all Luxury makemodels
SQL: select
  masterdata_make.id as MakeID,
  masterdata_makemodel.id as MakeModelID,
  masterdata_make.name as ModelName,
  masterdata_makemodel.name as MakeModelName,
  masterdata_makemodel.is_luxury,
  masterdata_make.value,
  masterdata_make.has_2W,
  masterdata_make.has_4W
from
  masterdata_makemodel
  inner join masterdata_make on masterdata_makemodel.make_id = masterdata_make.id
where
  is_luxury = 1;


Title: Premium and NOP- per month
SQL: /*with motor as
(
SELECT 
      "motor",
      ue.sold_on,
      CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
      sum(premium_without_tax) AS total_premiums,
      sum(insurer_incentive_received) AS incentives_received,
      sum(insurer_commission_received) AS commissions_received,
      count(distinct sale.id) Policies_sold
FROM utils_uniteconomics ue
JOIN policy_fairdeesale_unit_economics fsue ON fsue.uniteconomics_id = ue.id
JOIN policy_fairdeesale sale ON sale.id = fsue.fairdeesale_id
JOIN utils_fairdeequotation quotation ON quotation.id = sale.quotation_id
JOIN profiles_affiliate affiliate ON affiliate.id = sale.affiliate_id
JOIN profiles_user user ON affiliate.user_id = user.id
where
    sale.is_cancelled = FALSE
    AND sale.policy_status NOT LIKE '%rejected'
    and (sale.payment_status IN ("payment_verified",
                              "commission_transferred","credit_approved")
      OR sale.policy_status IN ("policy_sent_to_user",
                                 "policy_delivered_to_user","policy_uploaded") 
      OR EXISTS
        (SELECT 1
        FROM billing_invoice invoice
        JOIN policy_fairdeesaleinvoice sale_invoice_map ON invoice.id = sale_invoice_map.invoice_id
        WHERE sale_invoice_map.fairdee_sale_id = sale.id
            AND invoice.payee = 'fairdee'
            AND invoice.payer = 'customer'
            AND invoice.payment_status != 'unpaid'))
    AND user.is_test = FALSE
    and ue.is_valid=True
    and (affiliate.account_type is null)
     and ue.sold_on > STR_TO_DATE('2019-08-01','%Y-%m-%d')
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
ORDER BY (ue.sold_on) 
),
bm as
(
SELECT 
      "bm",
      ue.sold_on,
      CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
      sum(premium_without_tax) AS total_premiums,
      sum(insurer_incentive_received) AS incentives_received,
      sum(insurer_commission_received) AS commissions_received,
      count(distinct sale.id) Policies_sold
FROM utils_uniteconomics ue
JOIN policy_fairdeesale_unit_economics fsue ON fsue.uniteconomics_id = ue.id
JOIN policy_fairdeesale sale ON sale.id = fsue.fairdeesale_id
JOIN utils_fairdeequotation quotation ON quotation.id = sale.quotation_id
JOIN profiles_affiliate affiliate ON affiliate.id = sale.affiliate_id
JOIN profiles_user user ON affiliate.user_id = user.id
where
    sale.is_cancelled = FALSE
    AND sale.policy_status NOT LIKE '%rejected'
    and (sale.payment_status IN ("payment_verified",
                              "commission_transferred","credit_approved")
      OR sale.policy_status IN ("policy_sent_to_user",
                                 "policy_delivered_to_user","policy_uploaded") 
      OR EXISTS
        (SELECT 1
        FROM billing_invoice invoice
        JOIN policy_fairdeesaleinvoice sale_invoice_map ON invoice.id = sale_invoice_map.invoice_id
        WHERE sale_invoice_map.fairdee_sale_id = sale.id
            AND invoice.payee = 'fairdee'
            AND invoice.payer = 'customer'
            AND invoice.payment_status != 'unpaid'))
    AND user.is_test = FALSE
    and ue.is_valid=True
    and (affiliate.account_type = 'business_manager')
     and ue.sold_on > STR_TO_DATE('2019-08-01','%Y-%m-%d')
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
ORDER BY (ue.sold_on) 
),
motor_ig as
(
SELECT 
      "motor_ig",
      ue.sold_on,
      CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
      sum(premium_without_tax) AS total_premiums,
      sum(insurer_incentive_received) AS incentives_received,
      sum(insurer_commission_received) AS commissions_received,
      count(distinct sale.id) Policies_sold
FROM utils_uniteconomics ue
JOIN policy_fairdeesale_unit_economics fsue ON fsue.uniteconomics_id = ue.id
JOIN policy_fairdeesale sale ON sale.id = fsue.fairdeesale_id
JOIN utils_fairdeequotation quotation ON quotation.id = sale.quotation_id
join masterdata_pricelist pl on quotation.price_list_id = pl.id
join masterdata_insurer insurer on insurer.id = pl.insurer_id
JOIN profiles_affiliate affiliate ON affiliate.id = sale.affiliate_id
JOIN profiles_user user ON affiliate.user_id = user.id
where
    sale.is_cancelled = FALSE
    -- and sale.sale_type = 'credit'
    AND sale.policy_status NOT LIKE '%rejected'
    and (sale.payment_status IN ("payment_verified",
                              "commission_transferred","credit_approved")
      OR sale.policy_status IN ("policy_sent_to_user",
                                 "policy_delivered_to_user","policy_uploaded") 
      OR EXISTS
        (SELECT 1
        FROM billing_invoice invoice
        JOIN policy_fairdeesaleinvoice sale_invoice_map ON invoice.id = sale_invoice_map.invoice_id
        WHERE sale_invoice_map.fairdee_sale_id = sale.id
            AND invoice.payee = 'fairdee'
            AND invoice.payer = 'customer'
            AND invoice.payment_status != 'unpaid')
            )
    and (affiliate.account_type in ('subagent', 'inspection_garage'))
    AND user.is_test = FALSE
    and ue.is_valid=True
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
ORDER BY (ue.sold_on) 
),
motor_mlm as
(

SELECT 
      "motor_mlm",
      ue.sold_on,
      CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
      sum(premium_without_tax) AS total_premiums,
      sum(insurer_incentive_received) AS incentives_received,
      sum(insurer_commission_received) AS commissions_received,
      count(distinct sale.id) Policies_sold
FROM utils_uniteconomics ue
JOIN policy_fairdeesale_unit_economics fsue ON fsue.uniteconomics_id = ue.id
JOIN policy_fairdeesale sale ON sale.id = fsue.fairdeesale_id
JOIN utils_fairdeequotation quotation ON quotation.id = sale.quotation_id
JOIN profiles_affiliate affiliate ON affiliate.id = sale.affiliate_id
JOIN profiles_user user ON affiliate.user_id = user.id
where
    sale.is_cancelled = FALSE
    AND sale.policy_status NOT LIKE '%rejected'
    and (sale.payment_status IN ("payment_verified",
                              "commission_transferred","credit_approved")
      OR sale.policy_status IN ("policy_sent_to_user",
                                 "policy_delivered_to_user","policy_uploaded") 
      OR EXISTS
        (SELECT 1
        FROM billing_invoice invoice
        JOIN policy_fairdeesaleinvoice sale_invoice_map ON invoice.id = sale_invoice_map.invoice_id
        WHERE sale_invoice_map.fairdee_sale_id = sale.id
            AND invoice.payee = 'fairdee'
            AND invoice.payer = 'customer'
            AND invoice.payment_status != 'unpaid'))
    AND user.is_test = FALSE
    and ue.is_valid=True
    and (affiliate.account_type = 'mlm_agent')
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
ORDER BY (ue.sold_on) 
),
covid as(
select
    "covid",
     CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
    sum(premium_without_tax) AS total_premiums,
    sum(insurer_incentive_received) AS incentives_received,
    sum(insurer_commission_received) AS commissions_received,
    count(distinct cf.id) Policies_sold
FROM utils_uniteconomics ue
join utils_covidform cf ON cf.unit_economics_id = ue.id
JOIN billing_invoicedetail idco on idco.id = cf.invoice_detail_id
JOIN billing_invoice invco on invco.id = idco.invoice_id
JOIN profiles_affiliate cfaffiliate ON cfaffiliate.id = cf.affiliate_id
JOIN profiles_user cfuser ON cfaffiliate.user_id = cfuser.id
where invco.payment_status in ("fully_paid", "overpaid")
  AND cf.policy_status != 'docs_rejected' 
  and cf.is_cancelled=False
  AND cfuser.is_test = FALSE
  and ue.is_valid=True
  GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
) 
,
dengue as(
select  
    "dengue",
     CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
    sum(premium_without_tax) AS total_premiums,
    sum(insurer_incentive_received) AS incentives_received,
    sum(insurer_commission_received) AS commissions_received,
    count(distinct df.id) Policies_sold
FROM utils_uniteconomics ue
join utils_dengueform df ON df.unit_economics_id = ue.id
JOIN billing_invoicedetail id on id.id = df.invoice_detail_id
JOIN billing_invoice inv on inv.id = id.invoice_id
JOIN profiles_affiliate dfaffiliate ON dfaffiliate.id = df.affiliate_id
JOIN profiles_user dfuser ON dfaffiliate.user_id = dfuser.id
where inv.payment_status in ("fully_paid", "overpaid")
  AND df.policy_status != 'docs_rejected' 
  and df.is_cancelled=False
  AND dfuser.is_test = FALSE
  and ue.is_valid=True
 GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
) 
,
pa as(
select  
    "pa",
     CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
    sum(premium_without_tax) AS total_premiums,
    sum(insurer_incentive_received) AS incentives_received,
    sum(insurer_commission_received) AS commissions_received,
    count(distinct pa.id) Policies_sold
FROM utils_uniteconomics ue
join utils_paform pa ON pa.unit_economics_id = ue.id
JOIN billing_invoicedetail id on id.id = pa.invoice_detail_id
JOIN billing_invoice inv on inv.id = id.invoice_id
JOIN profiles_affiliate paaffiliate ON paaffiliate.id = pa.affiliate_id
JOIN profiles_user pauser ON paaffiliate.user_id = pauser.id
where inv.payment_status in ("fully_paid", "overpaid")
  AND pa.policy_status != 'docs_rejected' 
  and pa.is_cancelled=False
  AND pauser.is_test = FALSE
  and ue.is_valid=True
 GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
) 
,
cmi_solo as(
select 
    "cmi_solo",
     CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
    sum(premium_without_tax) AS total_premiums,
    sum(insurer_incentive_received) AS incentives_received,
    sum(insurer_commission_received) AS commissions_received,
    count(distinct cif.id) Policies_sold    
FROM utils_uniteconomics ue
JOIN utils_compulsoryinsuranceform cif ON ue.id=cif.unit_economics_id
JOIN masterdata_insurer insurer ON insurer.id=cif.insurer_id
JOIN profiles_affiliate caffiliate ON caffiliate.id = cif.affiliate_id
JOIN profiles_user cuser ON caffiliate.user_id = cuser.id
where cif.policy_bought = TRUE
    AND cif.is_cancelled = FALSE
    AND cuser.is_test = FALSE
    and ue.is_valid=True
    and caffiliate.account_type in ('inspection_garage', 'subagent')
    -- AND affiliate_commission_given_out > 0
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
)
,
cmi_solo_bm as
(
select 
    "cmi_solo",
     CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
    sum(premium_without_tax) AS total_premiums,
    sum(insurer_incentive_received) AS incentives_received,
    sum(insurer_commission_received) AS commissions_received,
    count(distinct cif.id) Policies_sold    
FROM utils_uniteconomics ue
JOIN utils_compulsoryinsuranceform cif ON ue.id=cif.unit_economics_id
JOIN masterdata_insurer insurer ON insurer.id=cif.insurer_id
JOIN profiles_affiliate caffiliate ON caffiliate.id = cif.affiliate_id
JOIN profiles_user cuser ON caffiliate.user_id = cuser.id
where cif.policy_bought = TRUE
    AND cif.is_cancelled = FALSE
    AND cuser.is_test = FALSE
    and ue.is_valid=True
    and caffiliate.account_type = 'business_manager'
 --   AND affiliate_commission_given_out > 0
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
)
,
cmi_solo_mlm as 
(
select 
    "cmi_solo",
     CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
    sum(premium_without_tax) AS total_premiums,
    sum(insurer_incentive_received) AS incentives_received,
    sum(insurer_commission_received) AS commissions_received,
    count(distinct cif.id) Policies_sold    
FROM utils_uniteconomics ue
JOIN utils_compulsoryinsuranceform cif ON ue.id=cif.unit_economics_id
JOIN masterdata_insurer insurer ON insurer.id=cif.insurer_id
JOIN profiles_affiliate caffiliate ON caffiliate.id = cif.affiliate_id
JOIN profiles_user cuser ON caffiliate.user_id = cuser.id
where cif.policy_bought = TRUE
    AND cif.is_cancelled = FALSE
    AND cuser.is_test = FALSE
    and ue.is_valid=True
    and caffiliate.account_type = 'mlm_agent'
--    AND affiliate_commission_given_out > 0
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
)


select 
    motor.dates,
    coalesce(motor.total_premiums,0) 'FD-motor',
    coalesce(bm.total_premiums,0) 'BM-motor',
    coalesce(motor_ig.total_premiums,0) 'IG-motor',
    coalesce(motor_mlm.total_premiums,0) 'MLM-motor',
    coalesce(covid.total_premiums,0)+coalesce(dengue.total_premiums,0)+coalesce(pa.total_premiums,0) 'non-motor',
    -- coalesce(dengue.total_premiums,0) dengue,
    -- coalesce(pa.total_premiums,0) pa,
    coalesce(cmi_solo.total_premiums,0) 'IG-CMI_solo',
    coalesce(cmi_solo_bm.total_premiums,0) 'BM-CMI_solo',
    coalesce(cmi_solo_mlm.total_premiums,0) 'MLM-CMI_solo',
    
    coalesce(motor.total_premiums,0)+coalesce(bm.total_premiums,0)+coalesce(motor_ig.total_premiums,0)+coalesce(motor_mlm.total_premiums,0)+coalesce(covid.total_premiums,0)+coalesce(dengue.total_premiums,0)+coalesce(pa.total_premiums,0)+coalesce(cmi_solo.total_premiums,0)+coalesce(cmi_solo_mlm.total_premiums,0)+coalesce(cmi_solo_bm.total_premiums,0)  as overall_premium
from motor
left join motor_ig on motor_ig.dates = motor.dates
left join bm on bm.dates = motor.dates
left join covid on covid.dates=motor.dates
left join dengue on dengue.dates=motor.dates
left join pa on pa.dates=motor.dates
left join cmi_solo on cmi_solo.dates=motor.dates
left join cmi_solo_bm on cmi_solo_bm.dates=motor.dates
left join cmi_solo_mlm on cmi_solo_mlm.dates=motor.dates
left join motor_mlm on motor_mlm.dates = motor.dates
order by motor.sold_on

*/
select count(distinct sale_id,policy_type) policy_sold_count,
  sum(ue.premium_without_tax)premium_without_tax,
  sum(ue.premium_after_tax)premium_after_tax,
  sum(coalesce(ue.bonus, 0) + coalesce(ue.referral_bonus, 0)) agent_promotions,
  sum(coalesce(ue.insurer_commission_received, 0) + coalesce(ue.insurer_incentive_received, 0)) commissions_earned,
  sum(coalesce(ue.affiliate_commission_given_out, 0) + coalesce(ue.subsidy, 0)) affiliate_commission,
  date_format(ue.sold_on,'%Y-%m') months
from
(select 'Motor' policy_type, sale_id,
case 
   when  sale.account_type='Direct Agent' then "FD"
            when  sale.account_type = 'mlm_agent' then "MLM"
            when sale.account_type in ('inspection_garage', 'subagent') then "IG"
            when sale.account_type in ('business_manager') then "BM"
            else sale.account_type end   account_type,
 uniteconomics_id
from vmi_policy_sold_successfully sale
join policy_fairdeesale_unit_economics fue on fue.fairdeesale_id = sale.sale_id
union All
select
 policy_type, sale_id,
  case 
   when  sale.account_type='Direct Agent' then "FD"
            when  sale.account_type = 'mlm_agent' then "MLM"
            when sale.account_type in ('inspection_garage', 'subagent') then "IG"
            when sale.account_type in ('business_manager') then "BM"
            else sale.account_type end   account_type,
 unit_economics_id
 from cmi_solo_policy_sold_successfully sale
   union All
select
 'Non-Motor' policy_type, sale_id,
  case 
   when  sale.account_type='Direct Agent' then "FD"
            when  sale.account_type = 'mlm_agent' then "MLM"
            when sale.account_type in ('inspection_garage', 'subagent') then "IG"
            when sale.account_type in ('business_manager') then "BM"
            else sale.account_type end   account_type,
 unit_economics_id
 from
  pa_policy_sold_successfully sale
   union All
select
 'Non-Motor' policy_type,
sale.id sale_id,
case when  sale.account_type='Direct Agent' then "FD"
            when  sale.account_type = 'mlm_agent' then "MLM"
            when sale.account_type in ('inspection_garage', 'subagent') then "IG"
            when sale.account_type in ('business_manager') then "BM"
            else sale.account_type end   account_type,
 unit_economics_id
 from covid_policy_sold_successfully sale
   union All
select 'Non-Motor' policy_type, sale.id,
 case 
   when  sale.account_type='Direct Agent' then "FD"
            when  sale.account_type = 'mlm_agent' then "MLM"
            when sale.account_type in ('inspection_garage', 'subagent') then "IG"
            when sale.account_type in ('business_manager') then "BM"
            else sale.account_type end   account_type,
 unit_economics_id
 from dengue_policy_sold_successfull sale
  union All
   select 'Non-Standard' policy_type, sale.id,
 case 
   when  aff.account_type='Direct Agent' then "Direct Agent"
            when  aff.account_type = 'mlm_agent' then "MLM"
            when aff.account_type in ('inspection_garage', 'subagent') then "IG"
            when aff.account_type in ('business_manager') then "BM"
            else aff.account_type end   account_type,
 unit_economics_id
 from policy_nonstandardinsuranceproductsaledata sale
  join profiles_affiliate aff on aff.id=sale.affiliate_id
  )s
    join utils_uniteconomics ue on ue.id = s.uniteconomics_id
  where
  ue.is_valid = true
           -- and policy_type="cmi_solo"
           --  and  sale.account_type is null
group by date_format(ue.sold_on,'%Y-%m')


Title: Loan on installment
SQL: 

select sold_on_month,sum(amount_payable)Total_loan,number_of_installment from
(

select sale.sale_id,
invoice.id invoice_id,
amount_payable,
date_format(sale.sold_on,"%y-%m") sold_on_month,
rank()over (partition by sale.sale_id order by invoice.id) rn,
count(invoice.id)over (partition by sale.sale_id) number_of_installment

from vmi_policy_sold_successfully sale
join policy_fairdeesaleinvoice fsi on((fsi.fairdee_sale_id = sale.sale_id))
join billing_invoice invoice on invoice.id=fsi.invoice_id
where sale_type="instalment"
and  invoice.payee = "fairdee"
        AND invoice.payer = "customer"
        AND invoice.is_deleted = FALSE 
        
        
        ) A
where rn>1 
group by sold_on_month,number_of_installment
order by 1 desc, 3 desc




Title: Current date CMI IG (per insurer)
SQL: SELECT  ins.code as 'insurer',
        count(cf.id) as Count,
        sum(cf.premium) as Premium 
FROM utils_compulsoryinsuranceform cf
join profiles_affiliate aff on aff.id=cf.affiliate_id 
join profiles_user user on user.id=aff.user_id
-- join utils_uniteconomics ue on ue.id = cf.unit_economics_id
join masterdata_insurer ins on ins.id=cf.insurer_id
WHERE policy_bought = TRUE
  AND cf.policy_number is not NULL
  AND is_cancelled = FALSE
  and user.is_test=false
--   and ins.code in ("asia", "SEI")
--   AND affiliate_commission_given_out > 0
--   and ue.is_valid = TRUE
  and aff.account_type in ('inspection_garage', 'subagent')
  and date(convert_tz(cf.created_at,"UTC","+07:00"))= curdate()
  group by ins.code


Title: Agent codes for Chatwoot search
SQL:  SELECT distinct contacts.custom_attributes->>'agent_code' as agent_code FROM contacts WHERE contacts.custom_attributes->>'agent_code' IS NOT NULL


Title: Make/model data
SQL: SELECT
  masterdata_make.name AS make,
  masterdata_makemodel.name AS model,
  masterdata_cc.name AS cc,
  masterdata_modeldescription.name AS submodel,
  masterdata_makemodel.vehicle_category as vehicle_category,
  masterdata_modeldescription.min_year as 'min_year',
  masterdata_modeldescription.max_year as 'max_year'
--   concat(masterdata_make.name, " ", masterdata_makemodel.name, " ", masterdata_cc.name) car_name,
--   masterdata_make.id AS make_id,
--   masterdata_makemodel.id AS makemodel_id,
--   masterdata_cc.id AS cc_id,
--   masterdata_modeldescription.id AS modeldescription_id
FROM
  masterdata_modeldescription
  JOIN masterdata_cc ON masterdata_cc.id = masterdata_modeldescription.cc_id
  JOIN masterdata_makemodel ON masterdata_makemodel.id = masterdata_cc.make_model_id
  JOIN masterdata_make ON masterdata_make.id = masterdata_makemodel.make_id
  JOIN masterdata_country ON masterdata_country.id = masterdata_make.country_id
WHERE
  masterdata_makemodel.is_deleted = false
  AND masterdata_makemodel.is_motorcycle = false
  AND masterdata_country.code = 'th'
ORDER BY
  masterdata_make.name,
  masterdata_makemodel.name,
  masterdata_cc.name


Title: Current date CMI IG
SQL: SELECT count(cf.id) as Count,
    sum(cf.premium) as Premium 
FROM utils_compulsoryinsuranceform cf
join profiles_affiliate aff on aff.id=cf.affiliate_id 
join profiles_user user on user.id=aff.user_id
-- join utils_uniteconomics ue on ue.id = cf.unit_economics_id
join masterdata_insurer ins on ins.id=cf.insurer_id
WHERE policy_bought = TRUE
  AND cf.policy_number is not NULL
  AND is_cancelled = FALSE
  and user.is_test=false
--   and ins.code in ("asia", "SEI")
--   AND affiliate_commission_given_out > 0
--   and ue.is_valid = TRUE
  and aff.account_type in ('inspection_garage', 'subagent')
  and date(convert_tz(cf.created_at,"UTC","+07:00"))= curdate()


Title: CMI IG monthly performance
SQL: select selling.*, total.total_igs
from 
(select 
   date_format(cf_created_at,"%Y-%m") as month,
    sum(ue.premium_without_tax) Premium,
    count(sale.sale_id) Count,
    count(distinct affiliate_code) as IG
FROM cmi_solo_policy_sold_successfully sale
join utils_uniteconomics ue on sale.unit_economics_id=ue.id
left join (select distinct atag.affiliate_id
from profiles_affiliatetag atag
join profiles_tag tag on tag.id = atag.tag_id
where tag.name in  ('at_agentoffice', 'at_broker')) tag on tag.affiliate_id = sale.affiliate_id
where account_type in ('inspection_garage', 'subagent')
and tag.affiliate_id is null
group by date_format(cf_created_at,"%Y-%m")) selling
left join ( select date_format(month, '%Y-%m') month, 
                    total_igs
            from 
            (select str_to_date(date_format(aff.created_at, '1-%m-%Y'), '%d-%m-%Y') month, 
                    count(aff.affiliate_id), 
                    sum(count(aff.affiliate_id)) 
                        over(order by str_to_date(date_format(aff.created_at, '1-%m-%Y'), '%d-%m-%Y')) total_igs
            from (select distinct * from agent_grouping) aff 
            left join (select distinct atag.affiliate_id
                        from profiles_affiliatetag atag
                        join profiles_tag tag on tag.id = atag.tag_id
                        where tag.name in  ('at_agentoffice', 'at_broker')) tag on tag.affiliate_id = aff.affiliate_id
            where aff.account_type = 'inspection_garage'
            and tag.affiliate_id is null
            group by 1) total ) total on total.month = selling.month



Title: admin names
SQL: select distinct usr.fullname AS created_by_name, count(fqq.id)
FROM utils_fairdeequotationquery fqq
JOIN profiles_affiliate affiliate ON affiliate.id=fqq.affiliate_id
LEFT JOIN profiles_user user ON user.id = affiliate.user_id -- created for
LEFT JOIN profiles_user usr ON usr.id=fqq.created_by_id -- created by
join profiles_userrole urole on urole.user_id=user.id
join profiles_role role on role.id = urole.role_id

WHERE date(fqq.created_at)>=STR_TO_DATE("2021,01,01", "%Y,%m,%d") 
  AND user.is_test = FALSE
and affiliate.user_id != fqq.created_by_id -- made by admin only
and role.name != "admin" -- not created for admin
and user.email not like '%fairdee.co.th' or '%vouch%'
group by usr.id
order by count(fqq.id) desc


Title: Monthly premiums(Motor,Covid,Dengue,PA,CMI solo) by payment created
SQL: /*with motor as
(
SELECT 
      "motor",
      ue.sold_on,
      CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
      sum(premium_without_tax) AS total_premiums,
      sum(insurer_incentive_received) AS incentives_received,
      sum(insurer_commission_received) AS commissions_received,
      count(distinct sale.id) Policies_sold
FROM utils_uniteconomics ue
JOIN policy_fairdeesale_unit_economics fsue ON fsue.uniteconomics_id = ue.id
JOIN policy_fairdeesale sale ON sale.id = fsue.fairdeesale_id
JOIN utils_fairdeequotation quotation ON quotation.id = sale.quotation_id
JOIN profiles_affiliate affiliate ON affiliate.id = sale.affiliate_id
JOIN profiles_user user ON affiliate.user_id = user.id
where
    sale.is_cancelled = FALSE
    AND sale.policy_status NOT LIKE '%rejected'
    and (sale.payment_status IN ("payment_verified",
                              "commission_transferred","credit_approved")
      OR sale.policy_status IN ("policy_sent_to_user",
                                 "policy_delivered_to_user","policy_uploaded") 
      OR EXISTS
        (SELECT 1
        FROM billing_invoice invoice
        JOIN policy_fairdeesaleinvoice sale_invoice_map ON invoice.id = sale_invoice_map.invoice_id
        WHERE sale_invoice_map.fairdee_sale_id = sale.id
            AND invoice.payee = 'fairdee'
            AND invoice.payer = 'customer'
            AND invoice.payment_status != 'unpaid'))
    AND user.is_test = FALSE
    and ue.is_valid=True
    and (affiliate.account_type is null)
     and ue.sold_on > STR_TO_DATE('2019-08-01','%Y-%m-%d')
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
ORDER BY (ue.sold_on) 
),
bm as
(
SELECT 
      "bm",
      ue.sold_on,
      CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
      sum(premium_without_tax) AS total_premiums,
      sum(insurer_incentive_received) AS incentives_received,
      sum(insurer_commission_received) AS commissions_received,
      count(distinct sale.id) Policies_sold
FROM utils_uniteconomics ue
JOIN policy_fairdeesale_unit_economics fsue ON fsue.uniteconomics_id = ue.id
JOIN policy_fairdeesale sale ON sale.id = fsue.fairdeesale_id
JOIN utils_fairdeequotation quotation ON quotation.id = sale.quotation_id
JOIN profiles_affiliate affiliate ON affiliate.id = sale.affiliate_id
JOIN profiles_user user ON affiliate.user_id = user.id
where
    sale.is_cancelled = FALSE
    AND sale.policy_status NOT LIKE '%rejected'
    and (sale.payment_status IN ("payment_verified",
                              "commission_transferred","credit_approved")
      OR sale.policy_status IN ("policy_sent_to_user",
                                 "policy_delivered_to_user","policy_uploaded") 
      OR EXISTS
        (SELECT 1
        FROM billing_invoice invoice
        JOIN policy_fairdeesaleinvoice sale_invoice_map ON invoice.id = sale_invoice_map.invoice_id
        WHERE sale_invoice_map.fairdee_sale_id = sale.id
            AND invoice.payee = 'fairdee'
            AND invoice.payer = 'customer'
            AND invoice.payment_status != 'unpaid'))
    AND user.is_test = FALSE
    and ue.is_valid=True
    and (affiliate.account_type = 'business_manager')
     and ue.sold_on > STR_TO_DATE('2019-08-01','%Y-%m-%d')
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
ORDER BY (ue.sold_on) 
),
motor_ig as
(
SELECT 
      "motor_ig",
      ue.sold_on,
      CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
      sum(premium_without_tax) AS total_premiums,
      sum(insurer_incentive_received) AS incentives_received,
      sum(insurer_commission_received) AS commissions_received,
      count(distinct sale.id) Policies_sold
FROM utils_uniteconomics ue
JOIN policy_fairdeesale_unit_economics fsue ON fsue.uniteconomics_id = ue.id
JOIN policy_fairdeesale sale ON sale.id = fsue.fairdeesale_id
JOIN utils_fairdeequotation quotation ON quotation.id = sale.quotation_id
join masterdata_pricelist pl on quotation.price_list_id = pl.id
join masterdata_insurer insurer on insurer.id = pl.insurer_id
JOIN profiles_affiliate affiliate ON affiliate.id = sale.affiliate_id
JOIN profiles_user user ON affiliate.user_id = user.id
where
    sale.is_cancelled = FALSE
    -- and sale.sale_type = 'credit'
    AND sale.policy_status NOT LIKE '%rejected'
    and (sale.payment_status IN ("payment_verified",
                              "commission_transferred","credit_approved")
      OR sale.policy_status IN ("policy_sent_to_user",
                                 "policy_delivered_to_user","policy_uploaded") 
      OR EXISTS
        (SELECT 1
        FROM billing_invoice invoice
        JOIN policy_fairdeesaleinvoice sale_invoice_map ON invoice.id = sale_invoice_map.invoice_id
        WHERE sale_invoice_map.fairdee_sale_id = sale.id
            AND invoice.payee = 'fairdee'
            AND invoice.payer = 'customer'
            AND invoice.payment_status != 'unpaid')
            )
    and (affiliate.account_type in ('subagent', 'inspection_garage'))
    AND user.is_test = FALSE
    and ue.is_valid=True
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
ORDER BY (ue.sold_on) 
),
motor_mlm as
(

SELECT 
      "motor_mlm",
      ue.sold_on,
      CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
      sum(premium_without_tax) AS total_premiums,
      sum(insurer_incentive_received) AS incentives_received,
      sum(insurer_commission_received) AS commissions_received,
      count(distinct sale.id) Policies_sold
FROM utils_uniteconomics ue
JOIN policy_fairdeesale_unit_economics fsue ON fsue.uniteconomics_id = ue.id
JOIN policy_fairdeesale sale ON sale.id = fsue.fairdeesale_id
JOIN utils_fairdeequotation quotation ON quotation.id = sale.quotation_id
JOIN profiles_affiliate affiliate ON affiliate.id = sale.affiliate_id
JOIN profiles_user user ON affiliate.user_id = user.id
where
    sale.is_cancelled = FALSE
    AND sale.policy_status NOT LIKE '%rejected'
    and (sale.payment_status IN ("payment_verified",
                              "commission_transferred","credit_approved")
      OR sale.policy_status IN ("policy_sent_to_user",
                                 "policy_delivered_to_user","policy_uploaded") 
      OR EXISTS
        (SELECT 1
        FROM billing_invoice invoice
        JOIN policy_fairdeesaleinvoice sale_invoice_map ON invoice.id = sale_invoice_map.invoice_id
        WHERE sale_invoice_map.fairdee_sale_id = sale.id
            AND invoice.payee = 'fairdee'
            AND invoice.payer = 'customer'
            AND invoice.payment_status != 'unpaid'))
    AND user.is_test = FALSE
    and ue.is_valid=True
    and (affiliate.account_type = 'mlm_agent')
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
ORDER BY (ue.sold_on) 
),
covid as(
select
    "covid",
     CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
    sum(premium_without_tax) AS total_premiums,
    sum(insurer_incentive_received) AS incentives_received,
    sum(insurer_commission_received) AS commissions_received,
    count(distinct cf.id) Policies_sold
FROM utils_uniteconomics ue
join utils_covidform cf ON cf.unit_economics_id = ue.id
JOIN billing_invoicedetail idco on idco.id = cf.invoice_detail_id
JOIN billing_invoice invco on invco.id = idco.invoice_id
JOIN profiles_affiliate cfaffiliate ON cfaffiliate.id = cf.affiliate_id
JOIN profiles_user cfuser ON cfaffiliate.user_id = cfuser.id
where invco.payment_status in ("fully_paid", "overpaid")
  AND cf.policy_status != 'docs_rejected' 
  and cf.is_cancelled=False
  AND cfuser.is_test = FALSE
  and ue.is_valid=True
  GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
) 
,
dengue as(
select  
    "dengue",
     CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
    sum(premium_without_tax) AS total_premiums,
    sum(insurer_incentive_received) AS incentives_received,
    sum(insurer_commission_received) AS commissions_received,
    count(distinct df.id) Policies_sold
FROM utils_uniteconomics ue
join utils_dengueform df ON df.unit_economics_id = ue.id
JOIN billing_invoicedetail id on id.id = df.invoice_detail_id
JOIN billing_invoice inv on inv.id = id.invoice_id
JOIN profiles_affiliate dfaffiliate ON dfaffiliate.id = df.affiliate_id
JOIN profiles_user dfuser ON dfaffiliate.user_id = dfuser.id
where inv.payment_status in ("fully_paid", "overpaid")
  AND df.policy_status != 'docs_rejected' 
  and df.is_cancelled=False
  AND dfuser.is_test = FALSE
  and ue.is_valid=True
 GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
) 
,
pa as(
select  
    "pa",
     CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
    sum(premium_without_tax) AS total_premiums,
    sum(insurer_incentive_received) AS incentives_received,
    sum(insurer_commission_received) AS commissions_received,
    count(distinct pa.id) Policies_sold
FROM utils_uniteconomics ue
join utils_paform pa ON pa.unit_economics_id = ue.id
JOIN billing_invoicedetail id on id.id = pa.invoice_detail_id
JOIN billing_invoice inv on inv.id = id.invoice_id
JOIN profiles_affiliate paaffiliate ON paaffiliate.id = pa.affiliate_id
JOIN profiles_user pauser ON paaffiliate.user_id = pauser.id
where inv.payment_status in ("fully_paid", "overpaid")
  AND pa.policy_status != 'docs_rejected' 
  and pa.is_cancelled=False
  AND pauser.is_test = FALSE
  and ue.is_valid=True
 GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
) 
,
cmi_solo as(
select 
    "cmi_solo",
     CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
    sum(premium_without_tax) AS total_premiums,
    sum(insurer_incentive_received) AS incentives_received,
    sum(insurer_commission_received) AS commissions_received,
    count(distinct cif.id) Policies_sold    
FROM utils_uniteconomics ue
JOIN utils_compulsoryinsuranceform cif ON ue.id=cif.unit_economics_id
JOIN masterdata_insurer insurer ON insurer.id=cif.insurer_id
JOIN profiles_affiliate caffiliate ON caffiliate.id = cif.affiliate_id
JOIN profiles_user cuser ON caffiliate.user_id = cuser.id
where cif.policy_bought = TRUE
    AND cif.is_cancelled = FALSE
    AND cuser.is_test = FALSE
    and ue.is_valid=True
    and caffiliate.account_type in ('inspection_garage', 'subagent')
    -- AND affiliate_commission_given_out > 0
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
)
,
cmi_solo_bm as
(
select 
    "cmi_solo",
     CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
    sum(premium_without_tax) AS total_premiums,
    sum(insurer_incentive_received) AS incentives_received,
    sum(insurer_commission_received) AS commissions_received,
    count(distinct cif.id) Policies_sold    
FROM utils_uniteconomics ue
JOIN utils_compulsoryinsuranceform cif ON ue.id=cif.unit_economics_id
JOIN masterdata_insurer insurer ON insurer.id=cif.insurer_id
JOIN profiles_affiliate caffiliate ON caffiliate.id = cif.affiliate_id
JOIN profiles_user cuser ON caffiliate.user_id = cuser.id
where cif.policy_bought = TRUE
    AND cif.is_cancelled = FALSE
    AND cuser.is_test = FALSE
    and ue.is_valid=True
    and caffiliate.account_type = 'business_manager'
 --   AND affiliate_commission_given_out > 0
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
)
,
cmi_solo_mlm as 
(
select 
    "cmi_solo",
     CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on)) as dates,
    sum(premium_without_tax) AS total_premiums,
    sum(insurer_incentive_received) AS incentives_received,
    sum(insurer_commission_received) AS commissions_received,
    count(distinct cif.id) Policies_sold    
FROM utils_uniteconomics ue
JOIN utils_compulsoryinsuranceform cif ON ue.id=cif.unit_economics_id
JOIN masterdata_insurer insurer ON insurer.id=cif.insurer_id
JOIN profiles_affiliate caffiliate ON caffiliate.id = cif.affiliate_id
JOIN profiles_user cuser ON caffiliate.user_id = cuser.id
where cif.policy_bought = TRUE
    AND cif.is_cancelled = FALSE
    AND cuser.is_test = FALSE
    and ue.is_valid=True
    and caffiliate.account_type = 'mlm_agent'
--    AND affiliate_commission_given_out > 0
GROUP BY CONCAT(MONTH(ue.sold_on),"/",YEAR(ue.sold_on))
)


select 
    motor.dates,
    coalesce(motor.total_premiums,0) 'FD-motor',
    coalesce(bm.total_premiums,0) 'BM-motor',
    coalesce(motor_ig.total_premiums,0) 'IG-motor',
    coalesce(motor_mlm.total_premiums,0) 'MLM-motor',
    coalesce(covid.total_premiums,0)+coalesce(dengue.total_premiums,0)+coalesce(pa.total_premiums,0) 'non-motor',
    -- coalesce(dengue.total_premiums,0) dengue,
    -- coalesce(pa.total_premiums,0) pa,
    coalesce(cmi_solo.total_premiums,0) 'IG-CMI_solo',
    coalesce(cmi_solo_bm.total_premiums,0) 'BM-CMI_solo',
    coalesce(cmi_solo_mlm.total_premiums,0) 'MLM-CMI_solo',
    
    coalesce(motor.total_premiums,0)+coalesce(bm.total_premiums,0)+coalesce(motor_ig.total_premiums,0)+coalesce(motor_mlm.total_premiums,0)+coalesce(covid.total_premiums,0)+coalesce(dengue.total_premiums,0)+coalesce(pa.total_premiums,0)+coalesce(cmi_solo.total_premiums,0)+coalesce(cmi_solo_mlm.total_premiums,0)+coalesce(cmi_solo_bm.total_premiums,0)  as overall_premium
from motor
left join motor_ig on motor_ig.dates = motor.dates
left join bm on bm.dates = motor.dates
left join covid on covid.dates=motor.dates
left join dengue on dengue.dates=motor.dates
left join pa on pa.dates=motor.dates
left join cmi_solo on cmi_solo.dates=motor.dates
left join cmi_solo_bm on cmi_solo_bm.dates=motor.dates
left join cmi_solo_mlm on cmi_solo_mlm.dates=motor.dates
left join motor_mlm on motor_mlm.dates = motor.dates
order by motor.sold_on

*/
select
  concat(account_type, "-", policy_type) grouped,
  count(distinct sale_id, policy_type) policy_sold_count,
  sum(ue.premium_without_tax) premium_without_tax,
  sum(ue.premium_after_tax) premium_after_tax,
  sum(
    coalesce(ue.bonus, 0) + coalesce(ue.referral_bonus, 0)
  ) agent_promotions,
  sum(
    coalesce(ue.insurer_commission_received, 0) + coalesce(ue.insurer_incentive_received, 0)
  ) commissions_earned,
  sum(
    coalesce(ue.affiliate_commission_given_out, 0) + coalesce(ue.subsidy, 0)
  ) affiliate_commission,
  date_format(ue.sold_on, '%Y-%m') months
from
  (
    select
      'Motor' policy_type,
      sale_id,
      case
        when sale.account_type = 'Direct Agent'
        and tag.affiliate_id is null then "FD"
        when sale.account_type = 'mlm_agent'
        and tag.affiliate_id is null then "MLM"
        when sale.account_type in ('inspection_garage', 'subagent')
        and tag.affiliate_id is null then "IG"
        when tag.affiliate_id is not null
        and (
          sale.account_type = 'Direct Agent'
          or sale.account_type in ('inspection_garage', 'subagent')
        ) and tag.name = 'at_agentoffice' then 'AO'
        when tag.affiliate_id is not null 
        and sale.account_type = 'inspection_garage' 
        and tag.name = 'at_broker' then 'broker'
        else sale.account_type
      end account_type,
      uniteconomics_id
    from
      vmi_policy_sold_successfully sale
      left join (
        select
          distinct atag.affiliate_id, tag.name
        from
          profiles_affiliatetag atag
          join profiles_tag tag on tag.id = atag.tag_id
        where
          tag.name in ('at_agentoffice', 'at_broker')
      ) tag on tag.affiliate_id = sale.affiliate_id
      join policy_fairdeesale_unit_economics fue on fue.fairdeesale_id = sale.sale_id
    union All
    select
      policy_type,
      sale_id,
      case
        when sale.account_type = 'Direct Agent'
        and tag.affiliate_id is null then "FD"
        when sale.account_type = 'mlm_agent'
        and tag.affiliate_id is null then "MLM"
        when sale.account_type in ('inspection_garage', 'subagent')
        and tag.affiliate_id is null then "IG"
        when tag.affiliate_id is not null
        and (
          sale.account_type = 'Direct Agent'
          or sale.account_type in ('inspection_garage', 'subagent')
        ) and tag.name = 'at_agentoffice' then 'AO'
        when tag.affiliate_id is not null 
        and sale.account_type in ('inspection_garage', 'subagent')
        and tag.name = 'at_broker' then 'broker'
        else sale.account_type
      end account_type,
      unit_economics_id
    from
      cmi_solo_policy_sold_successfully sale
      left join (
        select
          distinct atag.affiliate_id, tag.name
        from
          profiles_affiliatetag atag
          join profiles_tag tag on tag.id = atag.tag_id
        where
          tag.name in ('at_agentoffice', 'at_broker')
      ) tag on tag.affiliate_id = sale.affiliate_id
    union All
    select
      'Non-Motor' policy_type,
      sale_id,
      case
        when sale.account_type = 'Direct Agent'
        and tag.affiliate_id is null then "FD"
        when sale.account_type = 'mlm_agent'
        and tag.affiliate_id is null then "MLM"
        when sale.account_type in ('inspection_garage', 'subagent')
        and tag.affiliate_id is null then "IG"
        when tag.affiliate_id is not null
        and (
          sale.account_type = 'Direct Agent'
          or sale.account_type in ('inspection_garage', 'subagent')
        ) and tag.name = 'at_agentoffice' then 'AO'
        when tag.affiliate_id is not null 
        and sale.account_type in ('inspection_garage' 'subagent')
        and tag.name = 'at_broker' then 'broker'
        else sale.account_type
      end account_type,
      unit_economics_id
    from
      pa_policy_sold_successfully sale
      left join (
        select
          distinct atag.affiliate_id, tag.name
        from
          profiles_affiliatetag atag
          join profiles_tag tag on tag.id = atag.tag_id
        where
          tag.name in ('at_agentoffice', 'at_broker')
      ) tag on tag.affiliate_id = sale.affiliate_id
    union All
    select
      'Non-Motor' policy_type,
      sale.id sale_id,
      case
        when sale.account_type = 'Direct Agent'
        and tag.affiliate_id is null then "FD"
        when sale.account_type = 'mlm_agent'
        and tag.affiliate_id is null then "MLM"
        when sale.account_type in ('inspection_garage', 'subagent')
        and tag.affiliate_id is null then "IG"
        when tag.affiliate_id is not null
        and (
          sale.account_type = 'Direct Agent'
          or sale.account_type in ('inspection_garage', 'subagent')
        ) and tag.name = 'at_agentoffice' then 'AO'
        when tag.affiliate_id is not null 
        and sale.account_type in ('inspection_garage', 'subagent')
        and tag.name = 'at_broker' then 'broker'
        else sale.account_type
      end account_type,
      unit_economics_id
    from
      covid_policy_sold_successfully sale
      left join (
        select
          distinct atag.affiliate_id, tag.name
        from
          profiles_affiliatetag atag
          join profiles_tag tag on tag.id = atag.tag_id
        where
          tag.name in ('at_agentoffice', 'at_broker')
      ) tag on tag.affiliate_id = sale.affiliate_id
    union All
    select
      'Non-Motor' policy_type,
      sale.id,
      case
        when sale.account_type = 'Direct Agent'
        and tag.affiliate_id is null then "FD"
        when sale.account_type = 'mlm_agent'
        and tag.affiliate_id is null then "MLM"
        when sale.account_type in ('inspection_garage', 'subagent')
        and tag.affiliate_id is null then "IG"
        when tag.affiliate_id is not null
        and (
          sale.account_type = 'Direct Agent'
          or sale.account_type in ('inspection_garage', 'subagent')
        ) and tag.name = 'at_agentoffice' then 'AO'
        when tag.affiliate_id is not null 
        and sale.account_type in ('inspection_garage', 'subagent')
        and tag.name = 'at_broker' then 'broker'
        else sale.account_type
      end account_type,
      unit_economics_id
    from
      dengue_policy_sold_successfull sale
      left join (
        select
          distinct atag.affiliate_id, tag.name
        from
          profiles_affiliatetag atag
          join profiles_tag tag on tag.id = atag.tag_id
        where
          tag.name in ('at_agentoffice', 'at_broker')
      ) tag on tag.affiliate_id = sale.affiliate_id
    union All
    select
      'Non-Standard' policy_type,
      sale.id,
      case
        when aff.account_type is null
        and tag.affiliate_id is null then "FD"
        when aff.account_type = 'mlm_agent'
        and tag.affiliate_id is null then "MLM"
        when aff.account_type in ('inspection_garage', 'subagent')
        and tag.affiliate_id is null then "IG"
        when tag.affiliate_id is not null
        and (
          aff.account_type is null
          or aff.account_type in ('inspection_garage', 'subagent')
        ) and tag.name = 'at_agentoffice' then 'AO'
        when tag.affiliate_id is not null 
        and aff.account_type in ('inspection_garage', 'subagent')
        and tag.name = 'at_broker' then 'broker'
        else aff.account_type
      end account_type,
      unit_economics_id
    from
      policy_nonstandardinsuranceproductsaledata sale
      join profiles_affiliate aff on aff.id = sale.affiliate_id
      left join (
        select
          distinct atag.affiliate_id, tag.name
        from
          profiles_affiliatetag atag
          join profiles_tag tag on tag.id = atag.tag_id
        where
          tag.name in ('at_agentoffice', 'at_broker')
      ) tag on tag.affiliate_id = aff.id
  ) s
  join utils_uniteconomics ue on ue.id = s.uniteconomics_id
where
  ue.is_valid = true -- and policy_type="cmi_solo"
  --  and  sale.account_type is null
group by
  date_format(ue.sold_on, '%Y-%m'),
  policy_type,
  account_type
order by
  concat(account_type, "-", policy_type)


Title: ASIA COVID Issues
SQL: SELECT CONCAT("https://www.fairdee.co.th/corona-wizard?id=", cf.id), address.district, address.province, address.postal_code, cf.policy_start_date, JSON_EXTRACT(cf.scrapy_response_payload, '$.errors') AS "Errors"
,affiliate.agent_code, user.fullname, bd.ac_holder_name, bd.ac_number, bd.bank_name,cf.policy_status,cf.payment_status
FROM utils_covidform cf
left join profiles_affiliate affiliate on cf.affiliate_id= affiliate.id
left join profiles_user user on user.id=user_id
left join profiles_userbankdetail bd on bd.affiliate_id=affiliate.id
JOIN masterdata_covidplan plan ON plan.id = cf.plan_id
JOIN masterdata_insurer insurer ON insurer.id = plan.insurer_id
JOIN utils_address address ON cf.client_address_id = address.id
WHERE insurer.code = 'asia'
AND JSON_LENGTH(cf.scrapy_response_payload, '$.errors') > 0
and cf.payment_status not like "%refunded%"


Title: Total Agents Selling - By payment created
SQL: SELECT count(distinct affiliate.id) AS "Total Affiliates"
FROM policy_fairdeesale sale
JOIN utils_fairdeequotation quotation ON sale.quotation_id = quotation.id
JOIN profiles_affiliate affiliate ON affiliate.id = sale.affiliate_id
JOIN profiles_user user ON affiliate.user_id = user.id
join profiles_userrole urole on urole.user_id=user.id
join profiles_role role on role.id = urole.role_id
WHERE
 user.is_test = FALSE
--  and affiliate.has_broker_license = True
--  and role.name!="admin"
--  and user.email not like "%fairdee.co.th%"
--  and user.email not like "%vouch%"
 AND sale.is_cancelled = FALSE
 AND sale.policy_status NOT LIKE '%rejected'
  and (sale.payment_status IN ("payment_verified",
                              "commission_transferred","credit_approved")
      OR sale.policy_status IN ("policy_sent_to_user",
                                 "policy_delivered_to_user","policy_uploaded") 
      OR EXISTS
        (SELECT 1
        FROM billing_invoice invoice
        JOIN policy_fairdeesaleinvoice sale_invoice_map ON invoice.id = sale_invoice_map.invoice_id
        WHERE sale_invoice_map.fairdee_sale_id = sale.id
            AND invoice.payee = 'fairdee'
            AND invoice.payer = 'customer'
            AND invoice.payment_status != 'unpaid')
        )
  and (affiliate.account_type is null)


Title: Khun Nid's Total Voluntary Premiums per Month
SQL: SELECT concat(month(sale.sold_on), "/", year(sale.sold_on)) as "Month Sold One" , count(sale.id) as "Total Sale", sum(pl.gross_premium) as "Total Premium"
    FROM policy_fairdeesale sale
    JOIN utils_fairdeequotation quotation on sale.quotation_id = quotation.id
    JOIN utils_fairdeequotationquery qq ON qq.id = quotation.quotation_query_id
   LEFT JOIN masterdata_pricelist pl ON pl.id = quotation.price_list_id
    JOIN profiles_affiliate affiliate ON affiliate.id = sale.affiliate_id
    JOIN profiles_user user on affiliate.user_id = user.id
    JOIN profiles_usertag usertag ON usertag.user_id = user.id
JOIN profiles_tag tag ON usertag.tag_id = tag.id
    WHERE user.is_test = false and sale.is_cancelled = false
    and sale.policy_status not like '%rejected' and tag.name like 'ae-nid'
    group by concat(month(sale.sold_on), "/", year(sale.sold_on))
    order by concat(month(sale.sold_on), "/", year(sale.sold_on)) desc


Title: Khun Nid's Affiliate Details
SQL: SELECT aff.agent_code,
       aff.fullname,
       aff.phone,
       sales.sale_count,
       quotes.quote_count,
       quotes.pdf_count,
       sales.total_premiums,
       sales.average_premiums
FROM (
SELECT affiliate.agent_code,
       user.fullname,
       user.phone
FROM profiles_affiliate affiliate
JOIN profiles_user user ON user.id = affiliate.user_id
LEFT JOIN profiles_usertag usertag ON usertag.user_id = user.id
LEFT JOIN profiles_tag tag ON usertag.tag_id = tag.id
LEFT JOIN profiles_affiliate ref_aff ON ref_aff.id = affiliate.referrer_id
WHERE user.is_test = FALSE
  AND tag.name LIKE 'ae-nid') as aff
  JOIN
    (SELECT affiliate.agent_code,
            count(CASE
                      WHEN sale.id THEN 1
                  END) AS sale_count,
            sum(pl.gross_premium) AS total_premiums, avg(pl.gross_premium) as average_premiums
     FROM profiles_affiliate affiliate
     LEFT JOIN policy_fairdeesale sale ON affiliate.id = sale.affiliate_id
     AND sale.is_cancelled = FALSE
     AND sale.policy_status NOT LIKE '%rejected'
     AND MONTH(sale.sold_on) = MONTH(CURRENT_DATE())
     AND YEAR(sale.sold_on) = YEAR(CURRENT_DATE())
     LEFT JOIN utils_fairdeequotation quotation ON sale.quotation_id = quotation.id
     LEFT JOIN utils_fairdeequotationquery qq ON qq.id = quotation.quotation_query_id
     LEFT JOIN masterdata_pricelist pl ON pl.id = quotation.price_list_id
     GROUP BY affiliate.agent_code
     ORDER BY sale_count) AS sales ON aff.agent_code = sales.agent_code
  JOIN
    (SELECT affiliate.agent_code,
            count(qq.id) AS quote_count,
            count(CASE
                      WHEN qq.download_count > 0 THEN 1
                  END) AS pdf_count
     FROM profiles_affiliate affiliate
     LEFT JOIN utils_fairdeequotationquery qq ON affiliate.id = qq.affiliate_id
     AND month(qq.created_at) = MONTH(CURRENT_DATE())
     AND year(qq.created_at) = year(CURRENT_DATE())
     GROUP BY affiliate.agent_code
     ORDER BY quote_count) AS quotes ON quotes.agent_code = aff.agent_code
GROUP BY aff.agent_code
ORDER BY sales.sale_count DESC,
         quotes.quote_count DESC,
         quotes.pdf_count DESC


Title: Fairdee Affiliate Tags
SQL: SELECT "ALL AFFILIATES" AS name
UNION ALL
SELECT "OFFLINE AFFILIATES" AS name
UNION ALL
SELECT "ONLINE AFFILIATES" AS name
UNION ALL
SELECT DISTINCT tag.name AS name
FROM profiles_tag tag
JOIN profiles_usertag ut ON ut.tag_id = tag.id
JOIN profiles_user usr ON ut.user_id = usr.id
JOIN profiles_affiliate aff ON aff.user_id = usr.id


